{"result":[{"scriptId":"102","url":"node:internal/per_context/primordials","functions":[{"functionName":"SafeIterator","ranges":[{"startOffset":8411,"endOffset":8484,"count":2}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":8490,"endOffset":8541,"count":35}],"isBlockCoverage":true},{"functionName":"desc.value","ranges":[{"startOffset":10204,"endOffset":10273,"count":2}],"isBlockCoverage":true}]},{"scriptId":"104","url":"node:internal/per_context/messageport","functions":[{"functionName":"exports.emitMessage","ranges":[{"startOffset":425,"endOffset":1031,"count":2},{"startOffset":710,"endOffset":1028,"count":0}],"isBlockCoverage":true}]},{"scriptId":"108","url":"node:internal/timers","functions":[{"functionName":"initAsyncResource","ranges":[{"startOffset":5555,"endOffset":5839,"count":2},{"startOffset":5786,"endOffset":5836,"count":0}],"isBlockCoverage":true},{"functionName":"Timeout","ranges":[{"startOffset":5928,"endOffset":6955,"count":2},{"startOffset":6079,"endOffset":6423,"count":0},{"startOffset":6771,"endOffset":6778,"count":0}],"isBlockCoverage":true},{"functionName":"incRefCount","ranges":[{"startOffset":9429,"endOffset":9508,"count":2},{"startOffset":9484,"endOffset":9505,"count":0}],"isBlockCoverage":true},{"functionName":"decRefCount","ranges":[{"startOffset":9512,"endOffset":9592,"count":1},{"startOffset":9567,"endOffset":9589,"count":0}],"isBlockCoverage":true},{"functionName":"insert","ranges":[{"startOffset":10718,"endOffset":11389,"count":2},{"startOffset":11048,"endOffset":11359,"count":0}],"isBlockCoverage":true},{"functionName":"compareTimersLists","ranges":[{"startOffset":12264,"endOffset":12478,"count":3},{"startOffset":12368,"endOffset":12453,"count":0}],"isBlockCoverage":true},{"functionName":"setPosition","ranges":[{"startOffset":12482,"endOffset":12555,"count":4}],"isBlockCoverage":true},{"functionName":"processTimers","ranges":[{"startOffset":14881,"endOffset":15383,"count":1},{"startOffset":15087,"endOffset":15363,"count":3},{"startOffset":15119,"endOffset":15221,"count":1},{"startOffset":15198,"endOffset":15211,"count":0},{"startOffset":15221,"endOffset":15261,"count":2},{"startOffset":15261,"endOffset":15323,"count":1},{"startOffset":15323,"endOffset":15363,"count":2},{"startOffset":15363,"endOffset":15382,"count":0}],"isBlockCoverage":true},{"functionName":"listOnTimeout","ranges":[{"startOffset":15389,"endOffset":17945,"count":2},{"startOffset":15825,"endOffset":16059,"count":0},{"startOffset":16102,"endOffset":16117,"count":0},{"startOffset":16328,"endOffset":16568,"count":0},{"startOffset":16693,"endOffset":16715,"count":0},{"startOffset":16834,"endOffset":16904,"count":0},{"startOffset":16951,"endOffset":16979,"count":0},{"startOffset":16981,"endOffset":17093,"count":0},{"startOffset":17162,"endOffset":17340,"count":1},{"startOffset":17308,"endOffset":17329,"count":0},{"startOffset":17866,"endOffset":17940,"count":1}],"isBlockCoverage":true}]},{"scriptId":"109","url":"node:internal/async_hooks","functions":[{"functionName":"newAsyncId","ranges":[{"startOffset":14869,"endOffset":14941,"count":2}],"isBlockCoverage":true},{"functionName":"getDefaultTriggerAsyncId","ranges":[{"startOffset":15330,"endOffset":15626,"count":2},{"startOffset":15590,"endOffset":15625,"count":0}],"isBlockCoverage":true},{"functionName":"hasHooks","ranges":[{"startOffset":16473,"endOffset":16538,"count":14}],"isBlockCoverage":true},{"functionName":"enabledHooksExist","ranges":[{"startOffset":16542,"endOffset":16603,"count":3}],"isBlockCoverage":true},{"functionName":"initHooksExist","ranges":[{"startOffset":16607,"endOffset":16664,"count":2}],"isBlockCoverage":true},{"functionName":"destroyHooksExist","ranges":[{"startOffset":16731,"endOffset":16794,"count":3}],"isBlockCoverage":true},{"functionName":"emitBeforeScript","ranges":[{"startOffset":17306,"endOffset":17487,"count":3},{"startOffset":17458,"endOffset":17484,"count":0}],"isBlockCoverage":true},{"functionName":"emitAfterScript","ranges":[{"startOffset":17493,"endOffset":17618,"count":3},{"startOffset":17559,"endOffset":17584,"count":0}],"isBlockCoverage":true},{"functionName":"pushAsyncContext","ranges":[{"startOffset":17980,"endOffset":18560,"count":3},{"startOffset":18204,"endOffset":18254,"count":0}],"isBlockCoverage":true},{"functionName":"popAsyncContext","ranges":[{"startOffset":18629,"endOffset":19255,"count":3},{"startOffset":18747,"endOffset":18760,"count":0},{"startOffset":18841,"endOffset":18950,"count":0}],"isBlockCoverage":true}]},{"scriptId":"112","url":"node:internal/validators","functions":[{"functionName":"validateString","ranges":[{"startOffset":4238,"endOffset":4373,"count":1},{"startOffset":4316,"endOffset":4370,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9596,"endOffset":9700,"count":2},{"startOffset":9656,"endOffset":9697,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10313,"endOffset":10432,"count":2},{"startOffset":10373,"endOffset":10429,"count":0}],"isBlockCoverage":true}]},{"scriptId":"113","url":"node:internal/util/types","functions":[{"functionName":"isUint8Array","ranges":[{"startOffset":248,"endOffset":356,"count":1}],"isBlockCoverage":true}]},{"scriptId":"114","url":"node:internal/linkedlist","functions":[{"functionName":"peek","ranges":[{"startOffset":142,"endOffset":237,"count":4},{"startOffset":196,"endOffset":236,"count":2}],"isBlockCoverage":true},{"functionName":"remove","ranges":[{"startOffset":275,"endOffset":513,"count":5},{"startOffset":322,"endOffset":376,"count":4},{"startOffset":402,"endOffset":456,"count":4}],"isBlockCoverage":true},{"functionName":"append","ranges":[{"startOffset":572,"endOffset":1037,"count":2},{"startOffset":624,"endOffset":641,"count":0}],"isBlockCoverage":true},{"functionName":"isEmpty","ranges":[{"startOffset":1041,"endOffset":1103,"count":1}],"isBlockCoverage":true}]},{"scriptId":"115","url":"node:internal/priority_queue","functions":[{"functionName":"peek","ranges":[{"startOffset":1092,"endOffset":1133,"count":3}],"isBlockCoverage":true},{"functionName":"percolateDown","ranges":[{"startOffset":1139,"endOffset":1829,"count":2},{"startOffset":1432,"endOffset":1479,"count":1},{"startOffset":1598,"endOffset":1604,"count":0}],"isBlockCoverage":true},{"functionName":"removeAt","ranges":[{"startOffset":2350,"endOffset":2695,"count":2},{"startOffset":2553,"endOffset":2604,"count":0},{"startOffset":2615,"endOffset":2637,"count":0}],"isBlockCoverage":true},{"functionName":"shift","ranges":[{"startOffset":2701,"endOffset":2865,"count":1},{"startOffset":2807,"endOffset":2814,"count":0}],"isBlockCoverage":true}]},{"scriptId":"118","url":"node:internal/util/debuglog","functions":[{"functionName":"noop","ranges":[{"startOffset":1465,"endOffset":1473,"count":6}],"isBlockCoverage":true}]},{"scriptId":"119","url":"node:events","functions":[{"functionName":"checkListener","ranges":[{"startOffset":7972,"endOffset":8052,"count":2}],"isBlockCoverage":true},{"functionName":"_addListener","ranges":[{"startOffset":16159,"endOffset":18107,"count":1},{"startOffset":16347,"endOffset":16434,"count":0},{"startOffset":16622,"endOffset":16890,"count":0},{"startOffset":17101,"endOffset":18084,"count":0}],"isBlockCoverage":true},{"functionName":"addListener","ranges":[{"startOffset":18293,"endOffset":18387,"count":1}],"isBlockCoverage":true},{"functionName":"_onceWrap","ranges":[{"startOffset":19072,"endOffset":19319,"count":1}],"isBlockCoverage":true},{"functionName":"once","ranges":[{"startOffset":19518,"endOffset":19649,"count":1}],"isBlockCoverage":true},{"functionName":"listenerCount","ranges":[{"startOffset":24952,"endOffset":25256,"count":1},{"startOffset":25131,"endOffset":25156,"count":0},{"startOffset":25192,"endOffset":25233,"count":0}],"isBlockCoverage":true}]},{"scriptId":"120","url":"node:buffer","functions":[{"functionName":"toString","ranges":[{"startOffset":24213,"endOffset":24822,"count":1},{"startOffset":24336,"endOffset":24510,"count":0},{"startOffset":24517,"endOffset":24821,"count":0}],"isBlockCoverage":true}]},{"scriptId":"128","url":"node:internal/process/task_queues","functions":[{"functionName":"hasTickScheduled","ranges":[{"startOffset":1046,"endOffset":1123,"count":2}],"isBlockCoverage":true},{"functionName":"setHasTickScheduled","ranges":[{"startOffset":1127,"endOffset":1215,"count":1},{"startOffset":1204,"endOffset":1207,"count":0}],"isBlockCoverage":true},{"functionName":"runNextTicks","ranges":[{"startOffset":1322,"endOffset":1525,"count":1},{"startOffset":1488,"endOffset":1524,"count":0}],"isBlockCoverage":true},{"functionName":"processTicksAndRejections","ranges":[{"startOffset":1529,"endOffset":2540,"count":1},{"startOffset":1841,"endOffset":1876,"count":0},{"startOffset":2013,"endOffset":2055,"count":0},{"startOffset":2069,"endOffset":2120,"count":0},{"startOffset":2134,"endOffset":2194,"count":0},{"startOffset":2208,"endOffset":2235,"count":0},{"startOffset":2324,"endOffset":2345,"count":0}],"isBlockCoverage":true}]},{"scriptId":"129","url":"node:internal/process/promises","functions":[{"functionName":"setHasRejectionToWarn","ranges":[{"startOffset":2139,"endOffset":2231,"count":1},{"startOffset":2220,"endOffset":2223,"count":0}],"isBlockCoverage":true},{"functionName":"hasRejectionToWarn","ranges":[{"startOffset":2235,"endOffset":2316,"count":2}],"isBlockCoverage":true},{"functionName":"processPromiseRejections","ranges":[{"startOffset":6617,"endOffset":9869,"count":1},{"startOffset":6778,"endOffset":6962,"count":0},{"startOffset":7030,"endOffset":9770,"count":0}],"isBlockCoverage":true}]},{"scriptId":"130","url":"node:internal/fixed_queue","functions":[{"functionName":"isEmpty","ranges":[{"startOffset":3143,"endOffset":3197,"count":3}],"isBlockCoverage":true},{"functionName":"shift","ranges":[{"startOffset":3374,"endOffset":3596,"count":2},{"startOffset":3470,"endOffset":3595,"count":1}],"isBlockCoverage":true},{"functionName":"isEmpty","ranges":[{"startOffset":3724,"endOffset":3773,"count":1}],"isBlockCoverage":true},{"functionName":"shift","ranges":[{"startOffset":4056,"endOffset":4320,"count":2},{"startOffset":4174,"endOffset":4297,"count":0}],"isBlockCoverage":true}]},{"scriptId":"133","url":"node:internal/console/constructor","functions":[{"functionName":"","ranges":[{"startOffset":11031,"endOffset":11865,"count":1},{"startOffset":11306,"endOffset":11324,"count":0}],"isBlockCoverage":true}]},{"scriptId":"135","url":"node:internal/url","functions":[{"functionName":"isURLInstance","ranges":[{"startOffset":43510,"endOffset":43631,"count":1},{"startOffset":43604,"endOffset":43627,"count":0}],"isBlockCoverage":true},{"functionName":"toPathIfFileURL","ranges":[{"startOffset":43635,"endOffset":43784,"count":1},{"startOffset":43741,"endOffset":43783,"count":0}],"isBlockCoverage":true}]},{"scriptId":"137","url":"node:path","functions":[{"functionName":"isPathSeparator","ranges":[{"startOffset":1770,"endOffset":1876,"count":78},{"startOffset":1841,"endOffset":1872,"count":70}],"isBlockCoverage":true},{"functionName":"isWindowsDeviceRoot","ranges":[{"startOffset":1963,"endOffset":2136,"count":2},{"startOffset":2065,"endOffset":2132,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeString","ranges":[{"startOffset":2202,"endOffset":4212,"count":1},{"startOffset":2425,"endOffset":4194,"count":76},{"startOffset":2460,"endOffset":2502,"count":75},{"startOffset":2502,"endOffset":2597,"count":1},{"startOffset":2553,"endOffset":2597,"count":0},{"startOffset":2597,"endOffset":2632,"count":75},{"startOffset":2632,"endOffset":4090,"count":8},{"startOffset":2680,"endOffset":2707,"count":0},{"startOffset":2729,"endOffset":3793,"count":0},{"startOffset":3841,"endOffset":3910,"count":7},{"startOffset":3910,"endOffset":3987,"count":1},{"startOffset":4090,"endOffset":4189,"count":67},{"startOffset":4118,"endOffset":4132,"count":3},{"startOffset":4134,"endOffset":4157,"count":0}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":4868,"endOffset":9786,"count":1},{"startOffset":5200,"endOffset":5233,"count":0},{"startOffset":5242,"endOffset":6207,"count":0},{"startOffset":6431,"endOffset":6596,"count":0},{"startOffset":6629,"endOffset":8151,"count":0},{"startOffset":8691,"endOffset":8914,"count":0},{"startOffset":9009,"endOffset":9077,"count":0},{"startOffset":9730,"endOffset":9780,"count":0}],"isBlockCoverage":true},{"functionName":"toNamespacedPath","ranges":[{"startOffset":20070,"endOffset":21201,"count":1},{"startOffset":20210,"endOffset":20222,"count":0},{"startOffset":20316,"endOffset":20328,"count":0},{"startOffset":20408,"endOffset":20827,"count":0},{"startOffset":21176,"endOffset":21200,"count":0}],"isBlockCoverage":true}]},{"scriptId":"140","url":"node:internal/event_target","functions":[{"functionName":"get once","ranges":[{"startOffset":11491,"endOffset":11553,"count":2}],"isBlockCoverage":true},{"functionName":"get passive","ranges":[{"startOffset":11629,"endOffset":11697,"count":2}],"isBlockCoverage":true},{"functionName":"get isNodeStyleListener","ranges":[{"startOffset":11701,"endOffset":11783,"count":4}],"isBlockCoverage":true},{"functionName":"get weak","ranges":[{"startOffset":11787,"endOffset":11849,"count":2}],"isBlockCoverage":true},{"functionName":"get removed","ranges":[{"startOffset":11853,"endOffset":11921,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18116,"endOffset":20148,"count":2},{"startOffset":18424,"endOffset":18503,"count":0},{"startOffset":18605,"endOffset":18709,"count":0},{"startOffset":18833,"endOffset":18842,"count":0},{"startOffset":18991,"endOffset":19194,"count":0},{"startOffset":19220,"endOffset":19395,"count":0},{"startOffset":19511,"endOffset":19561,"count":0},{"startOffset":19601,"endOffset":19638,"count":0},{"startOffset":19814,"endOffset":19874,"count":0},{"startOffset":19978,"endOffset":20037,"count":0},{"startOffset":20109,"endOffset":20143,"count":0}],"isBlockCoverage":true},{"functionName":"createEvent","ranges":[{"startOffset":18185,"endOffset":18392,"count":0}],"isBlockCoverage":false},{"functionName":"addCatch","ranges":[{"startOffset":26629,"endOffset":26952,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26778,"endOffset":26942,"count":0}],"isBlockCoverage":false}]},{"scriptId":"145","url":"node:timers","functions":[{"functionName":"unenroll","ranges":[{"startOffset":2409,"endOffset":3628,"count":1},{"startOffset":2464,"endOffset":2471,"count":0},{"startOffset":2536,"endOffset":2582,"count":0},{"startOffset":2676,"endOffset":2714,"count":0},{"startOffset":2721,"endOffset":2756,"count":0}],"isBlockCoverage":true},{"functionName":"setTimeout","ranges":[{"startOffset":4357,"endOffset":5030,"count":2},{"startOffset":4518,"endOffset":4525,"count":0},{"startOffset":4558,"endOffset":4601,"count":0},{"startOffset":4607,"endOffset":4656,"count":0},{"startOffset":4662,"endOffset":4889,"count":0}],"isBlockCoverage":true},{"functionName":"clearTimeout","ranges":[{"startOffset":5366,"endOffset":5745,"count":2},{"startOffset":5431,"endOffset":5564,"count":1},{"startOffset":5566,"endOffset":5742,"count":0}],"isBlockCoverage":true}]},{"scriptId":"161","url":"node:internal/streams/writable","functions":[{"functionName":"afterWriteTick","ranges":[{"startOffset":15590,"endOffset":15732,"count":1}],"isBlockCoverage":true},{"functionName":"afterWrite","ranges":[{"startOffset":15736,"endOffset":16129,"count":1},{"startOffset":15905,"endOffset":15968,"count":0},{"startOffset":16062,"endOffset":16093,"count":0}],"isBlockCoverage":true},{"functionName":"needFinish","ranges":[{"startOffset":20031,"endOffset":20351,"count":1},{"startOffset":20084,"endOffset":20115,"count":0},{"startOffset":20116,"endOffset":20148,"count":0},{"startOffset":20149,"endOffset":20177,"count":0},{"startOffset":20178,"endOffset":20219,"count":0},{"startOffset":20220,"endOffset":20249,"count":0},{"startOffset":20250,"endOffset":20278,"count":0},{"startOffset":20279,"endOffset":20312,"count":0},{"startOffset":20313,"endOffset":20346,"count":0}],"isBlockCoverage":true},{"functionName":"finishMaybe","ranges":[{"startOffset":22096,"endOffset":22420,"count":1},{"startOffset":22166,"endOffset":22417,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":23269,"endOffset":23358,"count":1},{"startOffset":23343,"endOffset":23350,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":25298,"endOffset":25377,"count":2}],"isBlockCoverage":true}]},{"scriptId":"179","url":"node:fs","functions":[{"functionName":"existsSync","ranges":[{"startOffset":7954,"endOffset":8502,"count":1},{"startOffset":8032,"endOffset":8063,"count":0},{"startOffset":8407,"endOffset":8462,"count":0}],"isBlockCoverage":true}]},{"scriptId":"180","url":"node:internal/fs/utils","functions":[{"functionName":"","ranges":[{"startOffset":8971,"endOffset":9580,"count":1},{"startOffset":9206,"endOffset":9226,"count":0},{"startOffset":9297,"endOffset":9366,"count":0},{"startOffset":9387,"endOffset":9579,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18882,"endOffset":19162,"count":1},{"startOffset":18945,"endOffset":18967,"count":0},{"startOffset":18969,"endOffset":19057,"count":0},{"startOffset":19137,"endOffset":19159,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":19209,"endOffset":19348,"count":1}],"isBlockCoverage":true}]},{"scriptId":"192","url":"node:internal/bootstrap/switches/is_not_main_thread","functions":[{"functionName":"lazyWorkerStdio","ranges":[{"startOffset":935,"endOffset":1045,"count":2},{"startOffset":985,"endOffset":1019,"count":0}],"isBlockCoverage":true},{"functionName":"getStdout","ranges":[{"startOffset":1049,"endOffset":1106,"count":1}],"isBlockCoverage":true},{"functionName":"getStderr","ranges":[{"startOffset":1110,"endOffset":1167,"count":1}],"isBlockCoverage":true}]},{"scriptId":"197","url":"node:internal/bootstrap/pre_execution","functions":[{"functionName":"get","ranges":[{"startOffset":13521,"endOffset":13559,"count":2}],"isBlockCoverage":true}]},{"scriptId":"203","url":"node:internal/source_map/source_map_cache","functions":[{"functionName":"ObjectGetValueSafe","ranges":[{"startOffset":275,"endOffset":456,"count":128},{"startOffset":441,"endOffset":452,"count":0}],"isBlockCoverage":true},{"functionName":"sourceMapCacheToObject","ranges":[{"startOffset":7779,"endOffset":8039,"count":1},{"startOffset":7992,"endOffset":8021,"count":0}],"isBlockCoverage":true},{"functionName":"appendCJSCache","ranges":[{"startOffset":8043,"endOffset":8340,"count":1},{"startOffset":8116,"endOffset":8337,"count":32}],"isBlockCoverage":true}]},{"scriptId":"204","url":"node:internal/util/iterable_weak_map","functions":[{"functionName":"","ranges":[{"startOffset":1447,"endOffset":1888,"count":1}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":1542,"endOffset":1801,"count":33},{"startOffset":1613,"endOffset":1627,"count":1},{"startOffset":1627,"endOffset":1693,"count":32},{"startOffset":1693,"endOffset":1707,"count":0},{"startOffset":1707,"endOffset":1800,"count":32}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1826,"endOffset":1861,"count":0}],"isBlockCoverage":false}]},{"scriptId":"233","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+tinypool@0.2.4/node_modules/tinypool/dist/esm/worker.js","functions":[{"functionName":"atomicsWaitLoop","ranges":[{"startOffset":2160,"endOffset":2558,"count":1},{"startOffset":2237,"endOffset":2556,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2682,"endOffset":3716,"count":0},{"startOffset":2963,"endOffset":2993,"count":1},{"startOffset":3102,"endOffset":3228,"count":1},{"startOffset":3312,"endOffset":3358,"count":1},{"startOffset":3550,"endOffset":3715,"count":1}],"isBlockCoverage":true}]},{"scriptId":"234","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+tinypool@0.2.4/node_modules/tinypool/dist/esm/chunk-QYFJIXNO.js","functions":[{"functionName":"isTransferable","ranges":[{"startOffset":1547,"endOffset":1679,"count":1},{"startOffset":1603,"endOffset":1631,"count":0},{"startOffset":1632,"endOffset":1657,"count":0},{"startOffset":1658,"endOffset":1676,"count":0}],"isBlockCoverage":true},{"functionName":"isMovable","ranges":[{"startOffset":1680,"endOffset":1769,"count":1},{"startOffset":1739,"endOffset":1766,"count":0}],"isBlockCoverage":true}]},{"scriptId":"236","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/worker.mjs","functions":[{"functionName":"post","ranges":[{"startOffset":2187,"endOffset":2233,"count":3}],"isBlockCoverage":true}]},{"scriptId":"257","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/chunk-vite-node-utils.8077cd3c.mjs","functions":[{"functionName":"isPrimitive","ranges":[{"startOffset":38998,"endOffset":39051,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":47054,"endOffset":47355,"count":1},{"startOffset":47186,"endOffset":47200,"count":0},{"startOffset":47220,"endOffset":47240,"count":0},{"startOffset":47281,"endOffset":47332,"count":0}],"isBlockCoverage":true},{"functionName":"serialize","ranges":[{"startOffset":47889,"endOffset":47897,"count":3}],"isBlockCoverage":true},{"functionName":"deserialize","ranges":[{"startOffset":47917,"endOffset":47925,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":48057,"endOffset":48830,"count":3},{"startOffset":48218,"endOffset":48292,"count":1},{"startOffset":48292,"endOffset":48829,"count":2}],"isBlockCoverage":true},{"functionName":"sendEvent","ranges":[{"startOffset":48098,"endOffset":48177,"count":1}],"isBlockCoverage":true},{"functionName":"sendCall","ranges":[{"startOffset":48316,"endOffset":48764,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":48358,"endOffset":48754,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":48585,"endOffset":48721,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":48842,"endOffset":49456,"count":2},{"startOffset":48928,"endOffset":49215,"count":0},{"startOffset":49345,"endOffset":49368,"count":0}],"isBlockCoverage":true},{"functionName":"nanoid","ranges":[{"startOffset":49563,"endOffset":49698,"count":2},{"startOffset":49641,"endOffset":49683,"count":42}],"isBlockCoverage":true}]},{"scriptId":"336","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/entry.mjs","functions":[{"functionName":"","ranges":[{"startOffset":3983,"endOffset":4168,"count":1},{"startOffset":4026,"endOffset":4091,"count":0}],"isBlockCoverage":true},{"functionName":"sendStdout","ranges":[{"startOffset":4177,"endOffset":4679,"count":1},{"startOffset":4275,"endOffset":4282,"count":0},{"startOffset":4373,"endOffset":4380,"count":0},{"startOffset":4548,"endOffset":4580,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4314,"endOffset":4330,"count":1}],"isBlockCoverage":true},{"functionName":"sendStderr","ranges":[{"startOffset":4682,"endOffset":5184,"count":1},{"startOffset":4787,"endOffset":5085,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4819,"endOffset":4835,"count":0}],"isBlockCoverage":false},{"functionName":"withEnv","ranges":[{"startOffset":6749,"endOffset":6950,"count":0},{"startOffset":6894,"endOffset":6948,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16041,"endOffset":16092,"count":1}],"isBlockCoverage":true},{"functionName":"sendTasksUpdate","ranges":[{"startOffset":16101,"endOffset":16331,"count":2},{"startOffset":16218,"endOffset":16329,"count":1}],"isBlockCoverage":true},{"functionName":"startTests","ranges":[{"startOffset":21716,"endOffset":22034,"count":0},{"startOffset":22005,"endOffset":22033,"count":1}],"isBlockCoverage":true},{"functionName":"run","ranges":[{"startOffset":22354,"endOffset":23585,"count":0},{"startOffset":23135,"endOffset":23583,"count":2},{"startOffset":23226,"endOffset":23243,"count":0},{"startOffset":23260,"endOffset":23323,"count":0},{"startOffset":23579,"endOffset":23583,"count":1},{"startOffset":23583,"endOffset":23584,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23325,"endOffset":23577,"count":0},{"startOffset":23524,"endOffset":23576,"count":1}],"isBlockCoverage":true}]},{"scriptId":"339","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/chunk-utils-global.0a7416cf.mjs","functions":[{"functionName":"getWorkerState","ranges":[{"startOffset":8181,"endOffset":8249,"count":3}],"isBlockCoverage":true},{"functionName":"withSafeTimers","ranges":[{"startOffset":14256,"endOffset":14961,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":20597,"endOffset":20627,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":21441,"endOffset":21473,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":23201,"endOffset":23231,"count":3}],"isBlockCoverage":true}]},{"scriptId":"340","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/chunk-env-node.bbba78e5.mjs","functions":[{"functionName":"teardown","ranges":[{"startOffset":7486,"endOffset":7618,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7527,"endOffset":7555,"count":341}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7584,"endOffset":7608,"count":2}],"isBlockCoverage":true}]},{"scriptId":"341","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/chunk-runtime-chain.b60d57da.mjs","functions":[{"functionName":"save","ranges":[{"startOffset":25483,"endOffset":26321,"count":1},{"startOffset":25817,"endOffset":25828,"count":0},{"startOffset":25830,"endOffset":26055,"count":0},{"startOffset":26151,"endOffset":26298,"count":0}],"isBlockCoverage":true},{"functionName":"getUncheckedCount","ranges":[{"startOffset":26324,"endOffset":26391,"count":1}],"isBlockCoverage":true},{"functionName":"getUncheckedKeys","ranges":[{"startOffset":26394,"endOffset":26462,"count":1}],"isBlockCoverage":true},{"functionName":"pack","ranges":[{"startOffset":28807,"endOffset":29563,"count":1},{"startOffset":29163,"endOffset":29190,"count":0},{"startOffset":29478,"endOffset":29481,"count":0}],"isBlockCoverage":true},{"functionName":"saveCurrent","ranges":[{"startOffset":31953,"endOffset":32165,"count":1},{"startOffset":32010,"endOffset":32017,"count":0}],"isBlockCoverage":true},{"functionName":"getSnapshotClient","ranges":[{"startOffset":32233,"endOffset":32335,"count":1},{"startOffset":32284,"endOffset":32315,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":163135,"endOffset":163168,"count":1}],"isBlockCoverage":true}]},{"scriptId":"385","url":"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vitest@0.18.1_g7fhrhgbzhgzntg7n7enlxw6ji/node_modules/vitest/dist/chunk-runtime-rpc.9d1f4c48.mjs","functions":[{"functionName":"rpc","ranges":[{"startOffset":462,"endOffset":811,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":552,"endOffset":803,"count":3}],"isBlockCoverage":true},{"functionName":"safeSendCall","ranges":[{"startOffset":661,"endOffset":722,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":698,"endOffset":721,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":904,"endOffset":923,"count":3}],"isBlockCoverage":true}]}],"timestamp":330974.499438,"source-map-cache":{"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+vite@3.2.5_ovmyjmuuyckt3r3gpaexj2onji/node_modules/vite/dist/node/chunks/dep-5605cfa4.js":{"lineLengths":[55,211,109,46,79,31,85,211,35,128,34,30,65,31,50,32,34,28,41,27,57,53,36,32,433,32,49,72,40,32,33,29,41,60,34,37,46,41,0,64,53,67,0,56,44,53,26,192,0,38,99,1,0,35,20,30,23,35,4,28,16,56,38,48,43,20,21,16,4,5,4,10,1,0,31,0,23,0,22,71,33,37,33,51,23,0,15,33,11,26,49,15,63,26,3,0,55,50,50,36,87,2,0,53,27,53,78,77,61,64,62,61,68,61,59,61,62,60,63,60,61,60,63,61,63,64,62,65,62,63,3,0,36,47,0,39,36,38,5,43,21,5,31,20,5,47,46,1,50,19,18,5,78,33,39,20,33,47,108,14,11,5,58,96,7,1,32,37,20,5,74,28,5,16,1,48,47,30,5,25,57,5,16,1,32,40,31,16,26,33,10,5,12,22,40,285,10,55,28,28,13,60,90,32,28,13,92,48,101,13,154,9,6,1,0,12,53,0,15,18,20,35,19,0,20,16,24,27,0,24,29,0,32,26,0,30,18,41,45,47,4,2,0,4,3,23,24,25,26,4,37,15,24,31,11,24,4,3,2,0,4,3,23,24,25,4,30,15,24,34,11,24,4,3,2,1,0,12,0,53,68,0,15,26,21,23,18,19,28,0,41,4,3,30,30,4,28,10,0,28,21,0,28,21,2,0,4,3,26,28,26,27,23,4,35,13,20,42,46,42,29,31,28,0,61,0,27,29,45,5,0,29,38,5,0,37,39,0,36,40,36,0,29,29,4,0,28,28,0,36,14,38,48,67,49,18,12,8,7,6,66,40,5,4,0,20,42,46,28,31,0,61,0,27,29,45,5,0,29,38,5,0,39,0,36,40,0,29,4,3,0,14,2,1,0,12,0,53,62,65,0,3,2,24,12,24,24,12,22,3,40,49,34,1,0,32,0,17,0,28,26,39,0,3,19,3,0,26,27,28,28,25,21,44,46,54,36,51,60,42,44,28,0,21,14,15,16,16,11,8,13,13,9,10,15,16,15,15,14,2,0,3,21,3,0,23,17,0,34,22,28,56,31,77,62,63,35,39,36,2,0,3,22,3,0,30,21,18,23,16,28,15,23,15,24,50,28,15,21,21,2,0,19,24,43,0,24,44,55,43,51,53,54,0,67,17,15,18,20,4,0,11,21,21,0,20,31,31,31,32,0,36,37,0,28,0,26,29,22,34,36,37,25,25,23,32,25,36,30,33,32,24,32,38,37,39,30,40,27,24,33,39,38,40,29,32,25,23,30,34,52,0,18,0,5,25,5,0,23,12,76,55,54,54,50,6,4,0,5,22,5,0,20,56,3,2,0,21,0,27,44,8,19,26,23,29,17,0,90,62,77,78,67,0,37,56,40,6,3,0,38,64,79,17,4,16,3,0,33,57,28,4,46,3,0,49,48,32,80,56,3,0,48,22,33,30,25,4,17,3,0,60,47,46,0,50,32,38,4,17,3,13,0,24,7,36,36,36,50,48,36,36,61,61,64,36,36,62,62,65,16,0,33,69,2,0,24,32,50,3,2,0,3,71,81,83,71,2,8,35,40,73,6,24,28,74,14,3,0,36,29,0,34,67,21,20,19,0,18,17,16,20,22,24,21,24,25,27,26,22,29,23,17,11,11,53,0,36,47,25,16,35,4,0,26,21,13,0,39,45,23,0,45,28,7,15,5,0,68,15,0,52,43,49,20,19,9,0,47,19,19,9,0,96,41,39,26,0,35,21,11,0,16,9,0,61,41,39,26,0,35,21,11,0,16,9,0,48,19,0,29,33,43,28,18,11,9,7,0,31,17,7,0,12,5,0,38,26,25,53,0,38,57,19,17,7,0,28,15,5,0,30,46,27,33,38,42,0,73,37,43,24,64,32,9,0,33,56,47,53,31,23,13,0,52,43,30,20,13,11,19,9,14,7,5,0,33,71,35,22,0,31,17,7,12,5,0,38,35,22,0,31,17,7,12,5,0,46,52,43,49,20,19,9,0,51,45,39,26,16,9,7,0,31,17,7,0,12,5,0,86,37,14,15,5,0,68,35,0,31,54,49,51,29,21,11,0,50,28,18,11,9,17,7,12,5,0,26,22,0,31,17,7,0,12,5,3,0,28,22,19,3,0,17,18,16,0,18,33,27,23,3,0,49,35,32,31,14,15,10,15,3,0,60,60,31,5,3,0,31,53,0,39,45,5,3,0,17,11,10,10,9,9,12,14,11,14,15,12,18,4,0,29,23,33,25,5,26,3,0,52,18,0,52,50,29,38,24,39,38,37,16,36,9,27,44,7,38,26,7,20,5,0,52,47,24,0,24,48,41,58,7,5,0,28,24,3,0,15,2,0,20,0,32,24,0,3,12,3,0,7,27,21,26,30,14,16,0,3,10,3,0,40,50,49,3,0,14,38,0,15,2,0,3,40,3,0,39,86,2,0,3,32,24,26,19,3,0,37,34,45,3,0,39,0,30,105,0,25,18,90,3,0,69,23,0,43,43,0,61,54,65,0,9,16,17,18,13,15,11,17,18,10,17,9,16,21,0,28,90,4,0,39,53,56,0,21,23,3,0,30,40,32,3,0,17,10,14,13,27,17,15,15,21,19,16,14,14,14,20,10,4,0,45,21,0,22,20,19,17,12,0,5,23,5,0,44,62,67,55,44,28,23,4,0,27,70,25,4,0,24,18,0,68,16,20,14,5,0,26,19,5,0,25,18,16,4,0,29,18,21,4,0,29,18,16,4,0,5,61,72,67,72,17,5,0,23,35,89,115,0,83,66,27,25,27,36,7,5,0,50,55,5,0,45,62,30,52,13,5,0,20,21,15,4,0,40,72,0,22,32,32,58,0,24,64,69,25,4,0,33,57,13,0,34,29,0,79,37,7,0,71,52,7,0,91,123,102,84,10,126,82,0,64,7,0,38,36,7,5,0,58,24,4,0,5,15,5,0,71,28,0,100,27,27,17,7,0,26,18,71,9,26,70,9,42,7,0,26,48,7,0,26,18,50,9,20,7,32,7,0,31,35,43,14,46,63,11,7,5,0,53,27,19,5,0,62,17,3,0,5,48,5,0,18,22,0,29,15,5,0,7,25,7,0,25,26,0,47,17,7,0,41,17,7,0,18,22,38,17,7,0,58,45,22,0,41,34,31,32,24,9,7,0,35,26,14,27,7,0,33,38,17,7,5,0,7,56,42,7,0,93,50,42,34,28,0,36,52,49,51,51,24,39,37,24,0,62,38,15,23,13,11,9,7,0,83,29,7,0,73,29,7,0,71,20,7,0,26,24,15,5,0,7,48,47,7,0,46,41,26,24,15,5,0,7,20,7,0,24,48,37,38,7,15,5,0,7,18,7,0,24,26,37,15,5,0,24,63,61,7,0,52,59,37,17,7,0,73,26,15,5,0,7,22,7,0,24,66,70,63,9,0,29,14,30,7,0,39,15,5,0,24,100,60,17,7,0,33,43,63,9,0,60,17,7,0,28,0,44,84,28,7,0,26,24,0,54,60,79,17,7,0,54,63,0,53,73,42,32,29,17,7,0,59,58,33,15,5,0,7,13,7,0,49,26,0,20,22,14,20,41,40,8,0,24,17,15,5,0,24,46,0,44,53,17,7,0,23,0,32,35,25,0,51,23,40,18,11,39,40,11,9,0,42,31,7,0,56,61,59,43,31,27,31,48,9,7,0,45,26,19,15,5,0,7,12,7,0,24,32,51,7,36,15,5,0,7,13,7,0,24,25,0,46,58,27,21,7,0,45,15,5,0,7,14,7,0,24,64,64,63,64,67,38,28,26,21,54,17,7,0,60,15,5,0,7,11,7,0,24,52,58,48,27,29,28,26,17,7,0,96,59,17,7,0,56,15,5,0,7,21,7,0,24,49,85,36,17,7,0,42,28,27,0,61,85,9,0,114,32,9,0,46,17,7,0,80,61,17,7,0,52,15,5,0,7,18,7,0,24,54,57,39,19,9,7,0,56,17,17,7,5,0,7,11,7,0,24,73,35,17,7,0,65,60,17,7,0,118,38,17,7,0,50,15,5,0,7,17,7,0,24,73,63,17,7,0,36,15,5,0,7,17,7,0,24,43,29,7,0,62,18,26,39,7,0,36,15,5,0,7,12,7,0,67,25,23,26,25,29,28,21,15,5,0,27,58,33,15,5,0,31,37,23,17,7,0,30,32,69,89,0,77,50,17,7,0,93,93,73,50,17,7,0,33,42,45,37,16,9,29,26,7,0,42,31,28,37,35,30,23,17,7,0,87,83,44,0,31,74,28,30,51,23,17,7,0,83,51,0,83,44,0,31,82,28,0,51,30,0,35,0,56,17,7,0,52,31,28,81,35,30,35,56,17,7,0,39,64,0,41,29,35,26,0,35,34,28,21,15,5,0,56,0,29,27,57,44,7,18,15,5,0,92,27,18,15,5,0,86,32,37,36,0,37,38,37,0,14,30,29,7,0,27,33,32,7,5,0,16,3,0,30,91,57,26,3,0,28,91,57,24,3,0,28,91,57,24,3,0,89,74,3,0,59,33,22,0,39,72,0,25,37,7,5,3,0,15,2,0,3,72,74,44,3,0,41,30,105,27,18,90,3,0,39,43,0,61,9,16,18,13,15,11,12,18,9,16,35,0,44,53,43,47,47,0,21,23,3,0,28,46,90,4,0,25,18,15,44,0,16,50,0,17,65,0,17,78,0,16,38,0,18,93,0,20,114,0,19,96,0,16,49,27,0,40,28,0,47,7,5,4,0,52,30,0,46,34,3,0,16,2,0,24,0,28,22,26,24,32,80,0,3,65,67,66,72,49,2,8,42,33,2,40,42,41,6,18,59,29,50,14,3,0,61,28,76,33,34,35,32,7,19,6,24,3,0,64,0,62,69,3,0,29,43,23,42,53,0,28,21,0,30,20,83,66,3,0,52,96,80,0,46,28,5,0,28,29,43,5,0,27,48,30,7,29,43,5,0,45,27,5,40,4,0,20,26,3,0,17,2,0,3,64,51,2,8,42,46,2,70,75,6,42,26,57,14,3,0,69,34,57,3,0,21,42,3,0,29,72,29,57,0,24,44,28,3,0,49,60,66,12,33,5,3,0,52,2,0,3,36,2,8,42,50,65,6,42,85,20,14,3,0,87,82,44,2,0,3,85,2,8,42,53,2,67,59,6,48,80,63,61,14,3,0,86,0,3,65,14,2,8,42,54,6,28,28,108,14,3,0,43,85,60,2,0,3,61,2,8,42,39,2,48,23,19,26,14,17,18,20,22,18,22,23,20,6,48,28,42,14,3,0,62,0,3,71,28,2,26,28,128,132,19,14,3,0,88,30,24,3,0,29,43,42,0,56,40,33,3,0,53,29,24,3,0,15,2,0,3,58,2,8,42,41,44,2,43,37,6,72,28,215,147,67,14,3,0,90,44,55,3,0,51,0,78,54,3,0,23,37,3,0,75,2,0,3,66,2,8,42,43,2,46,42,37,6,61,28,19,14,3,0,44,7,31,70,17,53,16,3,2,0,3,23,19,3,0,36,0,3,21,3,0,30,0,20,0,30,17,0,76,0,20,32,47,24,57,9,6,37,55,6,30,31,6,27,33,46,74,46,52,13,18,63,13,9,6,31,63,5,2,67,21,41,17,2,0,27,16,13,2,15,31,37,44,48,29,47,63,51,19,15,9,5,53,55,54,52,72,9,27,61,47,15,9,5,20,93,5,1,73,30,17,26,27,36,30,64,57,13,26,54,38,67,60,80,19,13,25,40,45,34,40,34,33,39,19,70,47,68,64,17,13,35,57,40,34,31,19,13,37,82,40,34,31,19,13,51,46,40,34,59,31,19,13,27,59,36,38,19,33,13,10,18,27,35,37,9,7,17,2,0,74,25,30,1,31,25,21,22,18,19,1,0,58,53,2,0,49,77,35,5,61,69,92,47,43,51,53,57,53,1,73,54,51,12,11,29,85,71,63,40,30,13,10,67,67,32,35,25,26,25,43,58,47,37,29,9,58,47,37,28,9,39,6,2,0,304,567,86,31,65,24,63,41,77,38,5,29,2,0,26,0,46,19,47,46,11,5,10,28,5,4,57,48,63,9,8,39,13,22,66,15,10,30,34,4,59,47,2,0,15,0,54,2,74,64,70,70,76,69,24,2,74,57,2,74,61,76,75,72,76,41,0,30,47,31,0,65,0,74,0,20,78,32,15,16,30,29,8,31,0,18,0,31,14,38,22,27,5,3,0,33,14,35,80,40,71,37,29,12,29,7,5,3,1,0,28,51,1,0,57,66,18,41,8,39,1,0,72,18,77,8,29,1,0,54,23,28,0,64,20,3,0,19,21,21,0,36,10,63,14,79,11,63,15,0,10,0,20,22,32,22,19,16,18,0,72,42,27,29,5,3,0,69,11,26,26,25,31,36,23,25,32,31,0,32,61,15,5,0,21,69,58,33,12,38,35,31,38,17,7,0,47,63,28,25,69,43,37,9,7,32,28,45,7,62,38,44,51,5,0,40,55,12,3,0,33,0,11,2,0,0,50,33,30,17,3,0,23,28,0,64,59,3,0,19,21,21,0,36,10,63,14,79,11,63,15,0,10,0,20,22,32,22,19,16,18,0,72,42,38,32,31,15,9,12,29,5,3,0,69,11,19,39,26,37,25,5,0,25,31,36,23,25,32,31,0,32,61,36,5,0,69,53,42,5,0,37,3,0,31,28,0,51,33,29,36,36,5,0,46,57,61,23,67,41,52,7,5,35,30,0,49,49,31,9,7,3,0,41,28,0,60,42,34,3,0,42,40,55,12,3,2,0,29,33,31,39,37,41,0,31,33,41,0,32,37,16,0,24,45,26,27,30,3,1,0,36,11,37,3,0,36,15,17,3,48,23,33,12,21,5,5,1,0,34,11,37,3,0,7,37,16,23,39,12,14,5,3,1,0,25,29,35,1,0,27,31,39,1,0,50,12,31,56,0,31,32,50,50,0,29,0,15,16,14,28,43,36,4,1,0,31,25,25,1,0,27,29,37,26,34,13,0,26,15,22,5,14,22,0,31,20,21,35,36,36,14,25,25,21,21,9,0,35,7,0,39,5,0,22,31,5,3,0,16,1,0,29,0,31,0,44,42,44,44,46,0,23,33,23,24,1,0,28,41,39,40,40,42,1,0,30,39,37,38,38,40,1,0,0,52,56,50,31,11,16,0,17,34,0,9,26,0,18,20,20,25,0,36,40,20,39,31,3,0,29,0,15,1,0,25,11,14,0,54,70,72,47,70,65,34,35,3,0,63,1,0,23,25,1,23,27,1,0,20,16,1,20,16,1,0,31,22,0,34,23,0,75,18,26,29,11,0,30,43,56,33,5,10,74,78,58,45,36,15,34,55,29,7,19,5,0,10,21,31,12,34,27,36,47,29,39,36,13,9,7,5,0,70,27,10,0,21,28,28,53,30,33,12,21,26,20,19,19,7,33,0,13,0,46,14,30,37,25,19,16,24,20,40,27,52,24,41,18,26,13,11,9,18,7,12,13,0,42,47,7,5,0,40,45,45,46,37,7,5,3,0,20,1,0,65,30,0,38,56,16,3,0,51,2,0,30,0,22,29,0,41,34,32,0,17,48,36,36,36,34,2,0,32,49,21,0,32,26,0,60,63,45,63,0,34,45,48,0,38,53,16,12,7,0,48,46,0,60,42,0,22,25,0,47,51,0,28,15,43,43,10,2,0,31,68,22,3,0,27,0,73,56,36,40,5,4,79,75,59,75,85,85,0,10,2,0,0,0,0,0,19,21,19,30,35,43,2,33,21,17,78,0,48,30,0,58,58,61,35,20,3,0,26,2,0,37,39,36,42,3,0,44,46,3,2,0,41,50,68,68,61,66,2,74,72,69,62,36,0,42,51,0,54,47,39,42,23,3,13,2,0,31,52,72,0,19,34,32,0,31,0,27,18,27,65,43,36,54,5,23,24,25,23,37,0,35,16,3,0,13,0,11,33,33,0,49,58,26,12,5,19,24,12,5,0,40,23,0,28,48,0,72,0,34,0,80,25,66,56,44,61,0,34,0,23,59,0,34,0,58,51,0,34,0,19,3,0,18,37,0,33,23,25,0,75,23,21,5,0,66,25,3,0,49,43,57,53,21,37,31,0,26,54,0,56,0,20,15,25,27,32,23,34,26,23,0,32,0,30,46,30,35,0,29,48,0,15,49,22,22,22,16,57,64,33,62,37,10,43,24,23,42,28,27,45,43,41,42,20,24,24,38,56,35,53,32,64,33,33,56,72,11,21,9,0,59,25,35,0,75,0,63,74,67,29,23,18,46,61,58,62,65,19,13,0,51,67,17,11,9,0,30,75,47,32,22,28,72,36,9,20,7,0,32,54,59,14,34,22,46,14,25,47,7,0,28,5,0,56,56,47,54,56,59,56,61,33,45,0,68,33,58,22,17,27,53,55,29,20,54,50,58,55,30,49,5,0,29,30,27,3,0,18,50,3,0,26,32,0,33,0,16,27,30,25,10,22,5,33,0,16,36,25,32,32,29,18,24,26,24,11,11,11,63,36,67,64,54,16,0,34,22,47,45,28,19,23,28,15,19,24,28,15,18,35,15,9,58,26,7,6,0,78,52,0,40,21,74,24,22,9,0,28,21,9,16,25,16,7,0,18,34,19,49,22,9,0,18,27,26,16,0,39,35,17,17,17,17,17,70,0,66,47,24,37,59,20,20,11,0,58,61,62,58,27,24,68,73,35,46,16,0,17,24,22,20,11,0,27,24,20,11,0,33,28,25,31,42,43,13,40,56,52,28,16,0,17,52,24,20,11,0,27,26,38,40,47,25,32,35,11,31,16,0,17,52,24,20,11,0,27,20,16,0,55,17,57,27,0,24,27,20,11,0,25,25,35,18,16,0,17,52,45,47,52,49,27,20,11,0,56,54,64,62,63,38,64,66,60,52,0,33,26,26,18,16,0,16,56,27,0,57,23,11,0,18,15,0,17,12,0,50,45,18,50,53,59,54,42,36,54,35,5,0,59,22,70,76,71,41,72,15,51,41,69,71,59,18,55,20,9,0,73,75,77,65,10,48,33,9,0,55,38,33,25,0,22,54,5,0,63,21,19,20,19,5,0,63,53,61,0,60,64,61,62,19,57,34,0,47,57,39,64,0,70,78,37,62,31,50,56,7,27,0,69,58,5,0,67,51,56,32,24,5,0,26,29,5,0,48,29,27,5,0,47,56,41,20,34,5,0,44,9,63,23,17,8,68,69,69,72,39,29,5,3,0,13,64,0,55,32,6,60,61,47,25,0,22,26,24,5,33,0,45,32,21,44,0,61,57,77,56,65,39,33,32,47,39,16,28,72,22,9,18,13,33,62,16,9,22,35,74,18,33,11,46,54,16,76,36,9,9,60,17,0,32,52,28,0,52,47,0,9,42,68,26,5,22,3,0,37,41,50,21,34,35,0,41,0,33,0,36,29,40,5,0,49,28,41,0,62,63,39,43,0,25,41,0,78,17,45,22,25,5,0,42,29,19,54,26,7,56,16,43,27,7,5,0,63,34,40,22,3,0,25,46,3,1,0,36,0,29,0,37,0,32,0,37,66,33,43,56,66,21,31,60,23,23,29,26,29,10,10,6,5,9,38,66,21,31,37,48,39,41,6,5,2,33,1,0,20,6,30,29,53,34,14,29,46,2,14,0,18,0,27,27,27,25,21,31,43,0,31,57,1,0,31,26,28,41,36,0,27,33,1,0,39,37,0,34,32,0,27,45,3,1,0,47,30,22,36,53,54,3,0,10,51,22,3,1,0,43,15,17,0,47,57,29,56,5,30,3,0,33,25,41,37,68,33,27,29,31,17,21,29,37,33,33,33,29,39,37,31,0,49,52,60,58,0,30,0,26,26,31,35,8,43,39,3,0,60,40,0,71,77,74,35,0,37,46,44,50,3,0,48,60,26,27,63,36,0,51,40,1,0,24,26,43,0,57,34,56,24,59,48,16,28,12,30,7,12,20,35,14,31,10,32,24,11,5,3,0,11,27,0,19,30,0,44,18,42,34,5,21,37,38,62,24,52,21,9,5,3,0,25,34,32,7,0,19,1,0,25,29,26,12,10,48,36,0,24,15,29,25,0,18,34,49,41,5,3,0,10,1,0,18,28,14,28,36,41,12,31,38,10,28,3,0,35,34,0,12,1,0,0,90,101,33,26,16,0,42,85,4,1,0,39,26,16,0,42,57,4,1,0,11,20,0,25,36,21,19,30,0,22,29,20,25,23,42,23,30,30,46,34,0,39,63,60,79,0,46,2,0,39,16,44,0,63,60,79,0,35,42,0,35,0,22,16,0,37,31,33,52,4,18,2,0,43,39,23,21,54,59,32,14,32,61,28,23,37,42,15,21,10,8,8,4,23,3,0,0,70,39,0,62,13,43,10,4,65,0,34,14,15,42,25,53,13,0,12,54,71,21,12,0,13,52,75,37,46,12,4,0,33,0,30,12,23,16,33,44,49,23,40,29,19,9,19,0,33,0,32,35,11,0,53,18,73,7,72,3,0,0,95,48,0,53,16,11,0,67,57,22,40,26,53,0,27,45,24,40,13,31,26,15,25,8,13,32,6,4,0,35,60,17,11,0,65,64,66,11,0,57,30,49,0,37,33,20,38,32,13,26,8,0,50,37,8,33,6,55,11,4,0,61,21,18,35,31,20,16,32,9,24,65,4,3,0,0,54,26,11,0,30,0,17,23,0,23,13,4,0,30,11,0,20,29,41,13,4,0,33,0,17,19,3,0,0,57,46,57,19,37,0,15,13,8,36,17,32,37,18,6,4,0,47,30,0,74,48,47,30,7,41,0,17,3,0,59,0,50,40,0,34,29,28,18,0,26,15,4,0,8,63,17,33,16,4,3,0,63,55,61,38,34,48,26,23,21,11,27,28,6,4,0,29,0,29,17,3,0,54,46,21,70,62,34,32,33,69,31,30,20,8,12,0,43,18,25,20,44,12,0,55,44,23,17,24,41,12,4,3,0,96,0,48,0,62,38,16,11,0,64,33,47,41,57,0,55,43,0,28,34,0,59,27,11,0,34,24,42,15,0,50,68,41,0,51,39,4,3,0,63,62,38,35,0,28,47,0,61,15,11,0,55,40,36,45,13,48,17,23,6,4,0,36,41,0,26,34,3,0,42,42,30,37,0,33,17,0,48,29,0,26,17,0,47,33,15,0,33,19,0,55,49,4,34,15,15,10,38,19,67,37,21,8,6,0,43,12,38,21,22,8,13,20,6,4,0,30,0,16,12,45,0,42,0,31,17,0,11,3,0,42,30,3,0,45,33,3,15,1,0,61,58,42,60,51,24,28,39,0,31,48,0,40,23,5,0,16,0,22,43,43,29,5,35,33,50,44,23,9,5,14,3,1,0,27,0,24,34,45,0,35,53,24,25,6,22,5,0,59,24,29,6,22,5,3,0,22,23,32,20,46,4,19,10,1,0,26,23,17,34,20,46,4,55,61,19,10,1,0,22,31,26,0,34,0,29,18,23,15,10,21,23,3,1,0,24,31,24,25,34,0,71,68,67,73,51,73,9,37,33,7,15,29,37,56,27,38,32,11,14,25,7,5,4,1,0,25,27,17,0,54,14,1,0,11,20,0,25,36,21,13,3,28,59,44,3,32,61,41,58,42,3,57,22,35,18,3,16,31,60,63,57,30,43,50,53,64,3,26,69,39,28,70,3,11,74,74,74,30,0,15,0,22,29,35,36,25,23,42,30,23,30,30,27,46,34,0,27,0,39,65,30,0,22,12,60,38,4,0,40,2,0,22,50,0,19,18,0,32,49,18,4,0,31,23,16,36,4,16,2,0,47,38,28,0,38,29,0,16,17,0,22,16,0,44,39,18,4,0,15,3,0,18,22,39,39,18,20,4,0,33,12,60,42,4,0,31,42,0,35,29,0,47,37,0,62,42,45,63,31,0,34,19,26,40,25,8,4,0,19,24,0,24,27,23,0,22,16,0,15,18,0,19,33,58,4,16,0,21,24,33,18,39,26,12,15,24,8,6,4,2,0,39,32,20,11,0,43,28,0,23,32,3,0,41,25,11,0,28,0,31,15,26,0,19,48,32,0,21,19,22,4,3,0,53,38,17,16,0,37,19,24,0,15,16,0,55,34,62,60,58,26,61,15,26,38,23,11,56,0,23,35,14,8,8,6,3,0,38,30,3,0,41,33,3,0,37,23,22,3,0,37,22,24,24,4,3,0,38,21,25,25,34,41,34,45,23,37,8,6,37,44,37,45,23,28,47,8,6,4,3,0,70,32,36,0,20,11,0,22,21,63,11,4,0,59,0,62,13,43,10,4,65,0,34,14,15,42,25,57,13,0,12,54,71,21,12,0,13,52,75,37,46,12,4,0,33,0,30,12,23,16,33,44,49,23,40,29,19,9,19,0,33,0,33,35,16,0,53,18,77,7,76,3,0,95,19,58,92,6,3,0,105,0,53,16,16,0,67,57,22,40,26,53,0,27,45,24,40,13,31,26,15,25,8,13,32,6,4,0,76,0,35,60,17,16,0,65,64,66,11,0,57,30,49,0,37,33,20,28,32,13,26,8,0,50,37,8,33,6,55,16,4,0,61,21,18,35,31,18,26,30,11,24,6,62,4,8,3,0,50,20,11,0,26,11,0,21,38,11,4,0,50,0,17,23,0,21,13,0,30,11,0,20,29,41,13,4,0,33,0,32,10,30,0,25,3,0,57,20,11,0,46,57,19,41,0,34,19,46,0,15,33,0,34,36,18,0,49,32,0,76,50,51,32,12,11,37,4,3,0,59,20,11,0,54,11,11,0,48,50,44,0,34,29,28,18,0,26,25,4,0,19,50,3,0,37,34,12,39,9,46,4,2,0,63,20,11,0,55,61,38,34,48,26,23,21,11,27,28,6,4,0,29,27,3,0,54,20,11,0,46,21,70,62,34,32,33,69,31,30,35,22,8,12,0,43,18,25,20,44,12,0,55,44,25,32,50,40,22,8,24,41,12,4,0,14,3,0,96,19,58,87,6,3,0,0,106,54,0,62,38,16,16,0,64,33,47,41,57,0,55,47,0,34,28,0,59,27,16,0,34,24,42,15,0,50,68,45,0,51,43,4,0,8,3,0,63,62,38,19,45,57,6,3,76,0,41,0,28,47,0,61,15,16,0,55,40,36,45,13,48,17,23,6,4,0,36,41,0,26,34,8,3,0,42,42,30,37,0,33,16,0,48,29,0,26,17,0,47,33,25,0,33,18,0,55,49,4,34,28,24,28,11,54,38,20,11,36,6,4,0,19,51,14,32,0,34,43,64,61,53,16,48,13,45,9,13,42,6,4,3,0,58,63,33,16,4,0,37,30,0,60,33,0,16,12,45,42,0,31,16,0,27,3,15,1,0,32,0,82,28,44,42,45,37,22,46,30,18,28,30,21,51,30,67,37,84,45,37,34,67,70,71,45,44,46,13,39,75,39,13,47,9,43,5,20,1,31,20,47,8,31,19,22,26,9,35,22,18,1,0,14,19,60,2,0,9,37,2,0,9,49,2,1,0,13,35,21,17,26,0,18,18,0,25,25,22,0,3,24,20,3,2,0,22,24,2,0,23,36,2,0,10,63,0,27,27,31,35,29,0,15,2,0,18,48,2,0,15,19,17,13,22,3,2,0,19,19,17,13,26,3,2,0,40,25,21,19,19,3,29,0,21,0,14,2,0,23,36,2,0,24,36,2,0,15,40,0,60,56,0,33,0,61,30,18,0,19,0,20,38,28,21,10,33,3,0,28,55,27,23,0,18,2,0,13,48,2,0,14,42,37,0,47,0,23,34,70,4,15,10,34,0,43,38,3,2,0,16,42,37,0,47,0,23,34,42,35,4,15,10,34,0,43,38,3,2,1,0,21,74,65,43,63,9,16,94,4,2,1,0,39,0,19,26,19,30,36,50,32,48,2,0,13,30,2,0,10,81,2,1,0,28,32,0,58,60,0,50,14,2,0,51,52,13,38,14,2,0,44,51,50,39,14,0,37,1,0,36,39,35,0,32,0,38,20,18,2,0,24,27,34,2,0,44,1,0,45,0,28,53,1,0,29,42,24,0,58,24,37,2,0,32,12,29,17,26,32,10,11,14,4,3,21,43,26,3,1,0,16,21,21,29,31,16,59,22,2,0,48,23,81,24,28,4,34,28,39,3,0,24,22,2,0,74,38,19,0,41,74,89,4,0,46,18,19,32,61,33,17,11,20,34,18,4,0,26,3,0,22,2,0,15,19,0,32,0,25,47,29,61,4,32,3,0,61,2,1,0,15,0,16,19,20,18,2,0,19,36,52,0,33,47,40,40,48,47,55,42,40,57,83,63,46,51,5,0,26,36,2,0,29,36,2,0,18,89,0,24,14,2,0,29,92,0,21,0,34,0,14,29,10,25,3,14,2,0,30,92,0,21,0,36,0,14,30,10,25,3,14,2,0,10,77,0,38,91,0,25,51,47,0,48,74,0,25,39,43,0,34,4,0,37,3,0,33,0,35,69,3,0,66,0,28,28,0,16,2,0,30,26,0,24,46,47,0,43,0,19,32,3,0,39,35,0,57,0,22,21,17,19,9,57,6,11,95,4,0,57,5,0,10,65,90,69,9,26,4,2,0,23,59,2,0,21,37,47,3,2,0,24,26,24,2,0,20,26,57,2,0,29,31,0,30,23,25,3,0,32,27,38,3,0,44,0,26,0,29,24,0,24,21,81,38,58,26,5,6,3,0,64,31,64,36,16,4,0,53,0,20,30,0,17,25,0,22,33,62,0,32,83,6,5,11,28,0,29,34,44,0,26,40,62,41,0,39,38,15,43,27,38,8,7,6,0,20,5,4,0,25,22,3,0,53,0,14,2,0,11,18,84,4,2,0,29,27,16,88,39,28,3,0,41,2,0,30,28,16,91,39,29,3,0,43,2,0,26,95,0,21,19,21,0,36,31,0,33,29,0,39,56,64,0,39,44,0,36,41,0,51,19,35,30,3,0,27,31,0,40,39,14,2,0,42,26,91,2,0,39,95,0,50,46,0,74,20,19,83,5,0,21,19,0,25,27,17,132,40,28,4,0,33,3,70,70,0,18,52,54,19,16,21,6,3,0,36,31,0,14,21,27,49,62,5,23,26,4,0,46,10,34,71,0,78,24,28,3,14,2,0,19,89,0,36,14,2,0,30,92,0,21,0,34,0,14,30,10,37,3,14,2,0,31,92,0,21,0,36,0,14,31,10,37,3,14,2,0,21,50,46,0,33,0,93,69,0,21,19,0,34,0,17,20,20,18,0,60,3,14,2,0,13,66,29,6,70,76,70,37,66,12,2,0,13,44,64,27,29,6,32,43,77,36,4,0,34,45,79,38,4,0,32,43,77,36,4,37,40,74,30,2,0,47,50,46,0,18,0,21,30,64,34,47,18,4,0,22,3,0,53,84,0,27,17,72,26,4,0,61,56,81,0,69,96,0,55,0,60,26,4,0,21,10,4,0,22,3,0,16,2,0,47,19,29,25,43,0,15,2,0,16,55,0,37,42,0,17,68,0,77,3,2,0,28,45,77,48,19,105,5,3,0,38,0,28,33,38,0,58,0,33,14,2,0,13,23,0,30,17,27,22,3,0,26,2,0,12,30,6,7,49,53,46,4,17,33,14,2,0,11,30,17,6,76,33,16,2,0,14,31,2,0,17,52,2,0,27,52,0,42,37,0,29,0,6,25,37,0,51,27,35,33,5,0,34,48,44,4,0,28,26,18,0,15,2,0,20,32,14,2,29,57,0,42,37,0,30,0,6,25,39,0,27,22,62,0,34,48,44,4,0,28,22,18,0,15,2,0,22,34,14,2,0,15,43,2,0,43,39,41,59,138,31,36,20,46,20,7,11,65,4,3,30,13,22,35,24,4,18,3,27,56,31,28,20,18,36,42,7,6,10,50,36,19,17,35,41,6,3,14,2,0,38,28,41,0,21,61,3,0,14,2,0,36,40,56,3,0,55,2,0,41,28,37,7,40,16,57,5,60,3,0,14,2,0,39,40,59,3,0,28,23,79,5,3,0,55,2,1,0,36,43,64,5,37,20,24,30,43,86,90,60,112,84,85,77,64,49,35,65,92,36,34,51,33,9,5,17,1,0,25,24,26,2,0,36,7,61,17,31,14,3,1,0,64,0,59,0,45,71,30,1,0,41,0,53,40,0,25,31,30,0,32,24,38,26,32,14,36,26,31,33,16,52,56,38,20,37,13,11,9,14,34,26,64,34,16,33,9,14,31,26,14,5,3,0,64,1,0,49,0,50,12,55,28,86,0,26,63,11,3,0,31,44,3,0,22,1,0,22,66,25,16,3,58,1,0,37,34,1,0,64,58,0,27,47,1,0,54,27,14,85,44,19,16,17,14,85,15,86,12,80,16,63,43,10,7,71,3,1,0,40,30,0,7,54,18,95,19,5,21,14,3,0,20,1,0,28,7,52,21,25,3,15,1,0,65,42,29,93,46,51,15,50,62,83,43,61,38,35,87,43,64,14,46,45,7,5,3,10,83,25,4,1,0,248,0,50,63,0,34,33,24,12,23,3,40,62,24,3,3,66,9,20,18,84,38,5,16,62,9,20,86,91,10,5,17,33,0,19,0,30,45,21,4,1,0,70,31,62,30,46,3,75,2,42,62,30,23,3,31,2,22,1,0,52,60,24,13,23,25,2,35,46,15,30,55,10,68,3,0,32,54,3,0,93,66,31,24,4,3,35,53,43,30,2,13,1,0,49,24,47,44,60,83,63,13,1,0,27,35,29,31,41,44,24,3,2,41,34,63,24,7,3,2,24,51,40,13,3,1,0,56,52,77,0,39,43,45,43,41,39,47,0,56,42,0,50,0,94,97,71,0,17,199,0,45,99,1,0,60,83,1,0,61,114,1,0,42,20,30,23,35,4,28,16,56,38,48,43,20,21,16,4,5,4,10,1,2,0,29,17,1,0,60,63,60,3,27,18,36,160,45,158,30,124,34,71,1,0,77,27,9,36,31,22,61,39,79,38,109,8,69,13,37,45,39,73,5,85,3,58,1,0,67,9,37,20,24,73,45,49,27,58,5,16,3,54,1,0,55,27,39,53,12,66,78,50,52,31,54,10,83,3,10,9,44,4,1,0,52,0,57,70,1,0,46,27,87,14,4,1,0,60,20,57,0,60,57,0,50,9,46,55,19,16,5,3,0,19,1,0,52,39,0,10,7,79,55,7,23,57,50,51,80,71,10,24,40,47,9,20,7,75,85,19,47,18,491,57,11,20,7,0,50,52,7,0,10,42,47,48,46,50,49,42,39,9,24,7,0,21,12,44,78,48,52,41,11,26,9,53,94,14,33,23,23,63,14,13,24,11,90,50,9,7,0,38,20,7,0,102,53,22,28,19,19,59,64,86,10,20,28,45,53,37,9,24,7,51,13,40,21,25,44,25,39,48,110,46,11,51,101,11,9,7,22,5,4,1,0,89,50,42,57,43,85,0,28,61,51,30,20,7,66,49,7,5,17,4,0,77,71,25,51,0,49,46,88,23,5,23,61,5,21,4,0,61,51,35,13,5,50,8,35,41,24,37,7,52,5,4,0,90,32,32,84,49,5,0,43,29,75,72,74,68,33,5,4,0,68,45,44,46,5,11,24,35,54,4,0,10,24,46,63,8,42,39,19,22,36,8,66,88,64,63,27,71,26,61,79,11,10,80,22,9,20,26,30,88,24,11,9,77,66,46,20,26,30,42,9,7,97,14,26,38,53,82,38,63,24,50,21,58,45,29,44,18,15,99,14,9,51,6,42,39,85,58,33,60,57,90,70,49,60,54,42,55,13,52,28,62,63,69,55,28,82,13,40,36,83,13,66,95,53,12,10,72,46,80,53,75,57,52,18,42,26,50,56,54,29,22,12,11,8,44,75,84,5,4,1,0,70,45,26,26,26,19,44,70,88,32,28,28,28,5,3,23,20,126,6,3,69,6,23,90,5,20,161,6,3,1,0,19,46,0,39,0,46,0,41,0,34,0,53,0,52,2,0,21,41,1,0,31,37,36,85,14,1,0,25,26,51,80,72,14,1,0,24,29,1,0,27,19,0,44,35,0,38,49,23,3,0,46,0,24,22,0,44,1,0,38,0,36,25,100,68,43,3,15,1,0,54,9,32,11,82,96,42,0,44,46,33,73,13,5,3,0,33,8,43,46,45,7,13,5,3,0,69,0,86,53,0,47,56,1,0,38,66,1,0,37,45,8,37,43,43,30,7,18,5,17,5,1,0,86,18,24,20,24,32,3,21,25,33,3,13,11,53,50,48,1,0,42,14,13,14,10,27,39,27,22,31,26,7,15,13,23,25,21,13,3,21,32,0,27,38,18,14,17,14,31,31,17,18,18,34,6,40,39,18,14,25,31,43,17,6,10,54,18,29,27,20,29,21,30,8,12,17,20,16,27,33,33,32,28,19,20,37,21,30,8,5,3,23,65,3,0,48,1,0,43,14,10,13,10,27,27,13,14,14,30,3,17,35,56,65,7,12,55,56,77,7,42,71,35,91,9,7,59,62,39,98,30,40,38,21,10,7,5,3,46,1,0,44,14,10,21,27,39,13,3,52,61,3,84,52,60,1,0,32,21,14,23,15,24,3,26,22,63,80,42,34,21,7,4,1,0,20,14,10,21,27,27,26,22,13,14,31,15,24,3,36,51,52,73,3,0,38,67,61,32,31,73,62,43,33,7,68,5,27,52,5,0,35,51,12,98,5,3,0,55,38,58,35,35,94,99,3,0,68,46,89,79,10,28,92,6,3,1,0,43,26,51,0,70,48,0,39,1,0,33,10,92,70,4,1,0,55,10,35,31,37,34,29,4,1,0,36,10,32,44,97,4,1,0,66,0,46,75,1,0,36,45,29,47,1,0,31,32,0,32,13,9,10,20,21,24,15,5,29,15,11,12,22,23,26,17,7,3,0,60,16,25,20,16,23,15,16,7,15,39,24,15,35,42,16,5,23,69,29,19,20,99,67,8,5,34,19,95,37,11,8,42,19,101,8,5,64,68,9,62,19,53,16,17,97,10,8,6,30,14,21,23,44,17,6,61,3,0,10,25,46,4,1,0,45,47,55,43,38,38,5,48,37,3,26,1,0,35,10,17,19,40,13,3,55,72,46,47,29,28,86,56,68,57,68,32,30,67,16,65,9,37,27,49,67,37,30,60,16,65,9,7,5,22,47,92,14,100,7,5,3,1,0,35,14,24,13,64,8,31,15,45,16,4,1,0,84,0,81,0,92,0,33,8,7,5,13,15,16,24,40,12,33,24,12,11,25,22,37,13,22,14,3,52,44,16,18,19,18,18,4,35,100,41,23,23,32,25,24,0,28,99,94,37,39,37,100,0,66,81,80,36,34,33,46,47,38,50,45,40,50,28,37,38,35,0,15,25,35,20,15,7,0,75,34,7,89,41,7,77,45,7,0,24,41,58,22,53,51,7,0,46,26,36,54,52,69,0,79,80,0,55,40,0,90,57,50,37,46,65,60,15,0,53,34,61,61,57,38,19,68,36,35,17,15,57,37,34,22,64,15,20,86,26,33,16,50,51,45,75,38,46,15,13,0,40,18,65,40,13,11,17,32,42,78,88,50,62,20,32,13,19,11,0,38,14,45,33,51,51,13,44,32,51,54,19,11,0,50,52,65,91,51,13,19,11,0,40,30,0,42,49,46,13,41,56,13,19,11,0,61,49,74,31,54,44,79,61,96,24,23,33,31,19,20,30,42,49,25,14,90,67,44,15,13,11,17,9,37,27,31,35,46,43,33,47,13,18,50,33,51,13,11,17,39,35,34,77,14,49,73,13,49,11,17,28,32,73,25,27,34,56,23,15,43,50,68,17,51,15,21,26,27,32,32,21,26,33,34,42,15,21,26,72,31,17,21,20,32,21,11,9,33,31,39,37,43,46,47,13,46,38,43,45,47,13,11,17,32,80,32,47,42,44,11,17,31,52,35,30,11,17,30,73,35,31,32,40,13,11,17,28,44,48,11,51,49,11,17,31,144,43,56,35,0,55,0,16,28,56,49,48,15,71,32,17,13,11,17,35,30,44,11,17,31,46,63,11,7,6,0,17,24,43,58,5,5,0,31,78,87,85,92,70,28,41,15,14,14,95,6,54,68,87,3,0,38,82,21,7,3,47,26,17,15,36,79,29,7,26,23,7,6,3,0,36,100,30,17,17,56,39,0,6,6,19,19,28,20,21,21,53,8,34,5,57,3,0,26,30,49,54,45,3,0,31,12,16,17,16,17,42,94,17,16,43,15,15,0,71,16,25,20,16,23,15,16,7,15,39,24,15,35,42,16,4,77,32,8,39,20,19,20,19,33,45,33,28,45,32,13,20,19,29,31,27,19,8,0,19,80,3,0,27,37,36,7,24,29,0,28,47,24,1,14,24,4,35,51,5,3,0,13,11,42,25,0,10,33,54,88,36,4,1,0,31,0,33,9,17,26,55,57,16,14,51,66,35,32,78,4,0,96,0,34,53,35,42,0,21,23,38,20,35,82,27,0,35,54,36,13,100,0,28,50,45,22,72,34,22,4,72,0,23,40,22,37,43,20,0,57,16,50,36,47,45,55,32,15,0,12,60,44,6,4,0,86,0,48,0,30,22,0,47,93,17,11,8,6,0,68,27,43,5,26,42,5,0,8,61,83,57,7,38,50,5,0,31,20,88,0,47,49,19,11,49,15,31,193,16,50,12,18,10,7,6,0,29,17,11,9,17,33,20,63,44,16,37,28,16,10,36,26,63,39,26,18,6,3,0,10,22,0,23,0,25,96,74,55,33,28,30,13,23,35,17,9,40,6,0,29,82,78,24,87,7,41,18,126,10,7,43,19,35,26,8,6,0,16,47,59,32,21,32,28,101,80,31,13,16,21,32,28,66,13,9,7,6,0,14,30,34,7,0,43,60,16,76,44,51,10,7,0,44,61,16,66,51,10,7,0,45,57,38,19,77,10,7,0,82,38,59,96,7,0,46,58,79,7,0,38,40,41,32,20,31,10,7,0,42,54,94,7,0,18,6,0,42,77,6,0,25,44,0,11,61,21,40,7,5,4,1,0,32,36,83,59,59,42,36,21,21,1,45,45,39,35,11,25,84,38,14,9,11,25,29,54,55,17,27,14,10,27,36,23,18,8,46,24,26,24,21,44,20,66,33,30,31,26,48,73,71,73,52,75,72,17,22,62,17,13,18,28,13,27,9,20,23,27,25,39,19,1,35,45,46,1,49,18,18,20,8,45,31,41,19,27,35,17,23,37,5,22,15,1,42,20,21,44,1,21,32,1,33,23,1,28,36,32,37,42,43,16,17,46,32,20,36,38,24,13,35,9,30,21,21,47,36,82,32,34,38,50,33,13,22,35,74,37,25,77,75,77,37,25,75,9,5,49,1,53,28,30,20,47,8,37,19,20,32,40,22,15,1,0,44,37,3,30,40,45,23,36,36,37,36,3,92,3,97,98,2,21,46,37,36,3,84,12,21,44,42,44,58,58,62,50,30,31,35,1,37,34,1,32,33,1,27,37,1,28,32,1,34,39,120,1,30,40,26,126,1,63,12,15,13,13,13,13,14,13,31,6,1,28,37,54,24,42,19,5,32,63,24,22,40,19,5,25,35,29,39,60,20,18,20,31,27,35,30,38,24,15,1,34,96,52,29,20,40,36,1,32,37,101,13,27,29,5,10,82,59,5,1,3,92,62,3,37,45,39,97,36,20,100,96,21,101,97,89,33,45,32,92,21,36,21,9,82,33,57,26,21,100,70,29,27,40,27,26,13,27,108,97,42,13,21,9,104,45,34,19,5,18,39,32,5,63,20,5,20,1,3,59,3,33,24,18,34,29,49,41,38,28,31,40,27,30,42,27,31,38,41,27,38,94,40,40,40,27,40,99,44,9,33,33,5,36,43,24,88,30,26,27,29,36,77,43,22,40,65,104,100,83,47,13,36,9,34,40,16,93,5,1,0,33,68,75,130,36,20,34,1,0,3,63,3,30,14,18,40,36,1,0,17,24,22,24,22,0,37,63,42,24,102,64,15,36,100,55,5,20,1,51,51,35,21,5,27,1,25,43,52,25,9,5,16,1,36,15,28,37,1,31,33,1,0,18,3,77,96,97,18,2,8,24,20,78,2,26,38,38,6,3,52,25,46,51,24,25,23,9,22,26,9,14,27,9,5,18,19,1,46,63,43,18,5,17,1,46,50,43,18,5,17,1,26,12,20,23,22,6,1,3,96,83,3,61,53,16,35,26,36,79,29,9,35,72,51,9,14,29,9,5,24,30,73,1,0,78,98,29,31,3,91,3,20,3,93,80,3,17,3,92,97,24,3,26,16,30,49,42,23,58,85,31,25,27,37,31,45,72,76,36,43,37,38,9,14,38,58,9,44,36,40,5,1,8,32,71,6,43,45,84,81,35,24,39,107,53,6,62,15,21,43,23,45,45,84,81,35,52,39,115,25,52,40,33,52,47,174,6,5,47,42,1,67,67,16,96,5,40,16,50,18,17,1,0,3,87,3,8,3,75,47,3,8,3,96,43,2,97,97,34,3,16,19,44,24,5,1,8,48,28,78,39,32,25,52,52,6,5,0,3,95,48,3,15,3,65,3,21,3,100,37,3,15,3,100,37,3,15,3,46,3,18,44,37,39,34,28,25,37,5,1,8,87,112,48,29,36,63,44,9,50,24,83,66,59,51,48,33,6,50,75,55,6,27,130,16,23,17,31,48,35,27,21,10,6,27,40,99,6,5,35,52,25,5,27,1,44,28,51,32,31,25,21,25,18,44,22,25,20,18,5,17,1,26,45,18,19,38,23,17,33,18,19,33,18,19,33,18,19,23,17,34,1,27,17,1,38,21,15,48,32,5,25,1,0,28,17,17,15,15,18,2,25,48,12,12,16,15,16,6,1,3,99,44,3,34,42,1,3,99,48,3,42,56,1,3,90,64,3,30,56,47,32,46,51,41,30,34,36,51,40,38,44,102,33,39,55,128,102,62,35,29,13,84,53,67,98,25,13,34,38,32,107,67,32,55,9,5,15,1,3,95,63,3,58,22,86,5,59,79,24,20,94,25,29,34,143,1,0,25,29,21,19,1,3,77,75,42,2,75,79,76,71,26,3,44,64,27,43,41,92,89,9,5,43,48,42,5,16,1,56,52,36,61,100,102,100,37,21,21,18,37,31,10,77,79,50,40,93,22,83,51,96,98,60,106,53,7,36,1,0,3,76,18,3,17,31,80,80,29,37,31,41,35,38,53,9,5,16,36,5,1,0,3,77,76,2,79,77,73,26,2,75,29,2,73,25,3,44,111,51,52,1,0,26,0,30,0,3,11,3,0,9,20,0,25,34,21,14,16,16,16,15,20,0,4,36,3,12,3,40,3,30,29,79,27,15,4,0,32,27,25,45,23,51,56,4,19,62,26,5,3,0,4,50,3,23,20,16,4,0,22,21,26,12,4,151,8,5,16,12,4,32,47,18,18,17,16,15,14,20,18,17,14,20,17,16,14,20,18,17,16,15,14,20,20,19,17,16,14,20,20,19,17,16,14,20,25,24,18,17,15,16,13,24,4,2,0,4,26,3,22,20,16,4,0,24,28,20,37,4,20,37,4,20,37,4,20,37,4,20,2,0,4,25,3,22,20,16,4,0,23,28,20,40,4,20,41,4,20,43,4,20,43,4,21,2,0,4,25,4,0,38,35,66,2,13,1,0,13,22,0,27,40,23,4,65,33,4,0,22,34,36,30,32,30,32,39,32,0,35,31,5,0,5,61,4,0,25,25,0,5,76,3,79,4,30,0,5,41,87,70,16,4,35,16,0,47,58,42,4,0,73,3,40,0,5,49,3,29,22,15,4,35,16,29,23,20,0,28,16,25,12,5,0,23,0,27,36,41,19,25,21,20,0,42,0,38,43,24,5,0,45,18,67,72,26,17,6,13,54,43,30,40,0,79,28,14,6,18,7,0,51,44,0,46,28,4,0,31,45,52,25,100,0,44,21,24,16,35,28,6,54,47,52,6,0,25,6,15,24,5,6,0,59,48,28,4,0,16,3,0,41,115,27,19,3,0,5,62,39,3,30,15,4,31,32,39,0,26,26,0,9,84,28,0,30,20,28,14,5,0,48,0,32,73,12,64,5,4,3,0,5,25,3,31,15,4,22,23,42,75,15,26,21,3,0,5,68,3,24,21,15,4,26,39,16,4,0,9,11,0,62,42,18,5,4,0,62,42,17,5,4,0,16,3,0,5,31,3,26,30,16,4,32,27,47,29,3,0,5,17,3,22,19,16,4,24,30,36,4,14,3,0,5,54,53,4,22,153,3,0,41,0,21,2,0,18,17,1,0,24,0,25,0,30,52,26,30,5,57,5,0,34,22,22,32,35,28,22,0,17,18,19,155,5,5,7,0,5,12,5,0,20,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,4,0,5,64,62,40,4,76,5,0,40,24,79,77,16,122,16,4,0,55,133,17,4,0,59,95,159,59,138,25,82,158,71,127,3,0,5,39,4,16,5,0,29,43,20,36,13,36,45,0,25,11,4,0,36,42,0,69,67,57,17,17,44,25,12,5,12,25,47,46,19,5,6,0,28,3,0,5,46,52,52,22,4,16,5,59,0,5,23,4,31,17,5,29,8,21,50,12,41,5,20,14,46,4,3,0,5,23,4,66,17,5,19,9,8,41,20,14,46,4,0,73,66,26,4,0,12,3,0,5,54,4,44,46,34,4,27,17,5,0,27,8,107,63,24,20,14,46,4,3,0,44,0,38,0,5,78,5,0,31,8,29,20,58,4,4,34,26,1,0,27,0,3,23,3,0,22,0,27,46,23,30,27,28,0,5,53,5,0,22,20,34,22,22,32,35,12,138,4,0,5,12,5,0,38,0,7,110,64,51,0,77,22,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,6,4,19,85,3,0,5,78,4,80,5,0,64,31,27,16,19,17,18,37,28,7,0,39,30,46,15,55,16,31,15,11,22,4,0,19,14,9,0,5,60,5,0,24,43,41,34,3,0,5,45,4,16,5,0,29,45,0,19,25,60,56,0,63,83,11,47,4,3,0,22,38,14,4,41,3,0,5,79,5,0,25,60,3,0,5,23,4,31,17,5,29,20,35,11,79,57,29,4,3,0,5,23,4,66,17,5,0,19,28,3,0,5,38,4,65,51,5,0,24,26,0,49,42,62,4,3,0,44,0,38,0,5,54,5,0,31,44,43,16,27,15,4,0,5,67,5,0,31,44,44,4,28,23,1,0,3,72,22,3,0,20,115,38,9,35,2,11,0,65,0,74,25,30,1,29,25,21,22,18,19,1,0,58,53,2,0,47,77,35,5,61,69,92,47,43,51,53,57,53,1,73,54,51,12,11,29,85,69,63,40,30,13,10,65,65,32,35,25,26,25,43,58,47,37,29,9,58,47,37,28,9,39,6,2,0,304,567,84,29,63,24,63,41,75,38,5,29,2,0,27,144,1,50,21,63,42,27,98,5,58,1,51,21,63,40,46,40,84,133,5,58,1,45,50,31,59,32,48,34,34,56,5,34,29,30,30,31,22,53,24,64,5,34,39,30,53,5,32,25,28,1,58,81,41,42,66,41,35,30,31,33,24,69,104,48,5,29,33,54,47,40,44,16,60,131,9,14,114,9,5,107,2,0,36,21,33,1,3,63,63,50,3,21,41,12,68,1,3,60,3,23,41,79,13,1,28,27,27,34,60,148,26,22,20,26,19,18,17,17,24,23,22,17,22,17,10,3,24,50,1,45,71,1,42,40,44,64,1,41,25,21,52,5,57,1,9,56,74,31,16,18,63,38,75,7,1,3,62,33,3,67,56,9,33,66,9,5,13,19,1,21,45,32,50,34,40,84,30,46,19,9,57,19,9,26,6,1,34,47,106,5,41,110,26,5,77,1,52,48,29,30,66,1,27,95,60,16,23,1,29,39,1,3,35,2,83,2,40,41,43,3,39,29,24,5,35,83,1,35,53,1,25,23,71,37,52,31,47,45,46,77,30,24,33,20,5,53,20,5,17,2,40,46,49,72,43,83,60,30,61,5,17,1,46,50,26,14,20,23,19,2,74,37,57,62,33,77,1,33,81,1,42,65,28,76,41,33,58,93,1,37,36,73,1,50,14,26,23,42,53,43,67,5,27,21,1,40,54,63,20,52,5,25,53,5,10,50,5,1,3,26,3,33,36,48,54,83,36,53,50,27,37,39,54,13,95,9,44,5,10,43,5,1,28,71,1,27,25,1,44,35,50,76,44,26,55,67,30,13,9,5,42,28,72,55,5,1,24,16,31,40,58,1,35,32,19,40,33,18,60,37,5,26,1,38,35,22,33,107,5,40,20,17,19,41,50,45,42,18,9,30,5,38,1,52,39,23,40,18,19,44,37,29,73,47,29,35,101,51,30,37,78,93,78,17,33,38,86,64,21,44,17,13,18,9,5,26,1,39,41,32,49,5,42,1,3,63,76,71,34,3,35,9,72,22,5,11,21,5,1,41,3,74,76,3,30,25,22,23,34,47,60,30,51,60,59,38,40,58,21,57,50,21,17,13,18,37,13,9,5,47,39,21,9,32,66,9,14,85,9,5,1,35,49,50,53,34,21,9,55,44,33,39,9,14,49,9,5,1,29,36,35,59,6,78,49,15,44,39,70,31,32,49,42,5,1,55,60,28,61,40,23,75,11,1,38,28,21,66,52,16,16,53,10,6,36,1,40,88,49,18,42,1,44,83,43,18,9,1,28,21,87,138,23,19,8,58,87,36,32,17,1,38,31,59,5,31,31,5,16,1,40,37,43,5,39,61,5,16,1,131,23,14,16,17,14,2,76,37,61,36,5,94,38,116,54,47,113,35,83,9,29,7,60,76,26,21,107,28,67,5,10,71,76,49,13,18,28,13,27,5,20,24,5,33,97,24,15,1,22,36,1,3,79,2,69,77,67,3,54,55,37,56,7,60,49,51,1,45,13,61,31,27,5,36,56,88,5,10,27,5,47,82,31,38,74,28,33,9,5,26,1,59,37,44,34,42,5,21,23,57,54,30,80,60,41,37,73,47,9,67,5,10,47,54,41,29,25,79,30,76,34,76,63,55,32,13,18,34,13,11,5,30,1,26,53,1,43,70,1,50,67,41,46,19,55,3,89,2,90,34,70,2,35,3,40,49,17,27,57,18,20,5,59,1,58,24,77,1,58,55,85,24,86,80,50,49,95,45,2,28,18,78,63,64,66,66,65,37,39,29,20,43,17,60,59,36,53,59,50,24,31,19,24,30,30,19,9,15,19,7,1,41,37,29,20,55,17,43,39,39,67,40,58,28,34,34,23,13,39,26,13,9,15,19,7,1,32,75,1,30,86,1,64,35,34,37,28,21,9,37,31,32,21,9,47,77,54,21,9,62,53,21,9,40,33,52,31,21,9,62,80,21,9,56,105,21,9,28,5,18,1,58,74,1,27,11,17,11,17,41,30,5,72,50,56,1,33,27,37,61,17,32,12,1,45,59,70,35,29,36,46,67,5,19,13,19,6,25,46,5,17,1,3,71,49,3,47,12,27,65,56,18,6,1,34,8,54,39,15,1,18,31,43,32,5,19,1,51,3,90,87,3,47,21,33,44,2,32,19,28,5,26,41,5,29,20,5,17,1,0,26,19,14,13,12,11,2,13,12,18,24,48,66,23,44,45,1,53,31,36,5,39,67,36,87,59,46,40,58,34,40,47,82,41,88,86,102,17,22,31,17,14,32,48,13,33,59,32,28,96,17,22,34,34,36,40,32,21,46,17,13,18,42,13,9,5,37,20,25,25,38,10,25,36,38,10,29,40,23,36,38,36,10,26,36,39,10,27,44,24,13,10,31,43,9,6,18,1,51,130,35,108,5,37,108,5,65,100,123,5,1,0,21,42,46,46,44,49,2,38,39,58,28,48,47,5,44,69,22,9,97,45,5,115,16,101,43,97,223,5,56,81,31,33,29,23,43,116,7,12,30,26,31,32,27,42,62,21,17,22,41,31,37,17,38,13,24,10,20,32,26,48,47,17,112,13,10,23,27,10,23,25,32,27,44,66,21,17,22,69,17,40,13,24,10,26,39,44,43,13,10,52,39,32,32,44,59,36,36,17,85,27,40,75,47,49,49,136,44,130,29,26,50,50,51,25,30,40,25,21,44,70,73,73,41,35,52,125,21,20,64,13,18,69,47,91,19,13,33,38,36,36,148,80,142,100,13,9,6,1,28,32,31,49,37,5,10,78,5,1,23,27,25,24,19,20,40,31,16,6,1,0,38,41,57,55,51,57,160,32,33,35,40,26,46,37,42,5,11,2,66,40,65,101,15,55,19,22,12,25,14,7,47,27,14,14,21,7,5,3,60,1,44,59,57,67,3,7,49,41,22,5,15,30,14,5,3,1,38,19,86,29,3,15,1,81,26,21,9,77,37,113,88,72,55,9,7,17,55,15,7,14,5,3,1,0,17,31,81,31,16,10,20,3,1,41,27,17,18,30,47,43,35,47,21,37,7,5,23,30,15,5,35,27,15,5,27,65,67,38,32,49,32,7,5,3,47,1,47,32,25,38,15,24,3,37,1,36,54,1,44,42,40,29,30,17,18,59,47,48,55,51,21,41,7,5,25,15,5,72,48,21,38,14,98,14,30,49,21,80,30,49,21,79,48,21,37,14,95,14,30,53,25,5,3,97,1,27,39,27,3,16,1,66,61,52,30,57,106,65,42,51,11,3,50,7,49,41,22,5,15,30,14,5,3,60,1,33,160,1,33,161,1,39,52,86,3,140,1,49,56,50,105,39,5,1,52,119,102,27,66,24,9,5,3,16,1,39,70,86,57,33,16,3,135,20,89,23,3,15,1,47,37,43,28,51,53,30,27,14,7,5,109,19,5,93,19,5,39,44,5,56,32,54,69,31,27,14,7,5,107,19,5,23,42,5,51,69,5,49,52,32,5,1,41,21,52,36,23,27,15,5,23,77,15,38,17,7,28,15,5,42,23,5,21,3,38,44,3,18,30,1,0,15,43,57,53,31,3,19,76,9,86,17,30,47,20,8,67,28,5,10,84,3,13,57,37,10,52,85,61,3,53,55,16,1,49,57,35,3,7,74,38,20,19,87,6,61,18,15,104,3,1,43,9,134,92,3,18,1,47,36,11,3,65,96,71,33,1,44,33,11,3,20,96,4,58,52,100,72,133,123,5,66,3,29,47,32,3,1,41,12,7,51,15,14,3,104,9,76,61,17,16,5,3,119,1,23,20,10,12,12,17,18,20,16,2,46,45,43,150,99,36,45,45,7,73,92,19,9,127,7,49,35,42,72,123,9,14,86,7,5,3,1,19,10,12,12,12,12,13,14,11,12,19,23,16,2,50,35,17,3,29,56,10,42,3,1,41,39,17,10,85,3,1,46,51,19,62,40,21,23,37,3,2,0,47,95,101,11,69,33,18,68,63,26,77,22,45,26,9,50,26,9,14,25,9,5,43,76,42,59,65,34,21,25,33,38,37,34,10,42,50,75,79,51,53,81,81,17,13,9,23,27,30,42,47,13,10,5,29,24,54,29,19,15,19,6,35,35,37,9,64,16,49,51,40,47,24,21,15,9,14,17,83,44,39,9,41,78,9,16,22,15,10,5,15,70,34,23,25,37,59,15,41,9,16,5,1,38,99,77,73,30,25,19,22,33,28,32,27,59,73,32,24,6,12,29,34,29,26,50,53,54,10,38,39,10,20,71,26,10,35,53,86,45,52,60,23,17,68,72,17,24,38,35,18,13,9,6,1,34,14,15,71,62,68,6,73,79,72,62,19,2,40,12,39,38,39,10,46,59,45,28,13,80,27,28,13,82,35,88,87,76,90,57,59,43,44,48,36,36,105,17,13,23,9,6,2,57,39,53,54,20,5,73,46,71,61,48,21,26,36,49,80,71,82,20,35,32,39,9,6,47,18,16,23,26,37,32,36,30,10,5,82,44,39,43,27,66,20,27,30,69,59,40,33,14,9,14,20,27,30,69,59,67,33,14,9,5,40,23,65,16,23,26,36,31,36,29,10,5,10,16,23,25,29,10,5,1,35,48,21,43,45,49,28,31,33,61,66,5,22,1,30,21,29,20,42,2,37,62,79,39,46,50,42,67,11,7,33,1,50,9,69,72,73,87,9,31,5,15,46,76,43,86,13,9,16,5,1,46,114,77,59,41,61,241,74,43,70,51,85,25,36,32,40,29,19,13,11,5,1,0,16,0,92,62,2,61,38,41,36,14,35,38,78,23,27,24,5,24,56,49,44,42,37,11,5,12,44,122,23,27,24,5,33,24,35,41,9,26,42,82,43,68,45,47,15,41,66,44,15,41,52,27,43,57,99,48,17,15,35,26,9,47,20,19,65,24,24,11,43,40,5,31,37,32,49,28,19,9,23,35,5,1,34,28,12,31,0,48,0,42,35,29,2,4,1,0,15,34,19,26,9,72,5,15,44,130,9,14,78,59,26,9,5,22,2,31,80,101,90,43,44,7,15,12,28,56,86,86,30,51,63,55,28,13,83,38,68,28,13,32,46,59,60,31,46,53,62,56,15,20,31,28,14,10,23,27,9,6,1,0,15,0,17,0,17,0,63,46,28,80,2,29,39,25,24,32,31,26,37,10,15,43,10,6,19,2,30,0,17,0,63,36,36,36,2,46,0,14,0,60,37,26,31,26,62,70,58,48,48,52,64,6,2,48,47,2,53,0,16,0,62,96,29,61,73,4,57,4,29,41,2,26,39,42,2,36,29,63,2,26,42,105,82,35,50,69,70,10,6,18,2,57,0,19,0,3,59,2,43,34,3,0,43,46,17,3,0,12,56,30,51,3,0,15,2,0,3,53,2,43,34,3,0,28,44,33,23,16,3,16,21,28,27,27,26,30,29,18,5,0,63,18,5,0,82,37,51,7,37,73,22,9,50,73,22,9,7,5,0,81,48,36,50,72,22,9,7,5,0,139,48,36,50,72,22,9,7,5,0,75,30,44,7,59,54,42,56,74,24,11,9,7,5,0,30,32,17,30,0,18,42,23,24,9,7,0,31,20,7,12,14,5,3,15,2,0,34,23,16,3,16,30,41,18,5,0,30,32,17,30,0,18,42,23,24,9,7,0,31,20,7,12,14,5,3,15,2,0,46,46,17,3,0,23,16,3,0,26,0,27,44,25,3,0,20,2,0,24,50,48,0,16,22,34,43,44,0,3,22,23,47,20,3,51,63,0,33,69,40,3,0,75,28,17,3,0,59,13,0,38,6,32,46,0,42,36,2,0,17,0,21,0,29,33,34,4,54,42,4,16,3,0,4,33,4,0,76,0,4,33,4,0,56,37,72,64,3,0,4,53,4,0,47,29,21,0,87,33,38,27,6,4,3,0,4,77,4,0,33,43,53,25,17,4,16,3,0,4,44,4,0,36,44,59,55,26,17,4,53,26,17,4,16,3,0,4,51,4,0,34,55,17,4,52,3,0,4,34,4,0,56,50,49,14,8,0,4,20,4,0,33,21,24,43,24,75,6,19,5,14,17,3,13,0,24,0,42,42,79,78,20,0,21,73,33,7,24,5,0,21,24,5,0,21,37,35,7,5,18,4,0,24,2,0,3,57,2,46,34,3,0,32,32,27,3,53,68,3,15,2,0,3,64,2,46,34,3,0,30,0,47,34,84,3,0,38,23,3,0,34,86,3,0,46,46,49,3,0,38,41,37,31,76,0,54,49,3,0,29,29,0,30,33,23,27,5,30,20,5,27,3,0,52,33,21,21,0,17,30,44,3,0,14,41,66,20,3,0,15,51,3,0,30,30,55,0,30,39,80,41,3,0,41,22,2,0,45,64,63,63,74,31,1,0,34,16,16,0,36,29,0,38,20,15,34,3,0,40,0,37,20,15,42,3,0,21,22,15,1,0,3,37,26,25,19,3,0,47,23,52,3,0,32,29,19,16,0,36,44,0,35,28,0,57,57,0,12,14,5,3,0,14,60,3,0,45,1,0,50,39,18,18,11,0,43,24,66,19,0,64,34,25,7,0,36,60,22,15,5,0,23,42,5,0,63,21,20,15,3,0,16,1,0,73,18,0,24,25,0,42,67,35,5,0,29,65,35,5,3,16,1,0,3,14,3,0,20,15,60,13,1,0,24,36,1,0,34,43,1,0,31,62,1,0,37,51,1,0,31,38,26,51,3,12,1,0,42,49,1,0,26,31,1,0,40,22,17,3,0,57,43,0,17,11,16,11,32,11,37,14,51,5,3,1,0,3,8,3,0,26,62,0,3,24,3,0,36,0,3,59,2,46,34,3,0,28,36,0,87,0,33,68,2,0,31,82,2,0,47,0,24,25,17,47,34,33,19,2,0,46,61,16,3,36,2,0,45,22,43,37,75,3,27,25,3,15,2,0,40,45,17,27,16,3,55,42,2,0,40,61,61,0,43,21,21,13,0,31,42,3,0,31,59,3,0,31,41,10,36,3,0,21,34,3,0,16,2,0,47,18,59,3,0,37,28,0,36,30,2,0,42,29,37,45,68,3,43,2,0,33,79,2,0,47,68,12,2,0,40,38,66,3,12,2,0,61,24,22,0,53,70,14,3,0,22,21,21,0,25,34,30,32,37,0,75,94,80,58,0,38,82,3,0,47,83,17,16,0,40,47,14,12,58,5,41,12,3,0,33,19,34,58,3,0,15,2,0,61,85,45,3,0,0,70,35,33,0,25,27,27,0,38,45,3,0,17,16,0,40,33,41,12,3,0,33,58,3,0,15,2,0,52,43,19,3,0,51,45,3,0,35,54,3,0,23,39,3,0,28,46,32,0,24,72,39,3,0,41,47,3,0,68,2,0,23,0,25,24,0,42,37,54,78,64,60,20,0,31,33,5,32,33,5,0,31,51,5,0,32,51,5,0,32,76,5,0,21,24,5,0,40,44,78,0,31,74,7,5,0,21,37,36,7,5,18,4,0,19,2,0,26,0,23,32,24,0,63,18,0,27,27,0,34,22,75,3,0,27,30,31,53,7,12,30,74,86,7,5,3,33,2,0,41,77,0,37,20,0,19,25,0,65,19,18,5,0,38,60,13,5,0,84,40,13,5,0,40,44,0,68,132,7,0,41,31,43,7,0,39,22,13,5,0,45,27,21,0,77,27,26,5,0,49,32,0,60,36,23,17,7,0,35,50,17,7,0,49,55,17,7,0,24,26,7,5,0,17,4,0,36,2,0,24,0,19,24,0,11,22,22,0,20,32,32,32,32,0,37,38,0,29,0,26,30,23,31,29,38,38,26,26,27,24,33,26,37,32,34,25,33,39,37,40,32,45,28,25,34,40,38,41,30,34,26,26,31,34,54,2,0,32,0,3,12,3,0,7,13,25,24,21,19,32,33,32,33,35,36,28,28,22,31,16,0,3,8,3,0,42,34,45,3,0,27,99,27,93,3,0,47,20,18,17,19,28,16,16,12,0,5,12,5,0,39,24,54,25,5,0,63,31,13,5,0,27,24,21,16,16,4,0,24,0,26,36,22,0,7,20,7,0,83,15,5,0,7,20,7,0,35,85,15,5,0,7,42,7,0,46,50,15,5,0,7,31,7,0,45,17,15,0,52,22,0,48,21,19,9,0,38,29,19,9,0,49,21,0,31,18,11,9,7,0,36,15,5,0,7,18,7,0,42,49,24,36,15,5,0,43,35,38,17,7,26,36,38,15,5,0,7,20,7,0,96,23,15,0,40,19,7,0,52,38,36,19,9,0,28,57,16,9,0,22,7,0,36,15,5,0,7,28,7,0,42,14,0,87,19,22,19,21,15,14,18,18,17,8,0,26,24,36,15,5,0,7,29,7,0,43,35,38,17,7,0,25,26,25,0,28,14,0,38,15,5,0,7,17,7,0,44,29,25,39,74,7,0,37,21,15,5,0,7,15,7,0,64,33,0,49,38,17,7,0,32,25,28,28,0,67,31,27,29,19,9,0,23,24,17,7,0,34,23,0,51,43,22,23,17,7,0,35,15,5,0,7,11,7,0,34,3,0,51,6,24,0,32,35,26,55,57,46,30,9,9,0,73,43,46,52,52,5,29,0,24,13,2,0,24,0,32,26,24,26,0,3,64,2,8,36,70,55,6,24,28,19,14,3,0,43,18,0,29,32,53,34,31,14,28,7,5,10,56,3,0,71,34,3,16,2,0,3,50,2,8,41,41,20,6,49,26,34,14,3,0,66,0,3,55,2,8,36,43,53,6,48,28,55,14,3,0,47,34,64,3,37,2,0,3,70,75,2,8,36,44,21,6,48,28,55,14,3,0,45,34,43,3,33,2,0,3,70,72,90,56,2,8,36,43,27,6,42,28,55,14,3,0,44,34,43,3,0,38,0,42,33,36,3,0,39,33,34,3,0,16,2,0,3,65,77,64,2,8,36,72,67,6,42,28,55,14,3,0,44,41,19,3,0,31,38,38,2,0,3,18,3,0,24,0,28,26,40,24,56,0,3,68,2,8,36,36,2,48,18,6,65,90,62,46,17,14,3,0,51,33,25,0,23,23,24,20,0,27,28,38,30,5,4,0,45,83,72,29,0,28,40,0,63,27,0,20,33,14,36,33,7,5,3,0,70,55,0,40,36,71,5,0,63,83,5,3,0,17,2,0,3,26,3,0,34,0,3,74,81,33,2,8,36,37,2,41,42,41,6,41,28,49,14,3,0,75,0,3,85,2,8,36,46,2,60,52,6,44,82,65,61,14,3,0,87,0,3,26,3,0,40,0,3,81,2,8,36,40,2,53,22,6,51,81,101,88,14,3,0,54,45,25,17,0,27,50,29,4,0,80,0,27,29,23,5,3,21,2,0,3,73,76,2,8,34,46,2,46,12,46,13,6,45,69,101,83,14,3,0,52,32,71,3,0,31,69,3,0,36,55,19,5,0,92,18,5,3,0,76,2,0,3,68,82,31,2,8,36,48,2,45,40,19,6,59,82,101,83,14,3,0,54,31,71,3,63,15,44,13,2,0,3,98,2,8,36,41,2,67,10,57,11,6,116,82,101,88,14,3,0,50,30,0,44,56,44,18,5,3,15,2,0,3,59,36,2,8,36,42,2,47,10,57,10,68,11,58,11,6,71,82,101,88,14,3,0,51,30,0,44,56,46,19,5,3,14,2,0,3,56,24,2,8,36,42,2,45,10,2,54,11,2,53,10,2,65,10,6,50,82,101,61,14,3,0,48,32,71,3,0,70,2,0,3,104,2,8,36,45,2,55,15,55,12,6,59,42,101,109,14,3,0,50,41,78,72,0,14,58,3,2,0,3,61,2,8,36,36,2,34,49,6,64,28,67,14,3,0,63,0,3,66,33,2,8,36,45,6,28,28,42,14,3,0,59,0,3,65,14,2,8,36,46,6,25,28,106,14,3,0,45,15,50,57,48,5,3,13,2,0,3,37,2,8,44,42,29,2,60,49,6,66,144,18,14,3,0,45,76,73,21,3,36,2,0,3,16,3,0,50,76,68,2,0,3,20,3,0,32,0,65,709,29,35,33,25,28,42,53,65,54,48,50,48,2,45,51,8,111,52,84,8,26,22,6,8,121,51,8,83,21,6,138,21,6,80,21,6,74,21,6,18,2,47,38,52,36,22,6,75,36,22,6,78,61,2,45,68,2,63,45,26,2,63,38,58,2,49,38,40,2,49,41,47,2,53,43,47,2,55,4,70,3,12,26,76,4,55,86,2,81,4,80,3,12,25,76,4,56,63,2,83,54,67,2,81,37,62,2,47,32,41,2,37,42,47,2,57,50,47,72,2,73,54,54,65,12,2,79,41,40,22,22,8,2,55,45,106,8,61,53,8,30,27,6,8,91,56,8,36,38,27,6,18,2,45,36,48,2,27,50,64,2,53,39,66,2,30,0,18,0,2,9,39,2,37,34,3,28,39,36,0,24,0,22,26,37,22,38,0,67,15,10,17,3,0,38,49,35,30,3,38,38,3,44,0,25,59,61,5,18,15,3,0,27,18,12,5,19,0,39,19,34,12,5,34,26,5,0,40,0,22,29,14,7,22,20,5,0,28,25,56,44,26,50,9,15,7,30,40,7,26,45,21,7,0,42,30,0,24,36,7,0,48,34,22,5,0,46,23,5,0,11,3,0,25,20,49,36,16,25,5,3,0,34,31,47,35,5,0,20,32,3,21,1,0,36,42,32,46,50,51,5,69,60,5,20,10,57,53,5,3,16,1,0,64,25,25,28,42,34,76,8,77,75,25,2,26,49,55,1,0,18,0,64,47,27,38,2,30,28,25,2,29,0,63,120,23,23,23,23,19,19,23,23,27,27,27,27,27,26,0,61,229,25,40,60,87,117,119,103,104,45,2,27,4,55,3,110,95,4,63,22,106,104,104,102,97,7,116,124,8,46,103,6,11,100,6,18,2,55,41,58,2,49,59,83,77,21,2,69,50,22,54,64,34,44,10,15,42,10,27,15,2,67,68,49,83,8,2,65,72,13,17,18,18,14,94,7,2,60,0,18,0,64,63,4,122,90,69,4,42,31,71,2,32,4,69,128,4,43,52,2,57,0,17,0,17,0,15,0,17,0,17,0,15,0,17,0,15,0,17,0,62,22,43,52,34,56,19,9,70,51,19,9,53,37,62,63,27,17,55,23,13,44,49,13,50,11,7,1,22,49,20,1,50,27,1,0,16,0,61,21,33,46,66,21,5,9,48,40,45,9,20,5,19,55,25,9,20,5,1,21,0,20,0,14,0,21,63,72,32,32,21,19,29,26,3,46,35,44,6,85,2,59,10,0,65,18,18,32,33,89,65,86,113,5,30,69,5,1,32,0,60,54,24,22,32,38,62,60,73,15,5,77,1,20,44,54,39,1,26,48,60,33,5,55,1,0,88,0,12,0,59,80,51,52,13,54,0,85,0,32,0,42,0,34,29,20,0,29,17,27,10,30,17,26,3,0,23,21,31,16,5,38,15,3,0,34,24,33,16,5,3,0,17,12,15,20,13,33,69,7,10,12,38,61,7,3,0,17,1,0,21,0,66,56,68,97,125,1,73,73,35,35,68,124,3,43,3,102,0,17,0,14,0,59,36,23,30,25,61,69,57,47,47,51,63,5,1,45,44,1,51,0,62,20,18,18,0,18,0,63,35,46,7,107,7,32,21,5,29,1,47,0,62,71,23,26,34,24,26,48,78,62,15,5,45,1,22,64,88,36,58,19,9,50,19,30,98,12,44,53,19,9,80,46,36,58,23,13,56,11,7,1,54,44,22,45,30,19,9,60,37,62,36,27,17,34,23,13,79,30,11,6,1,51,61,36,58,19,9,43,99,30,80,41,36,31,21,35,29,29,77,22,41,44,21,38,19,14,11,43,36,58,23,13,53,11,7,1,28,49,20,1,50,27,1,0,16,0,61,68,23,32,24,26,38,76,57,5,42,1,21,52,80,36,23,19,30,98,10,76,17,63,83,13,27,62,32,17,13,9,21,7,1,51,41,53,32,100,76,23,17,28,65,10,29,32,9,21,7,1,27,0,20,0,14,0,21,63,72,32,32,21,19,29,27,25,32,3,46,35,44,6,85,2,59,10,0,65,28,23,18,18,32,33,92,65,99,64,113,53,57,24,79,11,5,30,69,5,1,32,0,60,60,22,22,32,38,63,60,71,15,5,75,1,24,47,54,39,1,32,48,60,33,5,55,1,0,26,0,34,31,18,0,19,23,0,23,26,12,31,18,5,0,24,0,18,3,0,26,20,15,3,0,10,13,20,3,1,0,26,0,27,0,24,0,51,38,25,21,19,3,0,24,67,3,0,28,23,23,19,26,0,14,15,18,22,17,18,29,21,19,15,19,23,21,18,15,31,16,4,0,13,0,23,19,3,0,21,23,3,0,22,28,20,0,21,29,16,5,0,18,3,0,24,28,19,0,21,32,29,5,0,16,3,0,22,28,24,48,17,16,5,3,0,20,48,3,0,31,30,0,30,30,26,38,40,0,55,22,33,28,14,28,28,25,7,12,17,58,5,3,0,34,30,0,30,30,26,38,0,55,22,33,28,14,28,28,25,7,12,17,58,5,3,0,29,17,28,5,25,15,25,38,27,9,30,25,54,33,23,9,14,19,7,34,19,5,3,0,20,21,21,24,3,0,28,21,21,17,24,3,0,28,27,3,1,0,21,0,18,20,25,19,24,22,27,0,18,0,47,33,41,25,22,27,28,29,5,45,23,4,1,0,57,38,25,21,19,3,0,35,26,28,22,13,3,0,60,0,26,32,0,20,26,26,0,14,0,25,52,44,18,22,16,9,24,9,7,0,38,47,39,20,0,12,3,0,28,52,47,18,22,16,9,24,9,7,0,38,47,39,20,0,12,3,0,23,36,0,44,33,24,18,8,7,0,12,3,1,0,26,40,0,18,0,63,125,40,40,20,5,40,1,37,41,44,1,43,59,51,1,67,44,19,17,5,7,107,7,32,21,5,29,1,45,0,18,0,63,26,16,35,27,35,97,5,1,28,0,62,30,26,28,26,28,46,35,32,35,44,52,81,35,34,35,38,42,13,10,5,12,35,34,28,67,11,29,5,23,33,5,15,32,63,9,33,35,5,23,44,5,23,46,5,21,44,5,35,46,48,33,41,13,11,5,25,93,33,39,23,13,42,52,13,34,11,5,25,81,19,9,34,33,43,5,31,54,19,9,36,33,106,9,74,35,9,103,85,9,5,23,43,5,1,30,0,62,26,21,35,27,35,73,27,5,20,41,49,11,41,38,11,34,57,11,28,5,1,32,47,20,1,49,28,1,0,18,0,63,32,26,22,35,27,35,73,48,29,28,28,48,43,17,13,11,5,12,41,46,11,41,37,11,34,36,11,28,28,5,1,34,0,16,0,16,0,61,26,26,28,45,19,28,48,27,32,5,12,63,28,29,5,35,45,5,20,50,61,9,5,39,13,87,42,47,13,9,23,37,9,5,25,60,19,9,20,5,31,36,33,106,9,74,39,9,103,85,9,5,27,34,5,1,28,0,61,24,20,35,27,35,72,5,12,35,5,1,30,0,20,0,65,28,24,16,32,33,74,95,73,75,75,99,57,67,33,69,39,88,11,5,30,69,5,1,30,0,60,73,26,28,24,32,38,67,60,90,15,5,94,1,20,49,52,63,27,1,26,51,52,65,27,1,30,46,60,33,5,55,1,0,16,0,62,29,24,25,15,29,36,55,68,35,79,12,6,34,61,6,33,24,27,27,69,11,36,33,10,22,6,27,90,6,2,24,0,18,0,64,33,24,24,27,48,20,29,48,36,6,29,48,6,32,70,73,49,78,35,68,40,18,54,34,18,24,15,30,11,53,29,10,23,6,44,39,62,32,46,29,14,25,12,6,25,50,75,72,16,12,6,2,32,0,63,24,27,29,47,20,29,41,69,6,29,50,65,38,38,18,23,35,18,16,12,6,38,28,69,65,50,42,63,56,12,6,2,30,0,18,0,14,0,17,0,17,0,63,25,16,60,36,36,54,28,29,6,21,12,121,84,12,91,42,64,72,33,48,25,26,25,16,10,6,35,89,37,84,28,25,36,34,19,14,21,31,31,81,15,12,6,43,128,6,2,26,0,63,27,49,22,43,37,106,42,49,16,106,77,15,33,44,15,64,29,14,57,57,71,33,18,68,33,18,30,16,25,29,14,10,22,6,2,33,0,60,25,27,19,49,36,54,6,46,52,66,78,6,28,89,6,39,109,107,6,52,59,26,10,50,26,10,75,68,26,10,72,6,44,12,72,12,48,26,10,80,6,42,60,31,35,10,58,47,6,36,85,6,55,75,6,58,65,6,2,26,0,17,0,63,25,20,49,36,54,32,6,36,99,99,71,6,45,70,26,10,79,26,10,81,26,10,81,56,151,50,44,10,26,6,31,43,6,32,47,6,29,67,6,34,78,6,66,40,26,10,83,63,6,61,74,62,74,80,79,41,73,10,26,6,2,30,0,17,0,63,25,20,29,36,6,18,56,6,30,88,6,2,30,0,15,0,61,25,25,29,36,6,23,50,6,24,35,39,80,55,10,76,29,10,42,29,10,76,6,2,33,0,64,29,21,25,25,23,17,29,36,64,94,92,69,6,30,62,6,30,61,17,22,39,53,91,83,55,69,35,41,91,62,11,6,30,17,37,53,53,56,44,50,25,33,11,6,2,28,0,63,27,31,51,20,29,62,6,23,51,54,61,65,6,31,28,56,10,60,6,2,32,0,16,0,62,33,27,31,52,20,29,61,6,17,51,54,54,92,15,72,87,57,20,52,28,6,31,28,56,10,60,6,2,32,0,16,0,16,0,62,22,22,25,44,20,29,42,42,6,29,46,6,32,28,42,62,70,65,26,14,33,10,24,6,44,14,51,52,10,24,46,29,14,25,10,6,25,63,6,2,28,0,62,25,29,48,20,29,61,6,17,51,54,55,47,6,31,28,56,10,60,6,2,30,0,18,0,21,64,47,33,24,5,97,101,5,50,41,22,30,20,28,26,33,4,18,34,35,72,82,83,91,82,70,67,62,69,93,65,71,65,86,76,86,73,66,84,116,67,37,37,11,27,37,11,7,32,55,7,43,96,7,3,28,14,0,27,33,25,25,23,29,23,43,33,62,45,40,2,68,41,23,37,37,65,43,6,26,39,37,67,12,90,110,81,12,42,6,30,46,37,70,58,57,6,44,49,37,58,65,6,50,34,37,42,6,38,33,48,66,54,60,46,47,2,38,37,110,26,93,6,2,19,0,14,0,21,63,77,27,32,23,46,40,13,24,27,25,29,26,30,7,2,45,20,25,45,66,32,60,37,38,20,65,2,41,22,24,23,24,36,7,4,27,80,2,42,19,31,52,39,29,29,20,68,7,41,52,42,23,119,10,44,160,10,8,17,2,38,51,27,138,2,53,53,52,22,55,58,13,20,12,2,38,19,62,2,39,17,71,38,53,2,36,124,13,51,69,29,30,30,15,75,75,22,56,18,29,30,18,73,51,51,65,74,47,53,52,31,22,30,18,55,56,30,31,43,47,18,23,55,69,18,44,23,14,66,40,38,11,31,40,67,55,46,47,47,68,43,60,35,62,39,20,14,29,30,35,15,51,52,35,39,39,35,20,36,28,50,92,11,7,2,31,40,124,13,45,69,29,30,30,15,75,75,22,45,18,29,30,18,51,67,51,59,74,47,53,52,31,22,30,18,55,56,30,31,43,47,18,23,55,63,18,44,23,14,66,40,38,11,25,40,67,55,46,47,47,62,43,54,35,62,39,20,14,29,30,35,15,51,52,35,39,39,35,20,76,92,11,7,2,39,10,0,39,40,35,37,43,35,47,90,91,86,88,96,86,31,41,34,21,21,28,9,17,1,23,41,34,23,21,26,21,28,9,17,1,88,16,23,64,5,39,13,104,23,44,20,5,1,0,38,39,39,3,46,2,71,43,73,74,32,32,48,2,72,53,79,14,52,79,69,78,78,24,2,71,72,75,79,81,77,51,3,33,42,27,80,28,33,5,8,56,1,66,63,35,43,24,52,22,30,26,43,55,39,37,48,5,35,35,52,57,67,43,31,40,35,43,44,27,17,13,9,32,52,62,31,31,37,32,66,31,31,37,34,9,5,16,1,3,53,2,71,43,73,74,32,32,48,2,72,61,53,79,14,52,79,69,78,78,24,2,71,72,75,79,81,77,51,3,42,42,27,91,28,33,5,8,67,1,66,63,35,43,27,52,25,30,29,54,61,39,37,53,5,35,35,52,57,78,43,31,40,35,43,44,27,17,13,9,32,52,73,31,31,37,32,77,31,31,37,34,9,5,16,1,31,38,64,30,32,30,33,29,29,31,34,30,34,36,35,20,5,19,1,48,38,40,20,46,20,46,21,47,25,49,22,48,21,1,39,41,33,33,5,30,26,30,12,32,5,34,31,5,10,56,65,5,1,0,21,15,15,15,15,15,14,2,78,18,29,11,86,65,11,29,41,28,68,68,5,13,58,38,20,5,7,77,71,7,18,57,36,23,43,22,23,44,29,62,34,18,70,22,9,19,5,7,71,33,7,24,34,86,66,40,9,50,35,23,26,41,82,41,37,17,47,43,28,13,27,42,41,82,33,17,40,61,48,32,17,22,63,79,33,17,13,20,62,29,9,5,7,76,6,79,51,7,30,27,43,32,50,24,9,32,49,56,83,28,13,50,59,28,9,66,20,55,41,19,55,27,39,52,20,5,7,69,61,7,20,67,39,76,9,50,5,19,40,53,17,53,21,67,28,51,45,42,15,41,9,12,26,52,67,25,67,55,9,32,5,1,61,56,0,3,50,2,24,3,32,45,42,86,29,5,16,1,28,30,19,27,28,41,9,7,19,1,79,41,32,37,31,24,5,1,41,28,36,27,12,31,38,29,47,62,36,26,10,11,79,80,39,11,27,48,54,46,33,73,49,17,22,106,42,32,17,13,10,21,6,1,0,30,25,21,29,44,19,64,13,11,5,7,69,56,7,18,30,22,35,34,41,48,33,13,11,21,5,23,17,43,52,41,22,101,42,9,41,32,46,81,42,9,33,28,38,70,63,91,46,13,9,24,5,45,38,18,39,80,105,37,13,32,33,9,19,5,1,44,24,41,64,61,5,36,22,40,56,26,26,9,21,5,28,57,59,32,5,13,1,0,3,68,2,33,64,26,73,68,21,3,32,67,29,60,54,69,38,42,65,37,31,27,32,10,43,25,30,19,5,48,29,17,1,0,102,31,24,24,27,5,22,67,5,16,34,5,1,37,39,23,37,37,0,46,46,18,58,62,20,56,22,5,60,1,42,26,31,22,21,24,72,30,19,5,34,34,35,93,7,61,32,5,85,79,80,24,70,39,18,28,45,41,9,14,47,42,9,5,34,54,60,18,58,73,35,9,50,43,20,32,24,9,16,32,29,50,33,34,5,19,25,28,5,35,51,28,16,27,12,24,16,1,0,50,18,48,26,69,25,21,18,9,14,34,9,5,37,37,29,25,76,10,15,32,7,1,70,71,45,72,35,31,20,47,26,31,30,26,11,5,7,40,6,67,7,19,104,19,33,92,23,44,20,5,7,78,80,38,7,24,30,28,14,40,45,37,40,55,76,16,95,9,5,7,43,57,7,20,36,30,36,41,33,39,12,91,5,7,77,80,55,7,29,36,41,30,71,12,83,5,35,41,30,29,33,32,31,36,38,39,33,29,11,5,7,68,7,17,36,30,33,41,63,5,7,74,51,7,24,36,32,33,9,14,45,37,40,55,76,16,95,9,5,1,46,0,3,25,2,38,58,47,3,70,41,30,36,68,1,64,36,28,47,51,0,25,27,29,3,80,76,50,3,135,36,20,81,31,20,21,28,40,44,69,26,12,44,5,26,25,25,15,22,20,30,46,21,30,5,42,50,25,34,25,27,26,25,27,26,25,27,26,24,27,13,23,9,26,36,54,30,30,9,14,29,23,31,32,32,86,41,75,30,13,27,28,38,42,38,17,48,78,59,34,44,40,21,83,68,96,40,36,34,43,38,38,17,22,36,17,13,9,18,5,31,21,27,20,15,17,38,44,30,48,23,53,14,59,41,61,9,5,15,1,3,45,56,3,44,25,39,12,32,36,25,5,13,1,0,34,37,37,48,3,80,42,69,60,36,21,43,30,24,21,49,30,34,28,26,40,29,9,5,16,1,41,39,39,20,32,74,77,17,18,55,72,72,48,19,22,22,9,24,34,25,21,52,59,39,40,45,38,40,45,38,40,45,38,40,45,38,40,45,38,40,45,38,40,45,38,40,45,38,36,63,66,36,61,25,31,38,21,26,25,38,46,59,31,21,26,57,61,54,50,50,40,35,25,38,83,48,40,31,38,21,26,24,27,13,5,49,22,13,71,1,41,44,52,118,5,46,77,87,26,13,69,1,35,40,11,30,32,10,46,46,36,36,41,36,12,71,5,26,1,77,65,74,77,72,40,5,32,76,44,14,65,19,43,22,72,15,39,54,14,17,61,39,53,18,5,40,39,26,29,5,60,28,24,26,5,10,27,5,14,44,41,35,57,5,64,31,17,24,61,35,23,34,29,34,12,18,5,86,16,46,53,5,59,84,18,74,22,24,5,18,53,60,5,17,32,111,98,40,98,41,1,57,33,62,52,45,40,5,17,106,23,37,72,42,49,32,61,38,61,5,23,18,32,31,92,62,5,57,36,62,5,55,79,83,26,23,104,48,50,44,5,22,13,69,1,61,40,45,14,65,24,39,74,77,39,5,35,24,37,38,44,96,67,37,57,37,57,30,68,20,28,9,6,31,23,66,71,28,25,68,5,15,1,0,47,31,25,40,29,35,25,34,43,26,24,22,28,24,26,26,24,30,44,15,34,21,27,18,20,26,18,16,26,5,12,27,12,19,83,15,20,6,1,35,19,59,29,73,5,27,12,27,25,58,16,84,5,10,19,75,5,18,58,62,5,18,1,80,57,24,18,21,77,42,28,33,5,73,12,50,27,1,57,21,58,24,31,38,45,91,9,14,36,46,16,54,41,9,5,27,29,14,68,16,57,52,25,72,54,61,26,64,57,15,19,63,27,42,1,0,69,110,58,21,25,80,9,34,85,33,9,5,36,16,59,34,28,87,44,34,29,68,35,7,31,26,93,59,23,108,27,5,21,45,44,28,69,9,5,80,25,44,75,9,42,26,19,5,23,26,22,23,75,37,5,10,24,23,75,5,17,28,24,30,23,34,58,56,9,37,5,50,38,5,28,57,43,22,21,33,22,23,23,22,21,24,86,42,5,33,104,17,28,43,45,12,41,5,53,64,45,35,5,53,16,25,21,42,24,5,49,73,5,40,22,5,15,1,0,34,54,66,41,12,34,5,1,0,23,51,51,64,25,41,43,38,35,43,12,42,5,10,41,33,52,9,38,27,9,14,60,56,33,55,35,35,37,38,19,16,41,9,5,15,1,48,23,34,50,77,75,72,77,75,75,58,40,74,23,69,49,40,33,30,36,9,38,25,9,67,45,22,31,33,34,15,9,5,15,1,40,23,18,34,29,40,59,35,46,44,29,37,44,32,49,36,60,176,36,9,22,5,33,1,0,38,46,48,26,1,12,36,64,23,27,5,19,34,24,36,26,40,36,5,20,52,47,5,43,23,62,35,5,1,0,56,47,80,47,1,128,55,79,66,21,44,30,27,27,47,31,72,29,39,9,32,58,21,49,35,74,13,9,26,95,20,72,33,30,42,5,12,29,46,5,10,23,48,34,54,9,5,18,68,22,24,5,38,22,15,1,97,67,29,44,27,21,18,7,27,25,21,44,30,27,27,33,31,68,29,39,9,32,58,21,35,35,70,31,38,13,62,21,31,41,37,38,13,62,37,13,9,20,30,69,33,23,20,72,79,30,24,36,5,12,37,29,26,5,10,26,78,72,9,25,24,37,71,39,9,14,55,9,5,18,64,22,24,5,15,1,94,29,46,18,65,72,5,1,0,31,48,29,25,47,26,57,26,9,5,21,1,34,25,27,24,5,26,39,5,7,38,6,79,73,7,26,18,25,25,73,49,48,9,12,51,53,56,19,27,64,72,69,47,16,41,9,31,81,25,39,16,47,9,14,35,9,5,17,45,16,25,65,30,5,26,45,31,82,5,14,43,5,21,45,5,7,73,72,48,7,26,71,26,30,38,43,19,5,43,17,40,40,30,102,9,63,66,47,32,48,41,24,21,11,5,1,0,38,44,36,33,43,51,68,19,49,56,6,29,39,28,5,46,43,31,5,54,46,5,15,1,13,22,26,18,23,33,27,24,55,19,5,2,0,34,25,27,24,5,26,39,5,16,31,5,7,43,6,77,39,6,57,7,17,37,36,25,46,30,5,26,37,36,29,35,61,5,7,68,6,77,39,7,14,37,66,5,7,74,51,6,81,39,7,21,37,36,67,37,53,31,12,36,5,20,23,26,30,18,38,51,19,5,43,17,40,47,34,48,50,24,21,11,5,1,27,48,39,26,71,13,15,1,0,38,29,36,48,18,29,49,66,49,13,59,9,5,15,1,13,22,26,18,23,33,27,24,56,19,5,2,0,16,49,18,33,24,50,57,66,5,2,0,17,37,39,18,34,34,36,91,16,29,2,0,17,50,18,34,46,65,39,50,62,29,30,9,66,5,2,0,69,34,29,66,23,64,34,18,28,54,24,31,20,25,21,9,55,23,21,5,13,1,0,20,49,18,35,53,57,13,24,38,39,30,2,20,49,18,35,18,67,36,21,39,75,5,2,17,49,18,35,47,18,49,37,54,58,20,6,30,2,0,86,131,46,27,43,46,33,1,18,58,18,33,18,23,66,52,2,15,28,18,33,26,67,30,2,18,58,18,33,18,29,67,53,2,0,18,8,8,11,12,12,13,10,13,15,15,11,2,0,31,64,1,59,21,5,53,22,37,28,32,6,5,41,43,22,38,23,28,32,6,5,54,22,38,29,39,32,6,5,32,22,37,38,99,97,6,5,53,22,39,71,40,32,5,2,19,18,12,14,27,66,19,5,2,59,0,16,51,19,36,7,61,6,81,6,64,73,7,27,43,46,9,46,53,57,54,48,46,26,9,14,112,23,9,6,70,66,16,43,17,37,44,65,9,46,23,48,49,26,9,14,120,9,18,40,43,111,56,39,64,52,13,73,9,91,5,2,0,37,21,52,36,29,25,35,42,78,73,39,67,76,45,35,54,43,58,39,17,28,13,64,9,5,8,52,15,1,45,29,38,42,14,56,34,47,62,27,36,38,32,34,17,20,78,13,50,45,40,34,36,17,20,80,13,18,25,13,58,9,17,1,15,22,19,35,26,27,2,0,32,19,16,52,58,52,52,52,32,5,7,78,75,7,20,17,35,30,26,30,40,27,31,46,51,13,18,42,13,29,80,32,9,19,5,1,40,14,22,44,24,19,34,27,49,28,44,34,51,90,17,22,45,17,13,9,52,6,39,57,36,33,20,5,2,0,48,47,44,22,62,1,17,38,18,34,55,36,28,2,18,39,18,34,58,37,28,2,0,18,49,18,35,49,59,13,24,38,39,30,2,18,49,18,35,18,66,56,21,39,75,5,2,15,49,18,35,46,18,67,37,25,63,40,50,9,20,6,30,2,0,84,58,24,37,20,50,22,24,19,33,22,19,33,22,20,33,22,9,30,49,5,35,37,1,44,27,29,42,71,5,33,1,16,26,18,33,18,29,64,50,2,16,26,18,33,18,28,64,49,2,13,26,18,33,32,65,30,2,16,26,18,33,18,35,65,51,2,0,31,25,22,31,5,14,17,24,23,43,27,29,31,43,12,39,52,18,34,5,7,64,55,7,24,47,40,34,32,26,19,5,21,39,109,47,29,59,9,34,43,9,5,20,41,5,43,17,40,40,107,12,67,5,1,38,13,22,44,23,19,33,27,25,43,57,16,63,9,12,55,19,6,39,33,40,60,41,51,66,61,13,19,5,2,0,78,42,24,72,56,21,26,19,60,48,1,3,17,2,74,3,37,25,23,34,29,46,37,18,20,19,25,5,24,57,21,55,5,10,41,46,26,45,42,9,5,18,13,61,22,66,6,1,17,76,18,33,19,49,84,35,2,19,49,18,35,19,58,49,35,2,19,45,18,39,98,94,51,72,35,49,80,76,15,18,48,19,84,77,79,97,28,31,48,33,24,30,9,30,6,87,2,0,16,8,8,11,12,12,13,11,11,8,11,13,13,10,11,9,10,8,12,14,13,2,0,25,23,37,23,23,24,3,20,11,18,19,25,25,14,15,21,21,12,8,18,9,10,8,8,13,2,23,39,35,37,33,44,2,42,39,16,38,22,14,51,48,48,28,109,9,5,36,37,36,5,48,40,5,28,36,23,39,19,26,44,44,24,75,7,1,0,81,14,108,43,39,20,39,23,29,69,63,51,56,57,65,57,30,29,48,32,41,41,27,5,13,93,38,20,5,1,0,42,21,52,57,49,18,28,33,9,41,33,5,22,26,53,42,28,31,30,52,45,5,26,30,23,35,58,31,45,69,50,13,83,49,50,9,82,94,27,73,51,48,83,42,52,9,12,29,5,10,51,5,33,26,50,36,34,50,13,18,40,13,9,14,30,9,5,10,29,28,40,17,81,31,61,9,5,35,1,0,3,76,74,56,2,56,3,47,41,33,61,34,69,37,34,35,32,13,9,38,53,38,61,37,34,35,35,13,9,38,47,62,37,35,37,35,32,17,13,9,14,56,61,37,34,35,32,13,9,5,39,1,0,16,43,45,34,56,28,49,25,51,27,63,29,72,33,9,53,31,33,9,35,31,36,29,31,25,29,26,20,27,30,35,63,46,55,9,12,58,41,32,33,14,71,9,5,7,60,6,93,7,13,56,39,11,48,36,42,46,55,28,54,42,45,46,28,23,44,20,5,40,16,44,37,5,40,24,44,45,5,7,90,6,58,64,73,63,77,7,29,27,43,25,88,82,9,38,5,42,34,45,60,33,9,43,104,64,33,50,33,9,53,31,33,9,106,80,80,29,21,65,50,21,21,32,32,25,10,49,41,29,21,20,5,7,72,73,7,42,54,56,30,5,7,41,57,7,17,83,5,7,41,57,7,20,32,38,29,33,24,9,46,42,20,5,7,77,80,55,7,26,44,48,24,5,7,78,80,55,7,29,30,59,37,32,44,51,24,5,7,66,7,14,78,5,7,57,7,17,30,47,81,5,7,72,51,7,21,36,74,9,51,42,9,5,7,72,51,7,24,30,34,41,85,9,51,45,9,5,7,63,93,85,6,51,7,38,40,38,16,26,23,36,57,20,73,83,22,23,24,36,59,20,66,79,22,22,36,43,27,22,22,51,101,13,9,65,45,41,21,66,12,99,5,49,78,21,31,22,24,40,32,83,34,10,60,43,62,37,44,57,18,5,7,56,6,77,23,7,31,77,5,49,28,35,74,34,81,53,84,9,48,5,1,37,33,20,71,1,0,31,43,16,25,25,31,23,5,1,40,37,52,5,1,37,37,49,5,1,47,28,15,58,43,55,21,21,64,33,65,42,65,53,28,5,28,49,65,60,49,83,29,49,33,5,31,22,37,56,53,9,59,57,5,2,0,91,28,35,34,21,24,27,36,25,22,19,21,21,21,33,23,41,43,39,127,29,9,29,25,69,66,72,28,32,48,45,91,32,22,29,30,125,60,29,33,20,47,32,34,22,13,27,32,32,48,24,43,17,20,47,33,34,34,47,32,22,26,27,93,47,122,31,35,41,34,33,32,22,25,24,87,28,35,41,34,33,32,22,13,27,67,34,117,26,112,30,34,33,22,25,27,30,86,34,38,37,26,17,31,20,85,34,33,9,5,43,65,19,15,32,34,32,55,118,12,14,14,20,16,19,28,15,12,12,27,6,1,0,31,13,20,23,21,22,36,36,42,28,24,41,46,36,25,31,41,42,46,36,27,44,50,40,73,32,13,25,16,24,5,1,0,47,41,30,36,57,34,81,50,9,5,1,0,42,39,29,21,52,20,30,29,32,38,57,57,1,0,70,79,40,19,27,27,38,52,25,46,42,34,19,20,32,11,44,26,22,45,120,69,63,13,60,51,39,36,63,24,55,17,25,13,71,127,13,9,56,55,9,20,38,27,54,78,30,53,49,74,27,52,39,24,37,20,63,11,32,31,30,74,116,41,68,161,13,26,35,62,80,34,59,40,54,45,41,33,9,14,32,28,110,37,36,65,20,57,13,43,45,41,33,9,5,44,15,1,0,79,40,19,27,27,46,43,38,24,19,20,32,11,27,27,53,56,102,20,89,13,18,51,34,48,25,13,9,26,53,73,30,55,31,29,5,44,15,1,0,53,21,14,29,21,34,43,27,29,36,26,33,46,129,58,33,37,24,44,29,26,17,31,32,38,36,26,24,89,13,36,9,5,31,1,0,77,95,85,42,56,22,33,34,21,30,15,27,52,47,37,52,43,25,42,34,19,20,33,11,27,64,43,90,49,99,36,37,61,24,53,17,35,25,13,69,60,110,9,22,28,86,9,14,29,90,32,41,47,38,37,37,34,39,69,39,32,39,21,17,38,65,37,54,37,63,24,55,88,17,13,9,45,39,67,35,57,78,39,40,31,68,9,14,39,24,39,31,55,79,29,66,31,56,29,43,28,41,24,37,15,35,67,28,47,56,38,56,138,38,29,25,69,168,17,13,29,81,89,20,104,13,26,35,62,34,91,27,28,35,72,13,42,36,65,20,57,13,54,45,41,24,33,57,82,37,13,18,52,32,37,37,13,69,9,5,42,31,23,40,45,10,67,26,54,104,69,41,27,5,24,71,26,29,51,16,43,9,52,5,10,47,5,16,1,0,63,13,25,27,60,18,9,27,60,18,9,33,66,18,9,5,18,20,113,17,20,78,34,54,32,20,5,48,87,15,49,46,76,21,9,14,88,31,24,9,5,100,28,13,26,28,23,20,33,16,1,0,54,32,67,16,84,82,65,55,34,49,36,47,27,12,18,5,34,27,62,56,17,40,26,40,82,5,52,51,47,25,42,43,49,66,43,9,14,45,130,73,13,36,43,29,18,9,53,5,60,58,44,31,5,19,17,33,40,42,54,53,41,53,58,17,43,56,52,37,50,31,93,85,24,9,44,62,23,9,69,58,28,27,55,29,62,23,36,9,34,25,29,30,16,27,9,14,35,22,37,9,5,27,17,18,17,59,62,49,30,18,16,26,5,61,78,1,69,46,50,73,20,5,32,27,19,19,19,45,29,49,23,14,33,29,27,34,35,9,5,21,103,25,21,31,44,31,29,25,32,26,27,46,22,27,42,109,60,17,46,52,22,25,66,46,22,56,22,89,60,40,49,40,13,9,5,52,1,62,29,41,27,35,24,42,22,26,45,45,17,1,0,53,49,14,14,74,19,22,33,49,18,36,40,56,18,36,40,56,18,52,16,100,20,26,27,28,79,14,5,44,58,12,14,20,28,44,6,1,38,21,24,52,18,40,18,17,51,18,17,56,18,17,19,60,18,9,17,19,56,18,9,5,16,83,29,1,45,65,73,62,1,28,7,64,65,6,67,47,7,20,9,63,73,5,15,37,42,5,35,15,22,23,18,30,25,41,30,29,27,16,27,9,14,34,22,9,29,5,32,25,30,42,1,45,17,49,29,50,21,26,60,24,23,9,31,35,41,19,26,37,75,37,53,43,13,63,80,39,53,43,13,68,58,69,28,13,18,52,82,27,13,9,45,39,30,37,49,39,76,71,9,14,22,9,5,65,73,15,1,3,75,37,3,38,18,32,69,55,18,24,25,20,32,5,14,19,28,1,21,14,14,12,14,12,12,12,12,12,16,16,16,16,13,13,13,15,14,2,57,45,65,45,22,58,79,19,5,38,1,0,55,73,64,64,28,102,15,35,76,33,61,35,15,9,114,57,5,19,75,62,35,5,25,26,13,27,16,29,19,35,16,33,18,1,73,24,52,29,36,53,40,40,16,27,9,5,36,34,23,41,31,67,44,85,18,5,111,28,1,77,98,24,89,29,37,53,56,71,60,9,5,15,1,0,51,17,25,32,44,31,30,29,31,31,47,29,13,83,75,29,42,43,33,13,18,9,5,18,1,0,45,50,56,13,26,25,21,53,30,95,18,22,36,36,28,59,23,57,18,25,25,31,67,23,57,18,18,50,31,60,56,88,31,9,5,37,73,20,32,18,59,35,12,41,5,66,51,30,16,1,101,19,23,57,19,18,6,57,17,49,31,77,5,20,32,16,31,16,1,70,49,28,72,35,97,44,66,48,19,35,17,1,0,82,69,46,17,21,35,29,26,6,39,31,32,15,16,28,7,22,39,20,73,30,120,5,24,49,72,45,59,19,33,48,15,1,0,27,32,30,27,57,35,79,1,32,21,26,31,46,34,28,21,26,76,53,33,39,22,21,48,27,34,22,20,86,31,42,34,9,5,39,1,3,65,2,8,42,2,26,41,46,6,3,16,31,24,34,26,25,27,60,44,24,72,16,73,10,80,80,31,5,29,71,60,22,36,27,83,13,72,44,13,77,37,31,32,44,70,13,18,44,70,13,9,23,64,68,9,14,37,41,9,26,25,27,5,7,41,6,61,7,18,16,56,40,32,35,10,5,7,37,6,174,130,7,56,35,36,45,5,49,18,29,29,81,51,37,73,19,48,41,22,30,91,66,107,42,29,35,31,42,22,13,35,25,22,27,27,48,22,27,40,73,36,94,51,44,20,48,22,13,29,32,80,102,26,17,50,125,46,34,48,82,17,47,22,13,20,128,9,5,7,60,6,174,130,7,44,23,42,27,28,9,28,87,54,34,97,50,38,22,9,5,1,0,57,16,50,100,24,47,16,78,10,29,26,40,40,66,32,67,9,5,16,1,3,41,2,121,94,2,102,146,109,55,121,58,148,3,44,97,53,20,53,15,52,7,32,61,6,24,17,19,44,49,57,27,77,14,48,82,81,9,17,81,17,81,16,67,5,1,3,117,2,87,73,2,121,94,2,129,102,108,109,106,148,3,53,82,57,47,20,14,29,40,38,22,40,38,22,34,46,58,67,83,22,13,20,31,9,53,52,72,15,52,7,24,17,17,47,18,17,70,18,17,70,18,16,56,5,1,45,36,41,49,40,38,50,59,29,28,5,10,33,61,23,73,10,79,78,45,51,34,84,5,1,49,41,12,29,30,29,31,35,26,31,35,32,13,17,1,50,25,22,36,36,30,34,18,30,45,35,62,51,34,33,31,56,18,9,25,27,56,87,31,62,18,9,18,65,66,63,44,42,21,49,55,38,64,9,5,1,0,3,54,2,59,58,3,86,32,25,30,25,42,43,38,9,25,27,25,43,43,23,9,33,41,43,43,39,33,23,9,26,43,26,43,37,23,9,18,35,44,43,37,23,9,5,1,52,17,27,25,12,35,12,29,29,14,37,15,1,0,36,37,37,3,45,2,73,65,70,72,46,75,51,77,76,74,74,42,2,72,53,75,20,52,79,77,50,76,79,51,3,30,49,53,44,1,66,63,35,43,20,52,18,30,22,53,35,19,40,34,36,36,9,12,29,5,16,2,3,84,2,103,3,41,60,43,33,32,20,51,2,38,35,33,20,43,34,40,58,101,43,31,38,33,41,45,27,17,13,62,40,9,5,64,1,0,26,23,24,45,34,38,35,44,63,60,73,38,31,48,48,39,26,54,29,20,17,27,22,27,22,32,20,30,16,41,5,1,80,28,21,17,37,22,30,22,36,20,28,19,31,19,29,16,18,20,29,17,34,17,38,17,35,17,36,17,34,17,36,17,34,17,27,5,24,17,18,27,17,29,17,36,17,27,17,28,17,25,17,42,17,42,17,17,41,5,16,1,0,11,17,10,20,20,16,28,20,26,22,38,34,32,24,13,2,0,2,15,0,6,33,29,22,0,8,21,14,18,0,10,18,19,33,0,11,31,35,32,15,0,3,24,15,15,12,27,26,32,36,24,14,37,68,43,0,4,18,16,16,13,28,15,33,28,25,15,38,15,41,0,13,16,25,0,17,35,29,0,26,26,37,29,2,22,17,23,17,18,18,18,24,16,25,5,1,53,111,49,52,71,3,76,47,2,79,41,2,80,23,2,66,70,58,71,3,13,19,11,81,20,11,27,11,84,81,26,11,36,11,83,78,29,11,37,28,25,11,84,38,11,29,59,27,11,81,44,11,28,53,29,49,31,85,25,72,21,5,7,70,73,6,45,7,38,21,70,35,9,33,41,56,47,5,17,25,32,41,34,45,24,24,47,21,5,15,41,5,28,37,34,27,30,52,30,62,60,47,13,83,33,21,9,39,53,83,26,9,22,5,15,34,72,54,34,9,23,71,42,21,52,5,17,50,5,20,54,21,31,26,20,5,13,47,5,22,23,26,49,30,52,31,53,23,51,24,57,33,55,32,54,32,54,9,5,20,34,26,42,30,37,37,9,30,37,41,28,40,46,36,13,26,44,46,32,20,26,13,87,71,31,28,9,31,52,52,38,28,9,23,44,5,23,34,31,46,39,49,50,35,57,41,37,36,29,13,62,41,32,13,9,57,75,47,45,5,24,40,32,47,74,82,51,34,49,9,21,5,22,37,36,26,39,45,26,21,55,26,27,42,52,21,21,41,37,35,30,21,21,35,41,29,21,55,29,21,21,55,21,21,58,50,55,42,54,20,54,9,5,28,19,24,12,43,25,51,47,13,18,23,13,47,30,36,26,40,77,28,69,36,81,77,57,69,39,53,35,35,35,31,52,13,9,18,33,42,46,33,9,42,26,27,30,21,55,30,21,21,41,37,36,30,21,21,41,36,36,55,21,55,30,21,21,36,55,23,44,68,41,45,49,34,17,13,26,20,37,54,9,5,26,37,59,28,62,56,9,14,27,32,26,57,27,32,26,56,13,9,54,49,44,24,31,55,30,26,42,13,28,68,57,13,9,25,28,53,37,9,48,47,5,31,36,37,25,22,40,27,44,43,56,32,22,9,70,5,25,61,23,15,66,25,25,32,26,26,27,31,26,28,52,45,60,38,30,32,24,31,13,9,31,48,40,46,41,16,58,16,55,30,26,51,32,28,32,56,40,13,9,36,16,31,40,32,42,83,49,42,78,27,20,26,27,9,21,46,44,5,25,42,31,29,15,41,29,48,62,26,24,13,35,46,34,40,31,34,50,21,24,32,17,86,26,34,58,34,30,86,17,13,18,66,26,24,13,9,31,48,21,47,39,5,19,20,50,26,21,9,17,5,33,49,16,20,33,28,9,28,21,17,5,23,33,21,49,52,52,21,66,52,52,41,66,23,50,43,87,32,63,42,45,56,56,56,17,13,9,17,5,16,37,33,36,46,38,74,9,14,33,36,24,42,42,38,61,61,47,17,20,26,13,53,9,5,20,41,24,44,56,44,12,21,5,28,29,15,12,34,59,31,20,50,25,9,17,5,22,25,32,25,34,49,5,1,0,3,74,70,20,3,19,19,29,11,63,70,11,67,11,75,77,64,11,36,24,46,32,78,50,34,20,31,13,48,49,26,48,51,58,10,5,1,0,36,41,34,24,17,1,34,43,31,25,27,27,22,20,25,9,5,14,1,29,26,21,22,36,36,31,24,16,25,5,1,31,26,24,32,27,61,38,9,25,63,52,16,22,5,1,35,38,26,18,24,28,31,29,36,33,32,27,27,9,5,41,18,5,39,1,30,45,36,25,28,63,58,27,38,30,44,37,73,24,46,17,20,65,30,13,9,5,1,3,43,2,8,26,49,20,4,6,2,48,2,8,50,32,44,33,24,4,2,26,28,43,20,4,6,3,16,7,82,68,7,28,74,30,52,30,40,24,56,24,52,31,66,24,62,25,60,23,41,33,35,5,7,39,90,6,81,6,97,7,40,48,30,64,37,24,30,5,7,63,7,19,29,28,34,31,41,19,9,39,20,58,85,41,9,37,35,33,33,9,14,29,31,27,31,42,36,39,68,26,29,60,53,26,40,37,36,39,53,26,32,38,27,24,43,13,41,9,5,71,12,37,30,5,23,20,28,32,32,31,10,18,5,13,33,74,41,34,29,32,36,35,15,19,9,17,40,27,28,49,25,26,40,40,47,32,52,29,49,29,54,35,55,27,52,9,52,26,5,13,49,5,17,48,50,21,58,78,9,43,24,9,14,37,48,75,64,13,83,67,33,13,49,39,31,32,38,26,36,51,26,35,63,35,75,46,31,21,38,41,21,26,67,86,31,21,26,17,35,63,33,68,24,41,26,17,41,63,40,75,36,41,24,67,27,17,60,24,38,43,13,43,43,44,77,65,27,32,34,44,59,42,101,48,45,24,62,46,17,13,9,5,15,28,34,86,23,35,25,27,27,39,23,28,31,29,37,40,29,18,46,53,37,23,13,9,15,26,32,68,31,10,5,20,22,44,28,31,58,38,39,17,20,53,23,13,26,23,25,27,27,49,23,9,45,15,32,14,19,30,36,74,35,14,9,5,21,44,52,54,20,29,33,43,34,13,16,41,25,34,38,38,52,14,34,52,9,12,40,5,26,28,25,27,27,52,23,26,44,64,38,32,37,59,38,57,63,21,17,34,22,56,20,34,35,9,5,20,51,68,28,27,39,31,77,86,49,52,24,70,17,34,50,17,22,52,17,23,25,27,31,66,17,34,50,17,22,71,69,53,49,70,55,44,35,25,21,52,17,23,9,40,87,100,27,52,30,57,41,38,39,39,34,37,34,39,55,46,34,32,42,21,17,35,49,13,32,30,27,49,53,50,46,21,38,54,21,26,56,21,27,40,82,56,21,54,53,50,21,26,41,46,48,48,66,27,21,42,27,37,70,38,69,90,29,34,78,49,54,56,56,90,35,29,25,44,94,25,74,45,50,52,52,86,31,25,55,64,74,47,47,55,72,57,45,50,52,52,60,31,25,52,56,76,25,30,58,25,21,26,38,86,25,58,90,25,74,45,50,52,52,90,31,25,30,58,25,21,42,27,29,30,44,46,58,49,68,46,21,38,44,21,26,64,46,21,27,17,26,57,29,41,54,74,54,25,44,31,21,17,13,9,26,27,5,25,51,28,27,31,77,86,49,52,24,70,17,20,52,23,25,27,29,66,22,71,69,53,49,70,55,44,35,25,21,52,17,23,26,23,58,26,48,23,32,47,26,72,66,20,52,23,9,39,49,21,36,23,13,9,26,27,5,25,49,45,20,16,34,35,60,9,39,32,29,40,38,69,24,56,27,37,40,89,36,54,24,82,27,29,31,31,30,27,40,69,36,54,24,56,27,29,30,44,46,58,40,71,36,44,24,64,27,17,36,36,50,27,13,48,56,19,36,18,34,35,13,9,14,40,46,82,47,71,34,35,13,53,52,50,58,36,60,43,29,38,38,38,52,18,38,56,13,18,40,13,9,5,22,29,51,30,49,55,13,9,16,17,32,32,31,10,5,29,28,25,26,40,40,50,39,24,41,40,40,46,30,18,34,34,24,44,40,40,44,30,27,18,32,24,38,40,40,58,18,38,38,50,58,45,24,38,40,40,38,18,13,35,38,50,58,24,38,40,40,74,18,13,9,20,5,38,36,25,34,25,79,5,26,39,27,50,16,48,40,34,9,5,21,28,25,29,27,32,32,33,34,35,22,27,39,26,25,27,20,46,30,53,20,51,44,38,9,5,1,0,32,56,91,41,1,3,49,2,80,2,68,62,73,3,50,64,57,43,68,36,33,67,69,9,24,20,69,1,56,46,64,57,43,66,19,85,17,23,53,164,18,9,5,38,63,65,5,15,1,41,29,40,27,5,79,26,5,44,13,20,73,32,46,32,12,28,5,67,1,48,25,68,29,5,49,27,5,36,33,38,43,83,5,30,60,27,29,5,69,1,0,12,17,10,20,20,16,22,32,26,14,18,30,24,14,16,16,22,14,12,16,18,18,14,26,18,16,38,30,24,16,23,2,0,53,0,17,17,17,20,20,16,22,32,26,14,18,30,24,14,16,16,22,14,12,16,18,18,14,26,18,16,38,30,24,16,24,9,2,0,63,0,47,62,0,33,56,35,22,1,0,18,0,20,0,3,15,2,11,18,2,42,2,43,3,35,59,9,49,19,84,5,3,0,59,9,49,19,84,5,3,0,69,9,59,19,89,5,3,0,23,26,3,0,15,2,0,24,0,18,0,3,16,2,11,15,2,46,50,2,36,3,41,7,8,25,30,39,7,30,12,39,5,17,82,3,2,0,3,15,2,11,18,2,48,2,42,3,35,19,0,38,45,10,41,27,61,8,24,57,9,3,0,45,36,27,32,7,0,36,26,34,32,7,0,10,35,10,74,65,40,9,9,91,7,7,3,0,16,2,0,24,0,39,27,0,22,24,0,30,30,0,26,86,0,3,38,2,38,45,2,34,3,40,37,66,0,37,25,10,44,3,0,24,24,3,0,10,39,39,8,3,2,0,3,28,2,38,2,34,3,32,5,19,4,66,158,5,23,23,29,10,0,17,41,3,0,12,2,0,41,66,23,2,0,55,31,0,10,15,19,38,21,25,30,30,29,28,28,29,29,32,32,33,32,6,14,25,58,57,27,28,28,19,5,3,2,0,42,34,75,41,0,11,48,59,0,42,21,46,26,124,11,9,0,17,17,34,7,7,3,2,0,3,14,2,13,2,38,36,42,2,42,3,57,5,43,5,27,0,5,35,5,48,0,47,17,23,20,62,7,0,39,6,3,0,3,30,2,77,15,2,30,17,2,24,22,22,3,15,0,38,50,25,3,65,69,58,55,56,19,9,82,107,5,13,30,76,62,47,29,68,13,73,48,28,15,9,20,8,24,43,35,32,82,83,5,1,31,34,34,5,81,1,48,20,83,5,24,78,5,30,81,5,16,1,0,51,976,0,51,1985,0,51,2652,0,51,4306,0,66,0,59,0,21,219,52,12,83,30,2,0,19,0,201,0,18,26,53,70,2,0,50,0,26,0,83,104,0,61,64,8,35,20,43,18,36,22,36,3,1,0,60,0,42,39,32,39,33,104,40,56,1,0,59,0,41,39,32,33,32,39,33,99,40,102,1,0,17,0,68,63,63,0,66,21,0,68,67,68,23,2,65,67,62,54,2,66,62,32,0,49,35,0,21,30,38,38,30,34,30,32,34,28,2,0,28,61,1,69,0,36,0,18,0,46,28,41,0,25,54,1,0,15,40,46,46,42,52,28,0,29,69,31,67,29,67,29,40,39,40,26,43,35,41,38,52,45,44,74,0,67,66,41,4,68,48,4,68,20,4,67,68,35,0,61,66,82,83,28,29,27,28,28,38,36,34,94,25,23,24,52,27,0,25,22,32,22,28,28,38,50,32,26,34,40,16,36,24,34,18,18,22,38,20,56,32,34,34,38,24,36,32,32,34,46,62,76,72,75,2,0,64,36,0,41,51,0,26,73,1,0,41,42,0,36,34,24,92,3,11,1,0,73,0,53,0,27,42,30,0,66,38,6,0,57,43,6,0,29,61,1,0,34,20,58,18,75,1,0,99,0,57,38,0,45,19,20,2,0,49,49,2,0,61,21,17,60,2,0,55,62,62,67,8,0,37,33,54,66,11,20,3,1,0,67,65,0,22,69,63,70,63,68,29,20,66,67,67,23,64,66,66,67,24,28,67,21,24,70,70,67,57,22,65,11,36,66,71,43,37,108,82,59,34,59,79,32,65,67,27,23,66,64,67,11,19,61,62,66,57,51,16,63,65,65,66,68,68,63,65,67,67,18,66,68,66,67,66,12,4,65,16,64,59,61,66,31,16,67,39,19,59,30,25,63,49,23,2,0,42,0,35,0,27,19,0,33,83,0,41,30,43,81,36,137,5,29,43,32,3,0,36,56,0,33,58,0,33,33,70,3,33,68,0,16,1,0,38,62,19,37,18,19,14,6,26,67,23,39,24,3,1,0,56,3,18,23,20,24,21,28,21,29,35,70,0,42,87,1,0,72,3,35,38,52,46,71,85,0,56,47,39,122,20,39,95,66,3,45,79,57,94,29,0,62,70,58,27,0,23,0,56,17,24,68,79,10,34,21,3,0,37,13,26,72,20,29,35,58,35,51,0,48,51,49,0,63,68,20,39,26,0,38,50,64,0,60,29,40,0,86,57,21,19,32,46,0,44,81,32,0,63,23,29,0,26,26,0,32,60,97,29,2,0,370,0,44,54,19,33,2,0,111,0,157,0,149,0,47,57,35,90,80,3,100,2,0,49,36,26,48,94,2,0,122,0,121,0,56,36,26,48,86,2,0,57,70,2,0,36,45,54,0,17,69,12,2,0,48,41,2,0,77,45,21,33,2,0,56,33,2,0,64,0,28,0,22,0,65,40,52,12,34,37,55,56,32,50,57,102,40,44,41,99,5,29,0,30,37,55,34,18,3,2,0,62,50,0,27,27,16,15,10,16,3,2,0,54,0,36,79,2,0,43,0,37,48,14,13,2,0,60,0,40,55,2,0,68,0,38,37,35,65,2,0,35,34,41,80,15,3,2,0,66,54,0,29,80,2,0,54,30,37,80,17,22,15,3,2,0,67,35,0,30,38,2,0,35,0,33,65,2,0,58,24,22,28,26,20,7,2,0,70,41,48,117,112,113,2,0,73,47,63,55,68,27,111,23,81,2,0,50,73,80,20,80,2,0,44,46,57,71,2,0,28,0,24,0,63,68,67,46,0,37,36,37,37,56,25,3,20,89,7,27,0,107,9,41,14,44,41,2,0,63,0,32,81,38,45,77,70,78,71,51,111,31,0,44,40,23,82,76,44,63,3,14,2,0,50,36,40,35,66,20,0,38,45,46,61,54,38,102,2,0,28,2,65,59,67,17,0,60,59,0,28,29,17,3,0,64,65,16,0,22,111,66,54,56,25,77,77,31,134,61,22,39,38,54,62,62,60,56,41,30,57,45,60,58,57,58,23,23,73,42,49,81,55,78,5,0,52,20,93,25,102,5,99,0,68,65,65,60,64,10,33,41,18,62,5,0,62,92,75,61,3,2,0,60,36,14,78,61,8,35,21,3,0,59,17,12,39,29,61,73,42,5,3,85,80,2,0,46,14,19,51,2,0,40,14,30,40,20,30,42,36,31,6,25,50,2,0,64,66,62,61,64,65,27,0,41,14,121,30,21,30,35,51,36,3,27,76,69,16,38,51,136,42,40,57,45,7,42,5,51,38,3,64,55,89,106,40,38,55,43,5,126,59,32,38,10,61,3,49,34,2,0,76,14,118,2,0,40,14,42,73,46,78,45,2,0,44,67,63,14,0,60,63,31,0,81,68,49,2,0,44,14,50,18,30,32,21,0,62,64,26,0,10,63,72,47,54,46,26,18,19,42,14,97,26,24,7,33,12,38,53,5,3,19,50,31,20,49,2,0,43,14,68,67,41,19,48,2,0,66,0,17,0,41,14,33,22,37,34,16,35,45,54,55,85,34,12,63,26,25,5,41,21,58,3,73,39,66,46,2,0,47,14,35,19,53,2,0,43,14,42,30,43,20,48,2,0,42,71,14,44,42,47,2,0,43,14,48,2,0,71,68,5,26,0,33,80,5,89,53,33,48,62,42,26,20,3,78,117,20,20,50,2,0,54,25,19,53,2,0,65,61,20,0,69,71,49,0,17,30,52,40,41,25,3,42,14,50,48,2,0,57,66,14,0,38,19,28,73,28,77,30,41,19,20,46,2,0,59,34,0,40,42,14,0,6,42,40,5,17,37,20,28,51,5,5,15,17,98,6,3,19,74,30,41,19,20,77,2,0,41,0,45,25,19,12,32,32,31,47,128,24,117,94,12,23,5,72,43,3,13,2,0,40,36,82,2,0,73,0,60,33,0,74,87,26,83,75,28,44,3,36,31,0,35,102,57,75,77,61,30,156,3,0,102,20,20,25,61,0,36,72,0,33,68,0,30,30,40,107,2,0,43,30,92,40,2,0,57,28,0,47,14,0,36,51,30,21,0,39,29,45,35,29,22,30,40,67,18,35,82,101,30,127,121,7,5,3,26,14,54,23,84,2,0,59,45,0,45,30,19,26,22,22,23,0,37,30,56,39,17,5,71,22,12,25,5,3,25,68,103,21,12,24,5,3,77,23,3,45,31,65,43,25,14,28,7,5,3,0,23,16,74,64,26,73,28,44,10,37,3,0,24,104,74,68,94,118,53,73,10,31,3,0,13,2,0,43,10,33,38,32,35,37,21,3,2,0,48,40,39,83,5,29,43,10,36,3,2,0,83,24,23,38,83,83,66,84,3,0,16,87,0,16,57,75,57,83,70,86,0,52,2,0,40,43,82,64,87,3,0,29,69,40,50,34,42,46,10,23,3,19,0,53,2,0,45,17,0,30,19,58,40,41,25,3,14,19,26,0,45,2,0,49,35,32,20,61,10,29,28,19,3,2,0,39,88,2,0,34,58,38,25,2,0,33,40,30,22,41,65,41,21,37,19,29,14,119,7,5,3,2,0,59,30,34,0,20,98,55,3,0,65,6,41,41,41,38,5,34,16,21,32,16,10,15,3,1,0,35,31,21,23,53,48,3,1,0,36,0,44,14,24,31,41,37,53,68,14,29,7,5,34,60,39,21,56,3,57,60,16,80,35,18,35,102,46,35,62,12,49,23,5,60,3,44,42,49,56,75,8,84,25,23,47,28,58,37,62,41,12,72,49,27,0,41,37,42,0,44,113,9,7,0,25,5,21,3,56,2,0,49,26,31,67,28,70,23,2,0,50,22,28,50,36,69,7,27,0,47,9,35,79,28,0,59,7,31,52,40,51,34,55,46,57,2,0,53,26,56,5,23,0,46,3,2,0,46,39,36,36,39,19,26,2,0,51,0,48,31,38,30,37,17,33,60,29,0,32,46,89,21,14,20,25,6,57,3,14,2,0,29,0,35,14,17,37,30,39,10,51,34,90,3,19,51,2,0,51,0,41,31,35,50,32,35,51,64,50,3,35,34,16,32,37,53,68,16,3,30,37,17,33,60,29,0,34,51,35,39,12,44,37,5,53,59,3,14,2,0,41,71,54,50,89,5,24,3,30,2,0,72,52,91,72,3,2,49,10,36,47,46,53,36,81,3,2,0,28,0,57,15,0,71,46,24,22,48,96,11,0,25,24,29,23,11,0,28,34,92,72,27,0,41,23,51,64,10,112,12,40,91,11,62,9,7,11,0,20,51,112,47,11,0,27,33,92,54,11,0,25,32,50,53,89,11,0,32,126,38,27,46,11,0,35,76,11,0,27,93,11,0,28,31,0,12,52,5,95,13,2,0,52,0,55,28,33,26,51,3,12,33,130,47,3,17,2,0,25,0,53,30,14,71,47,2,0,36,30,14,0,69,67,26,0,42,0,45,2,0,35,0,36,38,24,26,34,18,74,50,0,24,32,5,3,26,2,0,73,30,28,33,40,52,22,70,11,48,41,38,22,115,25,11,12,67,38,22,5,3,13,2,0,45,14,2,0,59,0,61,41,76,50,19,39,51,2,0,70,79,23,2,77,68,60,2,70,61,2,69,17,2,72,73,78,39,2,78,14,2,74,79,2,41,14,25,39,2,73,69,77,24,2,79,74,14,2,41,15,19,32,39,2,78,72,76,43,2,77,55,2,79,77,76,69,16,2,67,76,78,53,0,66,56,0,41,0,22,20,68,117,17,62,93,25,44,71,39,7,97,5,9,0,25,91,9,0,26,83,9,0,33,90,75,0,10,78,3,2,0,67,56,0,22,23,70,25,0,64,5,9,0,22,78,29,0,78,5,9,0,10,58,3,2,0,72,56,0,22,18,49,70,9,0,27,64,9,0,21,68,9,0,10,59,3,2,0,67,0,89,21,25,39,27,31,2,0,13,37,36,38,37,36,93,44,43,66,61,2,0,28,0,34,23,2,0,30,46,2,0,40,33,57,19,89,29,0,66,67,15,84,76,151,19,34,38,92,20,26,2,0,38,54,34,37,34,3,14,2,0,41,31,47,33,39,36,6,43,2,0,105,0,43,39,53,3,2,0,37,0,74,34,28,10,3,31,71,29,3,33,2,0,51,79,26,2,0,49,34,26,2,0,51,139,67,26,2,0,43,35,2,0,85,58,75,105,107,40,6,40,27,2,0,46,41,27,6,40,27,2,0,49,39,40,45,49,8,44,3,26,2,0,49,22,66,51,60,25,3,29,2,0,68,0,28,0,53,62,59,68,0,72,69,14,88,14,21,11,21,43,49,17,3,23,38,50,27,37,55,59,11,16,81,9,7,28,5,10,3,20,29,14,21,26,73,12,47,5,21,71,10,30,18,17,16,6,3,21,2,0,25,0,66,65,66,65,64,0,62,68,66,63,61,45,0,66,54,68,36,52,30,118,54,3,13,2,0,64,23,0,83,35,61,63,49,38,3,0,102,31,64,60,56,91,10,53,34,3,0,54,67,39,56,3,73,85,27,52,31,33,72,34,130,5,61,108,33,38,8,37,21,16,48,85,56,10,93,3,91,89,13,2,0,47,0,72,54,64,73,35,52,21,46,31,52,57,3,13,2,0,31,0,63,54,81,73,140,2,0,62,59,66,67,67,0,81,29,64,25,88,52,21,95,112,40,7,26,18,58,121,100,143,134,7,81,5,3,13,2,0,75,135,50,19,21,21,82,2,0,50,0,84,60,52,36,20,32,71,31,23,16,70,61,56,57,49,86,79,81,29,82,60,77,36,62,57,10,69,75,61,56,35,28,29,33,18,57,5,3,0,46,17,45,8,123,10,15,3,2,0,37,10,85,76,3,1,0,51,0,70,54,65,110,19,78,69,120,116,108,3,15,2,0,77,111,98,43,30,0,16,116,0,53,73,28,61,39,64,7,20,5,0,19,3,2,0,110,57,68,129,0,44,123,52,23,19,45,36,74,47,12,78,5,31,28,31,5,53,52,154,22,22,27,116,96,61,44,33,104,34,34,44,101,5,61,49,49,64,54,25,32,28,33,5,53,47,38,106,5,54,22,56,63,3,13,2,0,64,68,66,11,0,64,66,70,57,0,62,22,22,25,69,28,16,63,83,47,21,31,33,17,30,100,28,41,0,21,28,16,50,0,20,88,36,140,41,94,5,51,34,104,111,88,36,66,32,99,7,5,13,0,22,27,42,62,15,0,40,40,0,62,28,82,33,16,43,0,22,96,33,93,63,55,61,5,15,0,24,28,16,93,51,0,22,39,55,0,25,28,16,38,0,22,51,0,20,26,0,25,31,0,23,41,35,12,30,5,0,10,22,3,2,0,35,30,0,57,110,99,35,0,22,22,40,19,21,37,10,22,3,2,0,42,26,0,23,40,0,19,34,30,62,83,12,32,5,3,0,50,2,0,39,26,0,37,40,0,36,111,18,95,88,87,0,46,2,0,37,30,21,52,114,14,41,2,0,40,30,35,30,12,2,0,73,111,38,16,0,66,57,128,22,22,78,42,57,80,27,13,50,33,68,117,13,14,97,7,5,72,32,0,78,61,44,34,34,76,5,0,80,54,61,49,49,0,30,59,33,77,12,24,5,10,38,3,0,36,51,25,58,10,14,3,2,0,38,13,2,0,76,98,2,0,69,68,68,63,17,0,15,0,28,96,30,35,63,21,39,42,40,109,20,96,32,113,48,3,96,92,60,57,3,126,34,47,2,0,29,0,43,30,0,30,46,20,92,5,18,22,18,6,10,18,74,24,6,3,14,46,49,2,0,36,33,75,0,30,14,24,63,25,24,93,38,50,32,79,3,14,49,2,0,35,89,216,66,2,0,46,0,61,59,23,14,37,17,33,93,29,0,69,84,31,3,80,2,0,66,72,68,20,45,40,80,7,49,5,22,73,60,108,56,5,13,49,3,38,24,27,46,28,31,5,19,47,3,37,31,110,19,74,57,10,20,3,122,42,2,0,132,62,26,0,32,134,23,77,41,23,23,56,42,97,68,105,54,30,33,41,49,50,35,30,73,10,81,12,77,95,5,97,54,35,57,40,23,20,87,68,53,64,87,12,43,5,26,31,2,0,41,38,37,27,41,36,21,12,28,5,3,158,2,0,34,0,36,17,82,60,2,0,32,0,69,127,0,26,36,37,36,31,0,20,20,25,118,0,30,92,40,51,0,30,30,40,52,2,0,57,0,70,102,0,63,26,64,0,20,20,25,0,52,53,0,30,30,40,57,2,0,44,0,77,69,49,0,21,47,27,34,10,90,34,49,70,71,24,33,123,5,67,57,32,21,42,0,75,81,125,88,80,75,28,48,28,3,19,2,0,43,57,5,24,0,51,5,13,2,0,78,43,0,52,37,62,5,24,0,83,3,2,0,68,62,64,66,23,0,94,30,28,17,33,73,29,0,23,50,21,46,53,108,62,12,65,5,19,3,13,2,0,38,24,20,22,0,43,92,39,98,71,90,76,92,31,65,37,65,71,22,42,95,77,3,2,0,68,63,15,0,48,30,35,27,33,34,0,57,74,117,120,62,105,25,5,10,22,3,23,38,17,31,53,42,3,13,2,0,37,30,40,27,10,22,3,14,45,0,29,43,108,10,76,3,0,13,2,0,44,0,37,53,0,30,14,121,26,25,10,43,51,3,49,2,0,37,53,0,30,14,67,49,2,0,28,0,64,65,62,66,11,0,37,41,54,37,56,11,2,0,35,0,31,31,64,3,2,0,28,0,35,21,62,16,68,20,88,22,62,32,2,0,130,0,35,41,2,0,29,24,2,0,17,73,73,51,86,2,0,53,25,37,36,120,29,51,45,49,38,31,45,38,33,58,8,92,33,10,59,39,121,94,26,13,7,29,55,47,46,5,3,106,2,0,38,67,59,55,40,3,2,0,32,52,2,0,35,50,35,49,3,2,0,96,36,50,35,81,3,2,0,44,17,19,15,31,51,38,58,28,30,2,0,47,0,28,0,29,50,2,0,39,33,2,0,58,0,45,19,17,29,27,26,28,13,1,0,40,81,2,0,32,0,52,54,2,0,32,58,56,16,2,0,70,50,118,0,35,1018,78,52,88,52,31,27,29,29,29,28,2,0,41,696,0,31,2041,159,119,119,114,27,23,25,25,25,24,2,0,14,40,31,99,16,66,59,5,4,53,0,48,38,50,1,0,76,30,0,32,1,0,28,0,68,23,169,100,19,18,17,23,23,15,24,28,43,30,28,23,31,2,0,80,42,25,29,21,65,65,2,0,66,112,2,0,95,90,62,44,0,22,19,15,13,3,26,78,12,3,33,76,2,0,76,44,0,22,19,15,12,3,32,78,63,16,3,14,2,0,69,44,0,34,2,0,73,44,0,58,2,0,69,44,0,46,2,0,65,44,0,36,25,15,3,14,2,0,3,52,2,69,18,3,44,36,26,0,42,31,42,65,5,42,67,5,3,2,0,3,54,2,69,18,3,46,29,0,73,65,73,76,75,87,25,31,3,2,0,64,39,16,25,29,44,31,29,30,38,0,33,0,42,36,34,35,5,61,46,5,3,58,34,3,77,23,0,48,54,5,3,2,0,68,43,33,35,35,3,0,33,47,37,3,32,44,3,2,0,68,43,71,7,2,0,68,39,40,61,78,34,80,37,26,42,7,5,15,3,0,88,37,15,3,0,14,2,0,73,44,24,44,0,9,59,15,3,0,10,32,61,17,5,22,3,0,27,59,27,40,43,5,61,37,37,42,7,54,17,5,3,0,20,14,2,0,67,54,44,0,56,28,15,3,14,2,0,73,60,10,30,30,30,51,3,2,60,24,32,26,46,31,75,33,7,36,83,50,63,9,19,7,5,36,43,5,22,3,14,2,0,61,39,10,46,30,53,43,45,40,3,2,59,24,32,43,17,5,22,3,14,2,51,24,32,61,37,36,19,7,40,5,22,3,14,2,49,32,40,40,50,35,5,35,34,36,17,5,38,3,14,2,0,76,47,10,30,53,43,45,43,52,50,3,2,0,87,58,53,37,3,14,2,0,72,50,27,30,28,20,15,3,14,2,32,10,26,47,26,26,47,44,3,1,0,73,17,52,24,13,67,20,3,28,2,0,88,59,27,6,16,26,50,26,26,26,26,23,5,20,15,3,14,2,0,20,12,18,46,32,42,67,52,7,51,12,5,33,3,2,0,15,33,75,44,29,32,80,17,5,46,3,14,2,0,26,26,46,75,55,29,52,67,56,69,5,15,3,14,2,0,27,19,8,8,40,56,24,46,33,24,0,89,28,3,36,28,15,3,0,20,14,2,38,82,1,0,26,22,8,8,40,11,10,55,24,46,33,24,0,89,28,3,35,28,15,3,0,20,14,2,37,140,1,0,74,45,6,42,49,44,55,5,15,3,22,35,43,44,5,34,3,14,2,48,24,44,31,24,91,39,35,7,17,5,40,17,5,22,3,14,2,45,32,42,59,17,5,43,3,14,2,0,79,50,10,42,43,33,46,63,74,40,3,2,49,24,32,46,17,5,22,3,14,2,39,79,27,20,15,3,14,2,0,70,48,27,28,39,20,15,3,28,39,20,15,3,28,39,20,15,3,28,39,20,15,3,28,39,20,15,3,14,2,0,70,48,27,28,35,20,15,3,14,2,30,10,49,46,3,1,0,84,70,42,0,24,40,0,32,50,36,56,41,108,41,51,86,23,11,9,37,34,7,17,5,8,16,32,40,32,40,7,17,5,18,44,5,22,3,0,14,2,29,34,1,0,78,49,22,48,17,5,34,40,17,5,16,3,0,27,71,28,20,15,3,0,14,2,0,70,48,25,27,49,8,73,22,74,15,3,14,2,0,77,55,27,0,35,28,20,15,3,0,6,20,36,48,5,28,20,8,32,61,29,7,17,5,41,3,0,14,2,37,10,26,26,26,26,26,23,3,1,0,36,49,35,65,24,0,49,77,37,53,40,74,17,5,3,20,0,35,61,44,71,15,3,14,2,80,55,45,59,46,2,79,56,45,2,0,25,34,54,13,29,64,51,20,3,37,2,45,51,1,0,26,35,55,13,29,65,51,20,3,37,2,46,65,1,0,36,35,65,51,2,0,71,49,32,28,35,34,17,5,81,48,3,14,2,0,68,76,82,43,43,34,69,37,59,47,7,56,61,7,5,3,2,0,66,72,44,24,0,32,44,17,5,24,37,33,56,44,7,36,5,22,3,0,27,28,28,20,15,3,0,14,2,0,75,46,24,0,32,41,15,3,0,49,38,15,3,0,50,51,17,5,22,3,0,10,49,41,3,2,0,82,53,27,50,35,20,15,3,14,2,0,74,52,24,32,50,17,5,24,36,5,22,3,14,2,0,70,48,24,13,25,48,71,20,3,28,2,29,49,1,0,66,44,24,13,25,44,64,20,3,28,2,25,10,49,49,46,3,1,23,49,35,3,49,35,3,26,1,0,89,48,60,41,32,43,34,56,67,14,41,7,12,30,5,15,3,14,2,0,67,45,27,25,43,20,15,3,25,14,2,27,49,1,0,67,65,99,57,24,25,36,29,26,24,18,5,64,20,3,13,2,0,67,64,60,0,31,21,23,23,19,26,63,23,38,2,0,15,0,26,0,25,0,51,78,93,27,46,0,29,33,35,39,19,2,0,26,14,24,2,0,56,34,38,24,0,12,25,40,16,43,22,9,7,5,6,0,67,53,0,66,14,0,27,37,69,0,24,69,77,0,63,52,2,0,31,61,49,86,30,0,36,2,0,35,45,55,49,82,2,0,34,62,70,71,21,31,111,21,39,5,3,29,85,59,2,0,42,23,62,56,58,43,3,29,99,59,2,0,64,32,0,27,46,45,17,29,17,11,12,55,19,7,34,17,35,23,34,7,11,19,52,21,32,13,14,32,13,14,18,7,11,12,96,19,14,18,7,5,3,2,0,59,67,62,18,0,38,22,67,27,19,19,0,31,2,0,20,0,66,66,65,11,2,28,2,31,49,64,50,85,18,45,10,15,40,3,2,0,40,49,64,62,40,2,0,55,49,15,62,0,39,68,11,33,47,3,0,69,39,2,0,48,49,22,41,54,67,5,82,3,62,80,2,0,40,49,62,45,2,0,48,49,22,86,97,29,30,23,29,5,43,3,62,42,2,0,45,49,15,22,77,105,48,3,99,51,80,28,21,27,3,32,48,2,0,47,49,113,76,18,42,3,68,2,0,43,45,26,51,22,54,84,5,22,30,58,71,7,47,5,3,43,2,0,45,45,23,26,15,36,65,66,5,3,0,81,2,0,38,17,66,36,17,31,0,24,62,62,60,61,64,64,63,63,61,0,17,47,15,46,0,17,51,99,40,102,102,5,0,62,22,89,33,0,28,31,32,0,68,61,67,45,17,33,0,27,47,0,28,40,0,17,33,0,27,40,0,27,37,0,27,39,0,17,36,0,18,43,0,17,38,3,0,81,2,0,36,56,19,36,2,0,28,41,12,96,41,85,19,41,58,48,28,31,15,3,50,13,28,31,56,0,21,87,37,34,36,0,41,19,7,39,15,70,106,3,0,89,2,0,65,68,66,0,67,85,76,0,82,80,38,109,0,48,77,63,0,41,144,115,114,22,14,5,0,50,55,66,28,31,20,32,3,0,140,84,0,14,2,0,59,36,27,3,0,97,42,1,0,30,37,15,3,0,83,38,1,0,38,23,22,32,87,82,60,15,119,43,2,0,60,0,41,23,108,75,68,45,83,66,15,114,47,3,81,37,15,21,43,3,56,45,59,75,3,112,0,69,43,2,0,55,0,31,49,0,26,60,29,74,15,90,10,31,3,13,2,0,33,40,12,98,45,31,27,52,41,28,48,100,17,35,23,34,7,12,84,17,5,3,50,46,2,0,32,0,39,0,38,32,7,25,17,48,38,12,15,5,3,0,33,2,0,53,64,39,10,34,3,2,0,31,38,12,91,45,93,113,24,24,55,16,21,52,9,7,52,52,5,27,52,40,28,31,52,17,19,14,67,14,20,13,14,39,13,7,35,23,34,7,28,12,17,5,3,2,0,88,42,52,35,14,17,11,0,13,45,13,7,0,20,13,94,0,17,5,3,50,2,0,34,0,43,45,13,15,38,38,66,65,38,37,46,38,80,19,78,13,10,10,22,30,21,33,8,5,21,33,0,30,16,52,8,0,17,5,10,31,76,40,24,41,38,7,38,43,88,32,41,20,48,44,10,7,39,5,24,76,38,15,5,34,3,2,0,62,0,32,25,32,88,10,2,0,73,47,2,67,27,0,27,27,53,45,40,38,39,39,34,30,53,30,59,91,17,37,71,72,37,28,12,11,5,18,3,54,2,0,63,24,0,26,30,26,33,26,3,37,2,0,65,0,22,0,16,17,19,33,21,33,27,13,23,20,25,25,21,37,39,15,23,23,25,40,2,0,62,62,66,13,2,74,0,34,37,1,0,62,64,37,0,49,54,1,0,68,65,0,36,41,1,0,13,17,12,16,20,32,24,14,22,32,26,36,38,22,24,22,24,40,16,38,20,19,22,17,2,0,34,19,18,27,30,73,3,34,26,25,24,36,37,5,42,16,48,13,12,25,38,99,45,53,8,51,3,23,16,1,0,45,65,65,18,40,40,2,34,131,22,32,28,60,28,12,3,28,64,100,54,7,5,14,1,0,29,7,35,15,35,3,1,0,17,35,33,33,39,47,39,36,38,38,29,36,35,33,41,40,37,37,36,31,32,41,35,33,34,33,35,33,43,33,27,31,34,36,31,31,27,27,31,35,33,35,31,31,36,36,36,46,33,33,34,29,28,31,38,34,31,36,36,38,33,45,28,36,34,34,34,37,29,48,41,39,33,36,36,33,28,29,28,27,30,30,27,30,32,28,36,36,36,36,35,37,38,36,36,37,36,39,36,36,36,36,36,36,36,36,36,39,27,41,27,35,34,35,34,34,29,40,43,27,37,37,37,34,30,34,34,39,28,37,33,32,40,31,31,33,34,33,40,31,36,34,31,31,35,47,41,47,39,38,40,38,41,37,32,31,31,27,33,39,40,39,40,27,36,38,49,54,31,29,31,32,33,35,42,29,34,31,33,33,36,31,37,34,40,29,29,33,30,43,41,37,29,30,30,33,41,33,36,37,37,35,35,33,35,33,33,27,27,27,27,31,31,33,28,33,31,32,31,30,29,31,27,23,23,21,22,23,22,23,22,22,29,22,21,22,23,22,23,22,22,21,21,21,22,21,22,21,23,19,27,20,20,22,24,22,23,23,21,21,28,21,23,22,21,23,33,23,33,24,23,21,21,21,22,23,22,22,21,22,21,21,21,21,23,23,21,23,23,23,21,23,21,27,25,21,25,26,21,22,23,25,23,21,65,28,44,53,36,26,27,21,28,29,22,23,22,23,23,21,21,27,32,21,22,23,34,30,27,28,25,26,36,36,25,25,32,35,20,20,22,21,23,22,20,22,30,24,23,20,18,22,23,23,22,23,22,21,22,30,25,22,21,22,22,21,22,26,24,37,20,21,23,22,21,21,23,25,26,26,24,20,22,21,22,23,23,23,23,29,23,22,21,22,21,21,22,22,23,22,22,22,22,21,26,27,22,2,0,23,44,32,52,1,0,66,38,33,33,33,45,64,37,56,31,48,36,81,35,128,33,95,53,1,61,85,14,10,36,67,59,88,57,29,45,41,49,79,74,77,62,40,117,65,54,43,76,5,66,62,35,51,41,35,63,119,65,54,43,76,5,13,1,3,76,3,30,102,50,25,12,27,22,46,50,51,10,23,54,23,13,68,75,59,29,26,13,10,24,38,70,48,23,13,43,33,73,60,100,13,73,23,13,63,58,59,10,40,74,20,24,39,87,18,13,18,28,13,10,35,47,65,44,56,62,44,21,17,13,9,6,1,46,74,59,45,15,5,61,38,26,5,10,15,5,1,43,37,40,5,10,47,5,1,35,12,38,44,17,5,42,51,59,5,10,56,66,48,5,75,57,1,41,57,1,47,54,1,40,55,102,69,73,48,98,30,42,83,68,5,26,1,3,105,54,54,2,11,8,39,45,37,25,22,12,4,42,6,2,81,36,72,100,27,3,79,43,40,57,45,37,52,29,47,41,23,28,25,11,49,71,9,5,50,77,5,74,30,25,27,29,31,26,28,26,46,9,100,7,20,1,122,48,44,67,38,33,48,46,75,83,25,74,1,42,64,44,37,75,49,5,30,48,17,26,47,5,27,29,5,44,1,75,39,47,21,94,75,1,3,71,38,3,83,58,48,5,41,33,17,22,5,30,52,12,27,34,38,70,45,63,111,9,68,37,70,5,10,24,81,78,79,80,65,55,55,45,45,54,109,36,43,9,54,55,73,43,36,21,25,30,31,15,40,9,14,34,21,47,30,32,29,15,9,94,5,23,15,1,68,39,49,5,36,39,53,55,51,10,1,0,27,12087,0,3,26,28,3,30,35,17,2,0,15,15,31,45,51,4,10,25,24,37,5,4,3,2,1,0,3,40,49,51,3,39,17,11,67,52,3,1,0,3,40,47,3,30,28,28,55,1,0,3,44,52,28,37,37,41,36,3,46,29,0,15,60,0,35,48,0,36,56,3,0,51,55,53,0,31,0,24,29,9,3,0,17,24,52,25,3,0,30,53,3,0,24,29,47,45,43,29,4,60,47,54,46,58,30,5,4,3,0,28,2,1,0,21,26,22,22,36,37,29,32,34,28,35,29,23,125,1,33,248,1,31,57,1,36,60,22,3,13,31,3,27,91,3,59,1,32,79,1,0,44,21,47,18,18,22,21,25,40,7,3,17,1,0,49,32,43,46,24,12,33,39,90,4,11,2,12,31,28,117,4,7,2,12,31,62,110,22,35,214,5,82,12,164,4,7,2,12,25,37,65,4,7,2,12,35,37,152,4,11,2,12,34,40,26,106,5,135,4,7,2,12,31,81,7,2,12,31,39,11,2,12,26,43,35,33,50,5,62,68,4,11,2,12,35,12,84,51,75,5,55,19,4,7,2,39,27,41,1,43,19,31,40,43,32,5,29,43,36,5,49,45,21,24,21,24,7,46,15,56,8,24,21,24,7,41,21,17,3,1,38,31,43,37,33,44,20,26,23,26,9,12,24,5,3,2,43,73,24,38,3,76,1,30,46,55,12,1,48,19,71,36,50,55,5,35,36,50,5,17,3,2,38,36,38,13,36,122,6,46,3,69,11,35,120,4,26,19,3,24,45,1,34,29,0,192,34,66,1,37,112,26,89,121,17,40,5,3,68,75,100,10,15,18,21,16,4,1,0,159,29,27,1,0,36,56,25,3,55,33,43,45,33,42,9,7,1,82,12,17,23,58,49,23,9,5,16,9,79,59,27,44,9,19,5,15,39,63,9,48,49,20,9,5,16,1,67,28,52,5,15,48,22,5,65,43,33,23,43,43,5,42,78,5,10,36,5,17,20,13,23,31,32,49,28,52,13,18,53,13,10,42,28,51,13,18,52,13,9,6,36,15,1,41,33,29,27,6,36,63,37,35,26,9,39,6,12,40,22,42,42,31,10,20,51,10,25,47,56,13,9,6,1,0,37,34,30,35,49,20,5,17,1,45,36,67,42,1,53,50,46,61,33,25,28,16,31,51,10,38,7,14,9,70,47,47,45,36,17,82,90,90,93,28,19,45,11,28,47,47,57,13,52,45,51,45,33,19,13,11,5,13,29,5,61,1,60,37,20,50,90,89,71,46,60,9,55,46,46,56,41,38,30,28,15,80,30,67,53,50,73,65,58,33,75,69,13,9,5,17,1,64,59,41,35,34,41,5,44,1,51,67,44,20,71,40,37,21,37,25,11,43,5,58,1,34,47,15,37,12,28,34,29,10,22,27,23,13,37,34,34,39,15,10,18,26,53,34,79,30,17,13,10,43,46,43,57,78,58,49,35,47,72,17,51,64,17,51,34,39,21,38,79,97,55,76,72,21,17,24,41,18,13,32,74,23,13,48,20,45,93,38,33,30,31,27,86,26,73,43,77,46,28,97,144,53,92,19,159,25,83,15,15,69,45,22,17,22,67,17,13,18,66,55,61,13,36,24,66,87,18,13,20,64,81,11,83,14,10,49,18,34,30,39,87,19,14,83,106,26,42,47,81,79,51,63,47,60,129,77,66,55,88,17,13,28,10,30,66,60,23,13,54,49,37,56,15,9,6,1,0,62,56,50,78,52,54,53,51,36,56,25,3,40,92,77,12,29,52,50,91,93,73,51,26,13,64,56,88,29,26,34,62,14,27,59,56,31,45,76,52,17,22,87,91,17,13,20,76,76,69,64,62,38,93,37,13,54,39,36,61,61,93,80,93,58,89,76,74,79,92,81,25,21,17,32,14,56,52,48,52,111,87,63,57,13,18,35,46,65,60,115,51,17,13,23,37,86,84,59,68,65,74,92,90,66,124,42,85,25,21,44,17,32,43,88,31,17,60,50,32,111,77,30,49,32,36,70,26,21,31,17,13,53,52,84,59,60,32,117,51,17,13,32,53,52,110,47,13,23,36,24,23,34,18,13,81,43,32,28,13,57,40,65,32,28,36,36,85,31,17,32,43,95,31,17,109,31,17,34,86,36,30,53,83,43,106,29,112,48,25,32,31,42,26,21,26,37,92,112,25,43,47,59,21,17,13,80,10,18,51,35,47,17,22,64,29,30,15,134,3,4,17,13,51,35,47,17,22,65,126,17,13,9,6,1,36,20,21,41,27,41,5,27,43,43,5,29,1,75,58,12,79,18,116,19,5,119,19,5,43,22,126,23,9,129,23,9,5,18,119,19,5,122,19,5,1,98,80,75,38,31,49,73,9,28,35,55,21,52,83,88,36,17,27,46,32,21,17,13,65,22,39,9,5,80,25,56,43,115,20,27,9,15,5,20,88,79,5,1,29,120,78,25,70,47,47,47,62,63,30,37,69,29,43,9,89,20,18,9,84,78,75,70,77,21,9,62,43,5,16,60,23,5,24,38,46,43,5,10,23,5,80,21,75,5,27,19,61,12,58,88,26,7,40,91,33,22,26,5,10,25,5,30,72,80,41,55,37,41,44,52,75,66,15,34,60,61,75,28,80,22,17,13,9,15,5,40,29,53,23,38,60,5,17,9,68,5,17,34,22,9,5,42,60,23,29,44,44,11,5,20,15,5,41,27,28,9,42,76,28,9,56,40,26,36,37,37,28,9,28,27,75,72,28,119,13,9,63,6,53,34,53,75,31,30,25,59,11,5,41,89,36,56,73,55,7,32,5,76,34,56,46,49,49,35,42,59,59,5,41,45,35,40,42,76,78,80,57,68,15,21,74,35,16,32,67,26,10,5,27,37,65,81,79,33,23,67,42,69,13,9,5,10,67,44,80,66,5,18,75,31,16,25,59,10,5,10,32,5,1,65,73,78,66,53,39,44,57,18,56,5,18,15,59,20,55,31,38,41,36,39,30,53,34,21,40,34,17,78,89,13,19,61,22,13,9,80,48,66,9,5,1,105,52,17,22,5,9,23,54,58,27,71,9,67,83,83,56,24,35,59,34,74,65,30,64,31,66,41,60,54,51,91,90,73,85,93,70,103,47,89,52,57,54,25,30,96,53,25,21,17,22,46,17,13,9,57,53,40,54,54,45,26,17,13,9,47,53,59,38,26,55,40,67,51,70,27,47,13,59,51,80,74,13,59,77,37,28,127,69,42,13,9,5,15,43,5,28,1,43,69,92,42,1,79,55,57,45,20,26,72,31,38,5,73,32,39,5,68,29,34,5,37,115,5,45,47,5,30,59,69,18,7,1,123,50,16,21,5,24,66,41,23,71,50,70,77,42,49,13,18,39,13,9,14,26,35,9,26,95,56,9,5,77,46,66,63,21,42,9,36,64,9,5,21,129,19,23,24,116,54,28,9,5,1,83,12,88,46,85,79,32,67,56,28,113,41,32,28,62,18,76,13,9,47,37,9,5,1,3,36,37,31,2,72,75,3,57,72,28,58,47,71,77,28,9,5,1,48,73,1,50,44,62,47,5,37,1,3,61,29,47,3,40,61,36,20,5,30,37,86,29,18,9,40,60,43,5,12,46,78,19,7,14,38,5,15,1,0,82,64,23,10,36,11,11,11,11,13,11,14,11,11,22,10,13,12,12,11,76,53,10,10,24,2,74,65,62,39,75,24,41,73,37,51,21,24,18,7,57,22,80,18,25,70,9,14,68,79,9,81,55,6,45,53,20,25,45,14,9,53,20,31,46,14,9,41,19,9,38,20,31,30,14,9,16,42,10,6,12,36,22,70,78,29,86,56,100,61,28,71,38,22,17,67,31,50,98,32,43,70,26,21,28,39,38,22,17,15,97,99,24,99,82,32,18,15,39,45,42,28,47,22,17,13,95,55,28,33,38,22,17,59,26,77,32,51,37,89,72,69,37,21,17,42,67,31,55,17,15,89,42,28,55,22,17,22,28,91,94,26,59,111,77,56,26,102,105,51,26,104,80,26,93,36,46,15,8,29,28,30,22,7,137,5,3,4,22,17,15,90,42,28,55,22,17,22,67,28,132,22,17,15,9,6,1,95,69,46,12,29,22,91,71,81,32,30,16,52,32,37,16,78,70,16,9,6,1,0,52,3,51,3,33,32,33,42,7,1,3,77,25,3,55,80,41,46,33,41,18,5,35,27,42,29,21,7,91,79,37,42,103,101,52,29,34,9,5,69,32,38,32,104,5,21,1,143,21,52,41,46,55,25,52,54,5,29,1,50,33,39,58,42,64,28,26,13,28,21,6,60,58,25,9,13,113,77,57,18,78,37,46,9,19,93,67,25,9,6,76,78,20,31,18,16,70,79,41,28,13,50,27,44,13,16,64,43,46,50,13,50,35,13,65,29,13,9,36,6,1,38,35,75,20,35,40,9,29,60,67,9,39,24,6,1,83,67,83,62,26,15,5,47,18,35,31,6,36,26,13,28,21,6,34,28,25,21,21,21,25,13,135,33,84,72,86,9,19,17,65,72,55,41,17,22,61,17,25,13,21,45,74,21,9,45,24,33,9,52,54,68,53,9,70,45,33,9,81,76,47,44,68,67,30,25,13,47,69,37,25,13,40,65,47,37,25,13,242,9,5,40,84,5,1,52,21,21,5,42,23,24,9,74,58,84,24,9,7,18,1,40,40,35,22,24,41,5,10,24,5,1,0,3,75,2,66,18,56,3,30,62,43,41,60,44,12,26,29,36,28,42,28,37,17,40,34,32,86,77,115,49,26,21,26,84,21,17,48,24,45,42,58,23,41,18,13,23,65,87,36,71,26,69,13,9,6,1,0,80,64,36,53,38,12,36,46,72,26,13,10,65,68,68,33,46,64,56,56,42,62,48,51,32,83,70,27,74,49,21,25,78,46,21,27,88,80,69,49,31,21,63,51,88,76,53,25,21,17,78,83,84,75,21,68,17,27,78,45,17,13,9,6,1,43,12,42,22,35,82,78,63,13,10,48,72,26,13,10,39,46,84,40,15,10,33,46,64,57,23,13,44,38,79,77,80,23,21,74,42,17,23,84,76,65,47,27,17,78,13,18,30,23,13,79,80,71,17,64,13,23,74,26,13,9,6,1,35,86,56,50,70,45,14,1,35,84,49,42,70,45,14,1,0,60,0,25,31,56,17,43,6,19,1,0,82,0,67,68,50,65,43,24,7,37,39,51,43,43,52,46,27,37,20,15,40,11,3,1,0,50,34,0,16,0,14,0,80,60,5,23,0,29,3,2,29,29,80,74,43,33,38,61,2,89,54,45,35,32,2,47,41,73,25,0,50,66,7,25,0,31,5,3,2,42,52,66,5,23,0,29,3,2,93,60,2,42,72,44,33,44,61,2,43,51,32,2,70,33,32,2,44,49,52,56,32,2,68,30,34,32,2,39,59,37,2,32,0,86,51,68,5,23,0,16,3,2,50,28,52,2,0,40,45,62,5,24,0,28,3,65,2,0,39,33,39,44,37,6,20,2,30,33,86,44,66,22,0,39,3,2,45,68,23,0,35,59,35,45,38,5,3,2,0,30,62,47,66,22,0,42,3,2,48,66,5,23,0,16,3,2,82,50,67,5,23,0,30,3,2,47,62,5,24,0,17,3,0,77,5,27,0,30,3,2,30,71,37,2,73,33,34,2,77,30,34,2,53,33,39,38,2,67,35,21,69,7,26,0,33,9,2,48,35,60,2,86,23,124,56,2,52,20,29,35,2,49,66,5,23,0,16,3,35,2,48,35,2,150,0,56,32,34,2,103,37,45,64,19,2,41,60,5,22,0,15,3,2,90,55,54,2,0,50,47,23,57,59,77,5,28,20,52,7,19,1,35,15,12,33,34,29,42,10,35,51,23,179,25,29,80,60,17,67,13,9,6,1,89,22,17,21,21,25,2,38,65,18,9,39,5,15,31,18,5,65,55,30,34,30,70,26,21,10,16,25,13,50,38,37,29,37,45,17,15,9,19,25,84,33,62,25,97,55,17,89,98,24,42,41,32,19,13,19,25,13,9,74,19,64,25,65,81,38,38,25,46,25,23,45,54,97,42,13,58,55,96,17,56,13,18,53,13,10,46,50,41,13,9,14,34,9,15,27,19,49,107,53,56,58,57,57,50,40,39,69,40,71,64,65,62,69,67,25,45,21,65,69,102,43,61,21,26,61,21,29,17,44,57,54,57,62,46,29,53,125,53,13,9,64,33,47,39,132,57,9,40,74,23,39,33,118,67,16,18,18,18,26,23,20,17,18,15,10,7,54,1,36,54,3,83,3,94,21,25,42,52,93,35,36,28,35,35,44,35,41,9,7,24,20,36,127,57,49,16,27,38,38,20,51,11,42,20,31,33,34,16,47,31,48,44,32,40,23,31,89,60,58,13,49,44,47,25,29,38,13,18,48,46,46,13,44,10,36,45,44,46,36,56,77,59,73,13,55,70,32,28,32,68,44,59,45,94,81,13,18,78,30,85,90,13,11,50,88,53,49,17,101,45,29,16,29,49,12,10,16,27,6,1,29,91,62,49,1,30,42,1,47,112,67,76,21,60,33,74,22,5,53,56,54,50,1,64,17,31,18,29,5,30,66,29,55,30,54,31,45,30,26,80,33,58,5,105,1,39,31,42,24,34,56,49,41,20,7,22,20,28,37,43,57,62,39,12,18,5,24,29,26,1,30,74,81,1,0,44,56,35,82,1,46,47,54,43,48,91,58,62,50,30,73,160,13,35,9,19,59,9,15,5,67,58,47,17,32,21,11,15,5,52,63,33,24,13,18,39,43,14,6,72,55,30,49,9,5,37,42,37,110,28,31,15,21,36,50,25,79,15,9,14,66,82,9,15,5,68,1,66,23,41,31,32,55,29,21,9,37,60,25,34,21,9,77,44,22,48,58,59,28,58,13,5,25,101,24,27,11,17,31,11,15,5,31,98,15,5,30,98,55,13,23,15,7,1,50,75,58,29,99,5,1,67,45,44,25,9,5,16,1,67,12,75,65,56,113,21,5,31,24,27,29,11,76,76,48,81,85,13,9,21,5,82,81,31,81,79,34,24,27,29,11,5,10,35,24,9,23,84,85,38,68,24,9,5,44,55,49,28,35,33,15,21,9,78,84,43,91,25,13,9,46,51,24,9,62,24,9,5,17,1,43,24,15,5,18,37,31,25,24,34,41,49,50,9,7,1,44,49,65,67,25,27,33,66,7,13,22,42,7,1,3,50,72,81,2,23,3,48,31,65,35,24,28,18,28,49,26,11,24,5,47,36,24,32,33,35,38,56,17,40,38,56,17,40,38,53,17,43,29,17,22,51,43,52,25,30,92,88,82,48,25,21,57,43,49,25,48,37,25,30,39,25,21,17,22,45,35,30,55,45,37,21,26,42,21,17,22,39,17,22,45,35,30,55,45,37,21,26,42,21,17,22,39,17,22,42,35,30,55,45,37,21,26,42,21,17,70,31,17,22,39,17,22,20,71,9,5,17,1,58,27,42,33,29,5,25,1,31,55,26,5,15,1,23,93,37,18,14,1,76,76,72,39,53,19,50,34,22,38,20,61,51,25,17,22,41,17,14,33,11,48,5,10,23,5,1,0,3,7,52,15,3,0,3,18,10,3,0,18,0,3,23,11,3,0,24,38,0,3,20,11,3,0,41,0,3,26,2,32,19,11,3,0,29,28,22,44,3,0,27,19,23,27,21,22,0,29,38,39,20,0,50,1,0,3,24,2,38,28,34,19,10,3,0,33,23,54,3,0,28,32,57,18,14,0,22,75,78,3,0,24,19,21,24,0,13,16,9,1,0,3,41,2,22,20,15,3,0,24,21,60,15,3,0,16,42,69,69,50,49,1,0,3,29,2,23,19,11,3,0,25,48,36,0,39,1,0,26,0,21,30,25,0,49,37,123,4,4,0,56,44,67,140,4,4,0,18,37,43,47,11,46,4,9,39,2,0,46,51,2,0,45,35,76,4,50,2,0,40,51,2,0,28,30,2,0,36,84,0,48,0,64,31,46,0,8,46,16,102,4,2,0,32,21,0,73,46,45,58,0,23,2,0,48,54,3,0,37,43,63,11,62,4,9,55,2,0,40,28,55,2,0,39,28,34,75,4,54,2,0,34,28,51,2,0,53,32,86,79,3,0,36,45,36,3,0,58,143,39,3,0,58,31,15,3,0,51,30,3,0,38,29,3,0,37,48,3,0,41,53,3,0,43,20,29,28,0,72,3,0,55,93,3,0,74,42,47,50,3,0,74,54,54,62,3,0,42,48,3,0,49,55,3,0,60,41,79,3,22,0,42,27,28,21,30,28,26,21,49,47,2,1,0,3,21,32,3,0,3,19,25,35,3,0,3,23,28,3,23,19,25,0,27,43,0,36,0,22,32,0,19,31,36,27,42,4,3,2,0,58,1,0,24,0,28,37,36,2,1,0,31,32,34,30,2,0,32,32,37,29,20,2,0,12,1,0,38,41,30,40,2,1,0,44,35,31,30,44,60,38,37,44,63,34,3,2,1,0,26,39,1,0,49,28,26,0,27,27,30,2,0,43,32,2,0,25,13,66,57,48,0,49,59,24,20,3,0,67,48,37,2,0,30,53,1,0,18,13,15,2,0,41,36,0,52,54,0,16,31,24,45,3,0,44,76,0,16,1,0,30,29,0,42,44,0,53,70,72,0,18,0,20,26,27,39,41,67,2,0,18,30,64,44,38,46,36,5,2,0,65,46,60,0,17,39,50,69,0,48,41,0,80,5,2,0,81,0,35,19,39,49,61,65,61,0,37,51,36,3,0,104,57,0,72,22,20,3,0,23,44,3,0,40,55,3,1,0,34,12,18,19,23,35,40,82,79,82,33,46,72,13,26,45,55,17,13,9,6,2,46,50,100,63,81,69,26,9,30,6,1,45,71,100,63,75,75,29,67,45,39,53,41,26,9,59,58,51,31,74,52,43,38,26,73,22,13,9,33,51,53,74,13,9,64,79,71,36,9,63,19,9,33,66,56,9,30,6,1,39,79,100,62,59,75,75,82,40,49,62,51,107,23,13,63,28,66,59,56,42,9,14,19,9,6,1,44,40,20,36,33,21,53,20,82,20,17,1,54,44,20,5,40,93,29,64,0,114,47,58,29,78,18,5,10,79,82,15,5,17,1,41,60,28,17,10,29,43,13,14,27,9,14,11,4,1,0,46,56,50,38,54,80,78,79,78,76,79,6,42,69,45,52,43,6,70,78,73,73,20,6,77,43,33,58,18,33,67,31,82,85,39,13,18,65,80,57,83,50,32,62,13,11,5,65,61,24,30,23,53,27,9,6,61,43,16,18,25,7,41,19,1,61,36,47,69,30,69,37,88,17,80,79,35,80,33,59,22,5,14,85,73,77,18,1,70,69,36,69,30,30,20,19,11,56,63,29,80,24,52,24,9,52,83,20,79,48,64,17,64,83,13,23,42,28,17,13,9,19,17,59,96,89,13,23,70,35,19,13,9,5,10,79,37,35,33,9,14,30,9,5,23,43,80,90,85,87,9,14,24,9,5,51,63,47,16,61,71,19,11,7,30,34,72,48,20,105,5,10,80,36,34,5,26,64,50,62,9,5,22,65,11,17,16,46,10,74,70,52,16,44,12,41,5,18,1,0,38,55,46,36,80,56,51,40,61,1,34,40,42,5,15,1,76,44,20,29,43,5,40,39,30,84,26,15,5,59,44,18,15,5,45,18,15,5,34,26,5,31,32,5,30,62,31,9,5,1,3,78,2,54,2,80,2,73,28,2,12,19,10,22,12,58,10,2,80,71,2,12,27,10,22,12,30,10,3,39,34,73,70,15,12,37,34,29,10,52,81,72,26,28,13,46,63,50,92,28,13,44,23,24,24,41,17,53,13,23,56,65,33,72,30,109,230,94,52,32,13,64,43,83,79,71,81,88,94,86,78,47,13,34,55,28,110,30,13,31,40,31,46,18,65,43,49,43,49,46,56,27,23,111,54,59,49,17,44,75,69,40,59,113,127,118,119,91,53,58,79,67,29,25,21,17,71,32,76,30,42,21,102,59,157,17,55,89,59,87,57,67,57,17,81,61,81,96,69,17,22,38,17,41,38,17,78,83,51,67,46,17,56,27,61,50,81,82,74,86,75,55,55,53,76,43,68,25,21,87,88,57,25,98,127,61,86,25,21,31,92,64,36,32,21,81,56,17,42,14,66,85,50,70,64,56,42,47,60,42,38,76,63,87,114,64,29,115,55,29,25,21,47,38,21,29,17,58,75,59,50,17,66,50,32,47,75,33,21,40,30,75,94,41,29,25,78,37,25,51,37,25,21,34,57,33,21,62,52,69,55,61,110,90,95,21,32,83,45,80,44,48,76,71,125,95,110,115,82,123,61,109,111,86,75,135,33,29,52,64,87,51,29,25,106,105,61,67,74,83,47,25,43,67,49,73,71,49,31,25,21,59,66,68,45,66,102,21,43,47,80,21,17,59,61,85,80,60,61,45,44,78,38,66,92,157,74,90,115,25,21,31,42,80,36,62,73,57,120,25,21,17,13,25,41,63,34,30,22,47,50,61,55,98,21,17,35,13,33,43,38,46,45,43,46,74,37,117,123,13,40,107,13,50,53,61,111,55,73,37,19,13,56,81,49,42,59,57,36,135,17,77,74,61,60,43,17,75,66,39,47,61,69,43,17,218,46,63,17,13,24,134,49,87,36,80,61,49,73,69,55,35,25,91,55,23,19,13,20,66,13,18,30,13,9,6,1,79,32,92,28,69,190,5,10,51,48,85,24,78,9,14,40,75,9,5,1,3,75,80,78,79,10,2,79,76,20,2,28,3,66,37,30,28,15,44,49,38,37,9,31,31,32,45,50,54,56,50,62,13,62,34,44,46,19,13,64,84,13,55,54,75,88,53,80,56,49,100,82,17,22,95,66,72,17,13,9,63,69,95,64,62,39,68,13,50,125,13,18,87,13,11,29,59,9,33,63,9,32,5,1,0,48,60,54,3,80,15,3,41,12,35,44,76,96,62,44,95,50,74,53,61,60,61,45,81,76,51,43,17,77,76,40,38,38,73,17,27,69,65,81,75,74,70,66,83,69,72,80,13,78,76,74,65,109,73,13,9,6,1,34,18,31,32,105,5,21,1,0,43,46,15,34,63,18,80,54,9,46,25,50,56,59,54,13,9,14,107,9,21,60,5,10,63,78,82,81,22,21,42,71,12,21,48,57,25,76,9,14,56,25,65,9,5,27,2,45,38,12,33,23,38,26,13,10,24,38,58,13,45,23,13,58,20,38,61,2,9,6,2,34,12,35,24,40,23,13,96,84,76,92,9,6,2,0,3,75,3,33,64,75,47,12,31,48,46,64,27,32,40,33,40,37,75,95,38,76,21,71,39,34,23,85,67,65,89,41,58,76,60,67,70,70,78,97,69,102,90,25,21,36,17,13,9,6,1,59,45,20,5,76,75,74,57,74,70,17,1,41,37,36,38,5,43,21,5,31,20,5,46,1,36,19,18,5,33,50,5,57,1,0,33,58,31,47,51,46,26,30,22,60,35,36,43,46,11,39,60,67,71,64,11,5,26,38,39,78,5,79,50,30,38,18,21,26,35,10,32,80,9,47,40,58,38,11,5,35,77,30,57,30,26,38,52,10,44,81,9,59,47,25,78,60,53,32,35,72,18,32,82,66,70,19,39,5,50,45,12,28,38,46,35,80,44,23,13,16,66,32,35,37,43,23,13,78,27,28,13,34,44,60,52,19,13,44,36,22,50,35,42,52,64,50,13,31,28,13,56,9,6,1,0,3,72,68,18,3,39,37,28,40,42,39,35,20,5,12,38,29,54,38,48,105,24,39,40,35,35,22,18,13,9,6,1,61,32,53,42,52,75,55,45,87,43,49,32,13,9,65,6,1,52,39,40,49,56,18,47,6,1,35,64,89,1,0,41,64,7109,8567,0,15,34,20,25,2,0,12,26,71,6,0,23,41,37,33,37,32,9,6,0,26,41,37,33,33,37,47,35,9,6,0,17,55,6,0,20,61,6,2,0,11,15,10,8,9,11,10,8,9,0,46,26,25,15,12,13,15,22,20,21,0,8,22,0,36,42,40,12,0,34,34,0,40,51,5,0,15,2,0,46,31,53,34,65,44,34,20,41,13,9,5,0,44,1,0,13,11,16,9,6,0,17,25,16,24,13,0,14,19,0,36,38,46,12,0,44,20,24,9,5,1,0,18,22,60,5,1,0,18,21,0,21,15,19,19,27,12,17,5,0,12,24,5,0,12,1,0,19,16,20,18,18,18,17,22,22,18,18,22,22,19,18,0,17,19,33,18,0,23,19,34,9,0,39,19,18,9,0,36,40,48,12,0,38,6,0,16,20,17,19,42,18,0,17,19,43,18,9,0,33,6,0,25,20,17,19,50,18,0,23,37,9,0,15,6,0,33,20,17,19,18,0,17,19,33,18,0,23,37,9,0,15,38,6,0,26,20,18,18,22,22,19,33,18,0,23,19,34,9,0,15,6,0,14,20,17,17,49,0,17,19,27,41,0,17,19,27,44,0,17,19,28,45,0,17,17,33,26,13,0,30,18,0,17,28,45,18,0,17,28,30,18,0,17,17,17,17,17,17,17,17,17,28,40,18,0,17,19,31,48,0,17,19,26,43,0,17,17,43,24,32,18,9,0,33,6,0,34,24,37,9,0,15,34,20,17,17,17,0,16,41,41,13,0,17,9,0,20,36,6,0,23,20,17,17,22,22,29,18,0,18,19,46,18,9,0,39,29,18,9,0,45,6,0,29,24,37,9,0,15,34,20,17,17,22,22,17,0,16,44,41,13,0,17,9,0,20,36,6,0,13,20,17,28,45,18,0,17,28,30,18,0,17,17,17,17,17,17,17,17,17,28,40,18,0,17,19,31,55,0,17,19,26,43,9,0,33,6,0,13,20,17,29,38,18,0,17,17,29,41,18,0,17,17,29,37,18,9,0,44,6,0,23,20,17,29,38,18,0,17,17,29,41,18,9,0,30,29,18,9,0,57,6,0,28,30,29,41,18,9,0,33,6,0,21,20,17,17,29,41,18,9,0,30,29,41,18,9,0,57,6,0,24,20,17,17,29,41,18,9,0,30,29,18,9,0,57,6,0,24,20,17,17,29,45,18,9,0,30,29,48,18,9,0,33,6,0,28,30,29,48,18,9,0,33,6,0,31,30,29,18,9,0,57,6,0,20,33,29,44,18,9,0,33,6,0,27,33,29,18,9,0,57,6,0,15,20,18,19,33,18,0,17,30,23,49,13,0,29,18,0,17,31,23,49,13,0,29,18,0,18,18,37,0,22,22,29,17,0,23,37,9,0,25,6,0,14,20,17,17,49,0,75,26,37,9,0,27,6,0,27,20,17,17,28,40,18,0,18,19,51,18,0,17,49,0,17,17,43,32,18,9,0,36,29,40,18,9,0,33,6,0,26,24,49,9,0,33,6,0,28,27,6,0,27,20,17,17,49,9,0,33,6,0,25,24,49,9,0,27,6,0,24,20,17,17,49,9,0,33,6,0,12,79,33,21,37,12,0,33,6,2,0,33,12,13,14,13,15,5,1,0,22,24,25,0,22,37,9,0,15,5,1,0,22,21,16,13,15,19,0,13,15,19,0,13,15,19,0,13,15,19,0,13,15,19,0,13,15,19,0,13,15,35,37,9,0,19,0,13,15,26,0,13,15,30,0,14,18,18,15,17,0,14,15,30,19,9,0,17,0,13,13,13,13,13,13,13,13,13,33,0,19,33,5,0,17,1,0,23,20,19,0,30,33,5,0,21,0,15,30,33,5,0,21,0,53,1,0,27,20,18,0,25,25,34,37,9,0,25,5,0,53,1,0,21,14,35,30,9,0,17,6,0,27,29,26,22,30,45,18,0,26,75,41,39,16,0,18,18,0,19,30,9,0,71,31,6,0,26,71,68,35,12,0,35,30,9,0,43,6,0,28,35,30,9,0,17,6,0,25,35,30,9,0,65,18,18,9,0,17,6,0,27,71,45,35,12,0,35,30,9,0,30,17,46,18,0,17,18,9,0,71,31,6,0,24,71,45,35,12,0,35,30,9,0,30,17,44,18,0,17,18,9,0,71,31,6,0,12,71,38,35,12,6,2,0,20,14,0,25,22,30,17,23,17,0,17,23,17,9,0,13,0,16,19,19,18,28,13,0,32,15,31,5,0,29,21,12,47,36,31,16,32,9,5,0,54,26,0,35,44,16,46,9,12,48,30,31,44,43,16,46,9,5,1,0,17,16,0,44,26,27,40,39,12,42,5,1,0,28,34,69,4,0,28,37,62,4,0,26,26,78,5,0,90,1,0,24,74,1,0,28,29,34,81,8,0,65,93,4,0,31,16,82,1,0,28,100,1,0,25,26,19,19,21,20,20,20,20,20,20,20,28,28,6,0,26,30,5,0,18,55,69,5,0,12,1,0,32,41,26,30,14,1,0,61,21,20,21,21,17,14,0,8,27,39,32,7,31,31,37,5,0,41,32,41,26,35,21,0,40,25,23,40,38,35,15,33,13,0,71,40,13,9,5,0,34,30,41,30,5,0,36,24,52,48,9,43,34,5,0,45,0,46,32,28,54,43,60,42,13,9,0,27,58,9,0,38,34,45,34,46,36,9,0,24,32,32,34,9,0,40,37,9,0,40,32,9,0,40,88,9,0,24,5,0,34,24,21,21,10,0,30,23,23,25,24,24,24,24,24,24,24,32,32,10,0,25,0,48,31,24,21,21,28,29,24,0,22,49,39,28,17,13,0,34,43,24,13,0,26,61,82,24,13,0,25,9,0,105,0,87,0,46,5,0,38,40,69,9,0,26,0,30,30,0,54,25,33,65,47,53,33,34,17,41,37,13,9,0,18,35,25,16,27,29,47,47,20,47,53,77,13,9,0,20,26,20,5,0,33,31,35,9,0,67,45,35,9,0,61,83,39,13,9,0,18,5,0,37,40,69,9,0,26,0,30,30,0,25,48,71,83,9,0,18,35,25,16,29,51,47,20,47,57,77,13,9,0,20,26,20,5,2,0,15,19,14,2,0,18,0,50,39,26,35,24,20,5,45,28,25,5,43,52,32,25,5,35,31,44,69,61,24,24,5,38,82,39,25,5,41,9,50,5,15,73,86,106,5,58,31,5,21,1,44,47,23,12,44,44,46,32,85,43,51,47,22,55,160,26,75,76,65,74,62,64,56,67,127,21,53,95,52,29,46,71,21,26,83,43,44,48,28,61,59,73,80,21,33,34,81,78,21,26,81,73,79,21,117,17,24,64,17,28,13,9,6,1,0,3,76,2,50,6,48,20,92,6,3,43,66,22,12,43,44,32,41,43,51,22,127,55,26,74,65,74,62,64,27,50,56,67,55,71,65,94,92,83,99,96,180,37,25,21,52,29,46,80,21,26,81,43,43,44,48,28,60,59,73,80,21,71,84,33,31,29,79,106,85,29,34,79,29,25,31,73,25,21,36,77,142,39,21,111,17,24,64,17,13,24,9,6,1,32,21,30,40,72,37,37,40,37,13,9,24,5,68,43,5,19,1,0,3,47,3,30,12,34,18,35,48,13,24,9,6,1,0,3,76,3,27,12,36,41,34,42,38,14,24,9,6,1,0,49,0,58,58,0,30,26,90,3,13,1,0,38,16,0,51,53,30,52,5,3,0,14,1,0,37,26,6,41,44,37,5,96,3,13,1,0,39,30,88,3,0,73,1,0,33,22,27,41,26,40,28,42,21,40,5,12,17,3,1,0,32,54,0,29,46,0,49,0,56,61,4,0,54,1,0,50,36,0,27,16,3,0,36,0,29,41,170,6,3,0,29,41,158,6,3,0,58,41,154,6,3,0,21,54,45,41,9,98,91,18,6,3,0,42,41,120,6,3,0,14,1,0,61,45,25,12,66,5,39,151,7,2,45,42,44,26,34,30,28,26,64,28,20,5,73,64,38,35,5,38,35,5,41,38,5,12,19,20,18,6,1,78,61,84,32,24,9,129,113,5,73,32,20,5,73,29,63,13,127,44,45,5,78,12,34,29,17,6,1,42,43,29,24,22,7,84,50,12,41,23,47,26,13,10,18,47,74,13,10,43,36,23,13,23,29,17,45,13,23,99,28,13,34,28,13,18,48,66,103,67,29,17,51,27,21,92,86,88,71,83,89,104,17,31,38,41,21,26,42,21,17,30,29,17,52,47,114,13,20,46,110,17,66,13,9,6,1,0,79,47,52,32,101,32,43,12,45,42,31,51,22,33,73,49,19,52,48,15,23,54,49,13,18,23,30,30,46,20,46,34,24,69,90,61,27,11,38,26,72,20,31,26,20,33,32,28,25,29,29,30,74,43,42,41,28,40,33,23,29,80,19,16,77,22,1,41,28,41,41,45,52,65,49,22,5,45,51,22,25,37,36,59,10,29,5,12,25,28,6,1,52,19,22,20,35,38,19,43,43,37,29,17,44,38,29,17,13,32,9,5,40,1,0,46,18,132,60,13,0,57,1,0,28,34,73,2,0,40,1,0,28,74,75,12,40,54,19,42,27,35,20,6,1,65,19,73,68,15,70,18,63,34,48,27,1,28,16,21,40,20,1,32,40,71,7,37,20,24,18,7,20,22,30,7,1,53,81,100,63,30,24,19,9,14,33,21,23,24,16,36,32,34,58,120,21,17,16,17,15,9,9,6,1,0,3,51,92,3,20,68,38,71,86,28,56,70,38,7,74,38,7,63,98,88,76,29,7,82,33,25,54,25,86,28,15,80,25,27,9,6,53,68,174,5,32,58,36,58,42,22,25,68,34,52,44,67,13,18,84,13,9,44,5,65,62,29,24,30,33,13,88,9,6,59,43,32,54,22,24,9,27,96,9,27,5,45,19,49,29,66,13,9,5,78,82,65,19,36,44,29,31,34,36,38,55,9,32,39,37,38,32,23,15,9,46,21,58,51,45,13,63,40,44,21,30,32,15,40,34,23,9,27,37,9,24,30,50,53,9,26,31,77,24,53,9,25,35,9,31,72,22,9,26,78,9,23,75,22,9,27,55,110,30,28,31,15,9,28,84,40,49,9,5,44,63,29,64,9,56,47,9,30,48,37,35,30,45,40,26,33,29,85,37,30,32,21,68,17,30,117,69,37,30,17,38,33,34,18,81,13,31,74,33,47,39,63,29,76,25,33,21,65,17,13,46,27,33,35,38,18,76,13,61,65,35,62,84,51,54,23,67,65,21,17,13,9,19,5,44,44,20,42,37,36,37,37,24,53,69,42,17,48,13,9,53,46,70,67,56,59,52,13,47,48,42,38,40,50,58,51,26,17,35,36,17,22,78,25,33,70,26,35,23,17,13,31,35,70,45,36,55,22,27,13,51,47,47,13,36,9,32,52,9,5,23,23,37,40,72,87,13,45,79,13,20,22,39,26,14,13,22,28,105,10,80,39,37,41,38,28,29,37,65,26,31,65,38,29,38,29,43,75,61,46,39,73,44,48,24,24,19,28,29,49,32,17,22,35,51,17,26,105,80,22,13,74,39,33,41,45,129,17,13,21,74,31,13,18,28,13,10,33,37,38,28,60,33,29,43,93,68,37,45,53,21,34,17,13,24,10,44,41,37,62,28,65,38,29,43,35,39,62,27,61,46,39,21,72,17,27,33,17,28,29,26,94,41,52,43,41,65,88,62,29,64,25,21,49,17,22,34,17,13,20,21,48,14,10,23,23,23,38,64,67,26,9,6,21,1,0,44,54,64,71,76,37,77,76,79,21,135,36,37,36,21,62,57,32,67,5,26,66,45,48,9,45,50,9,42,65,9,14,66,9,5,10,57,5,81,20,86,26,69,135,77,54,9,41,5,10,83,5,20,23,58,80,90,54,37,21,29,21,22,26,38,25,9,84,12,69,40,15,6,1,36,42,67,54,40,1,39,25,25,17,33,43,81,43,20,56,10,23,54,7,1,99,64,35,66,68,68,74,77,27,54,64,28,33,9,95,23,22,11,33,27,19,6,49,21,48,23,19,6,48,13,41,7,67,31,66,30,80,9,14,42,9,95,58,6,12,30,22,31,28,68,21,30,16,24,67,21,30,16,79,72,24,107,64,39,18,15,79,37,15,86,84,63,30,27,85,84,73,56,65,27,24,35,37,18,15,81,90,59,60,58,54,65,36,28,33,26,51,55,60,93,60,93,77,31,56,58,49,33,21,38,76,38,21,55,38,21,58,35,78,64,21,46,69,119,94,74,108,85,65,50,89,63,68,44,45,94,45,56,33,30,25,30,44,39,41,45,56,33,30,25,92,70,55,84,114,115,78,79,66,25,30,73,25,21,17,81,74,81,62,79,48,17,24,33,32,18,15,86,29,48,36,62,54,61,17,37,61,17,62,29,73,21,19,31,61,65,21,85,87,75,54,25,65,21,53,90,56,32,59,37,26,21,26,65,21,17,22,60,17,15,86,82,69,81,44,32,29,88,36,32,29,74,36,52,74,21,30,16,86,29,28,62,75,62,29,73,21,19,31,87,65,21,86,28,65,33,22,17,22,66,61,17,15,71,85,44,75,54,34,31,62,86,74,17,90,24,60,28,37,83,22,17,24,27,28,18,15,9,6,1,3,71,68,33,64,58,3,35,71,15,48,45,16,10,28,48,33,5,14,1,50,28,41,20,5,17,60,20,5,17,1,26,56,1,0,53,3,89,28,3,23,39,45,40,71,55,99,1,50,28,65,41,50,5,1,28,56,41,14,15,5,34,39,5,50,85,85,34,26,45,52,9,59,48,44,9,41,1,52,30,47,90,51,74,15,23,94,27,17,30,42,67,59,108,30,32,27,23,14,54,6,48,34,26,27,42,34,122,31,15,30,9,6,67,44,53,78,66,33,9,44,6,22,36,80,42,35,26,28,22,41,32,5,26,68,35,83,24,65,95,58,57,27,61,15,37,9,23,49,71,71,64,36,21,95,75,90,94,63,92,88,93,57,55,56,25,21,35,61,81,86,88,51,88,21,17,27,44,17,25,50,61,17,18,9,5,41,34,72,70,71,70,69,67,5,38,72,74,67,76,37,78,55,71,67,45,35,56,5,33,29,86,60,60,9,61,74,69,34,9,25,5,47,39,30,51,34,77,19,33,70,40,19,9,35,13,101,42,25,44,42,52,23,13,54,103,96,94,96,46,66,49,63,98,19,50,48,85,82,55,49,92,21,17,82,35,63,55,79,21,58,127,21,17,83,88,61,52,62,37,63,71,65,73,58,21,17,30,115,17,60,52,14,31,41,40,43,57,59,55,49,39,17,22,75,50,65,17,13,18,40,88,91,88,48,46,123,17,22,45,44,47,61,55,49,21,106,39,23,58,249,43,27,21,33,17,13,9,19,130,48,77,37,9,36,21,26,5,27,21,71,79,24,47,28,36,25,15,9,5,28,75,76,46,54,47,92,23,5,60,97,5,50,49,24,29,9,42,20,25,9,46,22,54,58,27,9,46,78,77,77,85,29,83,44,34,9,78,52,23,5,42,33,60,15,55,26,80,81,78,76,158,80,37,58,66,11,5,56,33,19,9,79,40,34,19,33,31,45,39,35,31,34,39,32,13,20,5,33,83,29,19,9,36,59,69,77,43,53,60,51,68,66,128,32,38,23,13,111,87,88,33,95,32,86,45,51,79,21,17,40,149,17,85,39,13,18,138,43,37,13,9,14,41,120,38,13,18,48,39,13,9,5,42,27,28,35,18,32,35,27,28,35,30,32,5,69,71,57,31,80,30,60,33,17,42,9,31,5,40,31,72,76,83,31,34,35,9,5,48,72,28,45,35,9,5,37,25,45,23,36,41,42,66,55,51,25,30,41,25,21,18,20,27,33,100,18,38,13,9,5,1,50,57,27,17,67,59,83,38,102,10,52,48,23,43,51,38,34,31,40,6,54,1,55,36,35,50,39,22,63,74,94,81,47,105,13,9,5,32,1,0,53,33,51,31,39,3,51,49,3,91,57,65,92,25,30,5,59,56,79,61,65,59,26,27,1,46,21,108,25,30,5,20,25,62,46,21,81,26,31,31,54,34,19,5,20,92,66,65,26,27,1,60,41,12,13,66,22,19,23,23,6,1,55,41,39,19,1,3,80,45,3,111,57,76,67,74,34,5,54,17,27,13,83,118,9,21,51,80,74,77,77,34,9,5,10,69,5,31,64,1,3,77,67,3,52,56,44,28,109,142,52,5,16,1,65,90,26,28,29,26,15,55,16,37,61,10,5,22,1,38,25,66,5,10,42,28,50,53,83,57,5,1,3,98,100,3,100,33,55,20,26,24,6,62,78,76,78,58,46,37,5,10,64,5,25,74,102,60,102,82,77,59,47,30,17,24,101,94,97,42,62,10,18,78,9,6,31,32,5,81,77,38,44,80,15,26,27,31,63,102,32,37,62,50,36,89,58,37,29,40,14,9,37,33,38,46,5,81,82,82,42,20,39,43,65,6,84,56,18,75,36,60,64,13,74,102,56,79,164,13,52,9,5,43,26,57,5,87,36,34,37,45,21,74,74,45,17,15,22,83,35,15,108,13,24,84,17,26,24,24,35,36,23,16,26,20,35,32,39,9,7,33,66,92,32,81,54,52,20,101,101,98,46,98,48,80,11,5,48,41,29,58,44,70,104,57,23,25,40,53,19,13,9,5,71,80,75,28,1,46,50,61,29,1,87,30,63,60,53,47,51,125,13,10,47,25,23,34,33,11,62,83,38,49,74,75,28,61,75,55,25,21,26,78,21,17,22,73,17,13,9,5,1,41,16,47,27,7,41,1,25,45,85,1,47,96,1,42,20,37,82,40,93,38,5,14,25,5,18,1,39,75,1,49,87,1,40,68,1,41,56,1,42,28,55,63,86,69,86,62,70,85,41,39,44,50,6,1,65,95,72,40,46,72,9,21,7,18,72,50,15,5,22,13,20,22,23,19,23,6,46,52,29,15,23,11,5,43,49,26,15,24,31,11,5,20,1,3,64,64,59,41,3,65,62,27,13,20,115,15,13,20,21,25,28,13,12,95,24,72,40,46,73,9,21,10,1,63,30,41,112,49,17,22,5,83,46,57,82,25,9,5,1,58,15,63,62,73,89,92,55,38,30,36,25,25,11,79,16,43,45,18,10,5,20,30,62,9,44,5,11,82,92,80,18,11,85,54,33,25,36,10,48,29,5,51,25,39,41,15,52,51,50,11,32,6,23,1,68,70,81,46,61,76,36,20,5,48,50,41,20,5,17,86,78,70,48,32,55,51,24,9,5,17,1,41,60,1,25,24,16,21,15,2,34,65,36,71,63,31,50,26,32,41,44,51,23,43,43,29,48,82,13,9,22,69,36,9,21,7,28,1,62,60,1,47,86,1,51,73,1,69,52,41,34,24,9,5,1,70,61,61,100,96,5,33,1,0,15,17,36,28,46,54,42,70,58,52,30,34,36,66,60,52,42,34,46,40,50,40,24,48,52,52,38,50,35,2,0,3,78,79,11,3,42,38,41,48,52,44,17,54,49,45,72,62,1,3,78,26,3,28,17,59,17,75,25,20,1,49,17,60,28,5,56,42,21,42,21,24,19,21,25,43,62,45,63,29,82,79,57,38,90,160,81,27,17,13,9,79,19,9,21,52,21,52,21,31,34,9,24,21,40,20,46,51,105,15,9,33,1,3,74,3,44,35,37,34,29,19,46,122,62,92,70,91,43,61,27,46,83,6,62,6,89,83,20,46,99,107,113,110,44,103,108,93,86,109,59,78,158,12,43,23,41,26,13,10,18,41,35,13,10,43,52,54,23,13,23,29,17,45,13,23,37,13,34,28,13,36,64,54,44,75,69,40,59,113,127,118,119,91,53,58,68,67,29,25,21,17,71,32,76,30,42,21,157,17,59,87,57,67,57,17,22,38,17,41,38,17,42,14,18,65,42,66,133,58,75,59,50,17,55,45,75,153,44,33,17,66,50,49,47,75,33,21,32,83,44,75,69,82,123,52,61,109,111,86,73,135,33,29,52,77,87,51,29,47,72,53,77,71,29,25,21,17,88,88,84,24,32,46,76,90,90,68,54,87,82,89,81,17,13,36,32,63,88,13,20,24,39,87,18,13,10,42,76,50,57,57,45,52,30,53,91,21,28,43,59,22,17,22,54,17,13,24,10,44,34,22,27,55,23,13,40,43,85,67,87,44,32,25,75,21,31,45,21,52,100,41,78,125,107,61,43,39,70,91,62,29,51,63,59,38,110,69,88,59,63,67,47,63,47,59,67,48,65,71,122,107,90,59,43,37,42,105,88,52,86,98,67,51,78,45,94,41,37,34,56,29,91,46,80,86,29,53,129,66,60,77,47,41,49,81,75,115,53,62,133,95,59,61,70,99,41,56,95,61,62,47,54,42,37,42,65,37,78,141,97,73,66,65,39,33,38,72,99,108,85,65,46,33,136,74,29,25,21,88,49,78,49,73,111,25,126,21,41,50,66,59,55,43,31,103,67,44,25,21,17,13,9,6,1,0,62,46,105,64,23,12,44,23,49,26,13,10,18,49,27,30,17,38,84,17,38,13,9,6,1,21,59,75,15,5,80,29,5,41,43,48,25,13,53,76,41,13,9,61,35,29,29,51,34,61,53,46,52,43,12,50,25,5,35,20,36,19,23,38,45,36,5,1,0,78,63,81,97,35,92,79,51,60,62,35,51,61,61,34,40,71,92,49,40,12,39,23,41,26,13,10,18,55,29,52,42,75,72,29,34,17,22,86,17,13,9,6,1,63,36,44,5,50,51,5,59,1,52,36,1,64,26,19,29,30,27,34,31,2,39,30,36,1,39,18,30,40,49,82,5,1,54,25,56,29,37,30,48,9,7,32,1,30,12,27,25,24,33,35,21,31,23,24,75,13,9,72,28,9,38,27,9,5,58,1,43,62,92,57,22,75,91,5,78,68,125,13,1,3,59,3,50,28,31,56,6,76,26,17,36,36,6,26,1,56,31,31,37,19,44,60,19,35,48,79,19,69,61,19,5,24,22,18,56,6,127,1,3,46,3,34,72,47,40,36,57,29,25,37,47,44,12,32,35,39,96,57,74,87,154,32,66,37,32,19,28,48,37,38,37,43,46,48,48,56,47,31,21,45,34,53,99,53,85,43,75,99,25,39,48,61,68,54,72,52,29,62,73,66,69,94,90,50,35,98,52,29,81,83,84,25,56,54,144,29,25,58,69,77,38,57,78,64,79,59,67,94,49,63,59,75,35,29,25,21,82,84,71,37,53,58,74,102,61,63,58,67,60,110,89,93,76,99,56,48,87,82,43,63,37,42,56,52,86,43,37,33,72,111,33,29,25,21,59,104,94,48,93,22,38,44,58,52,55,86,91,95,102,59,66,90,119,21,41,78,64,86,44,82,49,27,102,59,66,168,21,39,90,43,105,21,19,73,65,229,17,83,84,67,91,71,49,58,60,93,148,23,29,91,113,81,75,25,35,54,40,29,25,21,17,62,63,46,89,21,60,74,21,17,78,96,32,66,21,80,43,139,83,62,21,26,45,21,17,52,81,55,46,85,67,71,17,26,13,10,47,44,68,34,49,50,72,39,47,74,46,21,19,30,14,68,30,24,56,35,38,53,17,15,63,28,24,41,38,48,17,15,83,32,48,48,53,54,57,91,25,23,17,66,42,39,35,40,36,50,56,29,27,21,19,28,14,53,96,74,62,50,40,21,26,150,21,18,96,103,69,34,49,93,36,49,43,43,28,55,85,85,82,46,21,101,105,61,34,41,111,21,26,63,88,62,88,64,85,56,48,30,47,37,79,94,26,21,88,61,17,61,49,129,35,55,29,44,40,54,82,33,29,27,21,17,65,26,22,44,62,55,61,79,89,17,24,42,17,71,48,33,27,25,19,47,84,97,19,76,114,19,46,106,50,17,88,31,34,44,34,19,13,9,6,1,35,27,62,41,19,68,44,19,49,93,182,9,6,1,3,48,3,30,22,39,19,22,53,30,22,11,24,85,9,20,6,1,41,24,25,35,47,19,45,37,13,46,46,13,18,47,13,9,5,33,1,54,31,42,19,21,9,38,23,9,14,21,37,27,13,18,40,32,13,32,39,32,39,37,46,39,17,59,46,17,51,39,17,22,46,17,13,61,48,61,48,9,5,16,1,61,47,33,94,95,76,1,49,87,43,53,90,22,1,41,51,33,51,41,51,50,52,26,20,18,46,45,125,9,5,10,35,38,46,116,9,44,45,108,9,5,80,45,1,52,26,20,18,33,45,125,9,87,38,101,9,49,5,10,35,38,116,9,87,38,76,9,49,5,1,44,75,41,79,5,44,82,5,38,1,52,62,29,50,5,10,110,5,1,43,35,20,5,35,85,5,14,1,32,17,30,46,47,9,14,59,9,5,15,1,39,58,1,27,81,1,0,79,39,55,41,41,43,34,41,30,24,34,58,97,67,38,47,41,30,40,38,1,3,37,3,28,15,20,46,29,24,22,7,12,25,34,29,10,22,81,36,53,60,54,10,43,36,43,44,23,13,46,58,51,56,65,21,26,65,21,17,65,31,61,17,49,79,156,17,27,14,101,26,45,13,46,75,42,44,17,13,18,25,76,47,65,33,77,100,31,94,52,53,52,50,61,71,170,25,83,85,55,63,50,52,25,21,26,69,21,17,13,20,26,19,14,9,6,1,3,36,3,32,73,29,22,81,64,32,27,66,62,32,47,50,30,42,9,54,50,9,14,50,35,30,58,16,9,6,12,30,22,80,38,48,31,10,43,36,43,44,23,13,35,46,64,27,46,52,42,27,78,45,68,51,70,91,79,21,35,18,45,62,17,30,35,82,17,30,67,17,70,30,179,63,72,67,81,37,81,82,29,55,13,86,25,46,111,51,53,43,43,111,43,13,27,36,13,21,34,34,39,17,22,38,46,67,21,71,17,13,18,86,121,98,45,58,13,20,21,38,86,38,67,14,10,46,30,38,51,35,40,43,47,43,17,37,47,17,13,28,28,13,65,70,70,68,72,76,69,54,32,60,52,90,55,38,46,18,66,88,82,78,109,19,52,40,99,80,79,156,23,17,32,13,47,103,13,44,37,69,54,17,68,61,93,37,71,76,56,56,77,73,50,54,80,132,38,40,23,85,17,45,50,94,97,116,81,68,73,61,31,106,51,90,64,63,68,55,72,52,76,49,91,32,47,63,26,21,26,54,21,17,13,18,74,83,104,13,24,10,44,66,48,23,13,56,37,58,57,30,43,68,77,91,44,47,49,76,85,42,72,58,87,104,45,29,40,27,70,81,77,21,17,81,53,72,44,19,13,65,46,34,77,31,40,34,40,19,13,9,6,1,37,19,20,20,12,19,33,53,41,42,36,40,21,10,20,34,54,59,50,35,35,40,21,10,20,34,54,50,50,36,40,21,9,6,1,41,34,1,48,58,92,70,75,58,54,67,42,82,44,25,25,20,28,18,35,5,24,16,27,66,29,55,65,5,35,31,49,76,60,23,35,35,24,51,48,27,18,22,35,35,39,24,44,48,27,18,9,60,37,53,96,37,41,9,37,121,36,52,68,78,34,17,15,9,5,17,74,32,25,83,5,103,27,111,40,63,33,38,17,92,31,52,17,26,14,30,66,13,12,5,22,53,34,33,12,5,19,111,30,115,76,60,35,85,82,17,14,41,75,80,35,56,21,17,26,13,12,5,33,16,17,32,10,5,22,9,45,66,55,36,28,30,23,25,28,19,26,38,42,59,88,44,133,49,21,17,21,11,48,55,48,56,13,57,104,66,106,25,32,49,50,19,56,39,17,13,50,55,53,57,43,46,25,17,67,13,9,5,15,45,22,17,29,24,10,16,5,24,16,31,36,34,20,16,10,5,53,52,62,34,33,12,27,32,82,16,12,6,1,3,16,3,54,52,1,53,46,52,65,40,41,38,9,74,7,12,13,34,28,16,46,31,6,1,58,23,39,73,33,17,16,10,15,1,49,98,62,38,5,40,43,5,15,1,62,81,57,31,22,5,44,46,36,45,31,18,20,48,10,5,10,91,13,25,49,9,19,61,41,55,61,124,73,28,17,22,75,17,13,26,9,5,52,18,1,63,85,94,71,76,43,16,55,5,12,42,20,32,45,64,32,115,90,96,79,17,66,76,48,64,63,22,55,44,41,106,48,24,17,15,34,45,13,9,6,2,39,40,57,40,61,7,1,44,61,40,73,7,1,42,60,40,67,7,1,78,56,61,66,50,68,33,68,37,37,59,13,47,62,13,23,11,19,7,1,74,18,28,41,21,37,5,32,28,33,29,23,5,42,54,125,19,5,50,1,62,18,28,41,21,37,5,79,23,5,61,1,39,9,59,26,56,64,11,30,77,110,9,20,5,15,23,60,75,45,41,9,16,5,1,47,18,35,35,40,6,44,39,43,16,20,65,55,62,10,5,10,41,5,1,34,35,43,14,12,83,51,49,103,49,61,83,34,5,12,77,91,29,50,61,28,32,32,9,5,24,1,31,27,52,39,38,41,5,9,72,66,5,15,44,96,9,14,105,59,26,9,5,1,24,58,68,55,58,27,74,49,51,13,18,29,13,11,6,40,27,39,51,49,5,141,26,19,13,31,34,17,35,15,32,39,63,13,17,6,9,63,48,26,32,17,22,33,17,15,11,48,30,47,24,16,40,16,26,16,10,5,15,31,42,22,30,48,5,2,75,15,24,18,3,78,21,3,66,62,41,41,45,30,24,5,53,15,43,23,51,25,51,52,24,5,16,31,32,23,46,43,23,42,39,93,26,27,13,9,54,60,41,6,58,23,60,5,18,69,5,22,73,5,12,13,25,6,1,8,58,63,106,135,15,9,49,23,70,39,19,32,48,50,21,17,21,11,5,15,24,31,83,31,53,29,32,10,62,5,53,14,34,5,12,36,12,22,28,6,2,3,33,3,20,65,27,70,53,24,41,43,35,13,24,28,13,28,29,13,54,92,31,94,33,57,51,21,26,72,21,28,59,32,22,17,22,68,17,13,10,5,12,35,90,10,29,6,1,8,47,69,90,101,141,62,61,82,9,49,38,34,31,30,30,15,9,36,49,53,44,34,16,25,50,26,16,10,5,15,44,48,5,2,49,19,25,33,76,19,45,5,51,15,1,87,24,35,47,66,45,43,9,26,5,27,58,5,39,26,37,48,24,29,12,31,11,6,1,37,30,30,30,30,33,3,31,41,1,30,42,1,0,33,24,20,12,30,22,28,10,44,42,43,99,81,57,82,71,21,51,17,22,65,17,13,50,43,45,53,33,21,69,17,39,13,41,39,40,18,43,60,17,36,49,17,43,56,17,43,78,53,64,21,17,50,85,53,71,21,17,58,76,17,61,82,17,37,13,41,39,41,35,18,50,49,37,13,65,40,43,45,71,17,84,62,17,13,60,49,45,15,26,62,75,46,31,71,47,42,34,61,19,13,9,6,1,0,43,58,36,3,62,3,26,17,12,30,22,26,10,23,38,28,13,38,43,28,13,56,25,28,13,49,45,92,13,26,73,34,63,23,35,38,10,18,47,52,44,13,9,6,1,0,36,42,27,42,12,34,42,40,43,45,53,90,107,45,85,97,83,78,79,31,25,77,75,27,21,61,48,48,36,29,86,25,35,49,25,45,82,85,65,67,48,69,88,59,63,67,47,63,47,59,67,48,90,96,43,71,37,34,124,56,69,29,25,21,17,13,27,70,46,42,30,60,15,9,6,1,0,3,78,3,31,12,35,24,17,88,72,13,23,56,13,9,6,1,0,42,60,34,18,25,33,33,61,10,28,37,23,6,32,1,0,3,79,3,37,68,12,50,40,43,24,102,29,18,13,9,6,1,0,15,33,20,22,28,2,51,104,28,15,5,48,29,18,15,5,55,49,32,18,37,47,9,5,34,30,46,74,9,5,25,21,11,1,0,68,20,14,38,26,53,19,59,24,17,47,16,2,80,74,40,46,32,21,5,71,32,1,28,74,1,31,46,33,1,3,43,3,56,32,23,35,24,32,20,43,1,3,43,3,80,29,23,41,23,35,24,32,20,45,1,0,27,0,33,28,24,0,24,44,1,0,21,77,27,36,0,28,33,50,58,17,0,63,53,0,48,26,0,44,51,15,30,33,60,39,31,64,64,0,73,73,0,65,78,62,0,31,0,42,28,32,40,52,17,11,32,9,50,52,36,0,44,29,50,9,14,40,25,7,0,21,23,38,0,41,57,83,7,5,3,0,12,1,0,32,85,1,0,39,27,57,24,50,56,58,0,16,31,45,5,35,34,5,3,0,7,66,105,0,48,68,39,14,32,41,9,0,20,34,86,18,90,11,9,7,7,0,21,15,16,55,5,0,23,3,1,0,22,9,16,2,0,44,42,30,0,38,48,63,0,41,72,0,52,60,28,0,29,0,28,31,48,14,27,56,58,96,0,43,35,7,0,47,16,4,0,40,106,0,50,3,0,41,56,3,0,15,2,0,24,0,52,27,92,50,5,33,19,22,35,39,40,51,6,66,49,27,27,11,18,22,77,61,12,8,47,10,15,39,30,7,61,56,64,29,9,38,59,45,51,9,5,67,68,36,64,40,9,5,15,1,52,35,52,126,5,21,1,0,43,71,14,55,19,60,100,9,56,46,52,9,5,45,34,22,6,33,23,28,32,32,25,26,45,26,20,26,28,24,19,19,27,35,35,19,6,32,47,30,59,22,26,25,28,26,38,40,47,10,35,30,38,56,10,36,46,19,47,19,44,36,17,38,6,35,40,49,5,76,75,35,5,30,45,5,47,38,32,5,35,36,5,20,1,38,33,40,73,46,12,14,39,60,43,78,28,45,63,21,10,15,46,78,62,66,72,40,32,9,6,1,3,72,27,3,27,73,25,26,3,34,49,3,41,25,9,43,5,13,29,38,78,38,9,5,1,43,76,33,30,35,157,58,28,41,49,43,49,51,98,30,37,24,41,34,68,70,98,53,5,43,52,96,57,32,76,75,32,62,69,5,46,40,5,27,30,36,31,24,26,24,33,14,16,17,31,51,9,6,37,89,19,112,9,22,61,9,47,6,9,53,84,25,32,96,97,66,13,69,76,67,73,52,81,23,20,28,72,23,56,45,63,57,86,77,40,35,39,32,104,89,42,46,85,42,36,82,64,47,38,88,25,14,10,35,102,37,37,51,75,13,9,14,64,9,73,41,33,90,96,53,35,33,42,24,42,53,17,15,44,52,86,40,76,21,17,55,41,97,17,50,50,17,15,27,9,46,50,51,36,43,72,10,28,64,9,23,49,45,9,53,5,15,28,16,5,1,54,46,24,30,48,42,73,52,221,57,31,22,13,9,5,44,75,74,36,31,62,31,49,51,36,17,26,14,33,52,9,41,31,48,46,9,5,1,27,66,1,27,61,1,62,28,67,5,10,46,5,1,77,52,54,5,41,39,45,42,25,14,108,82,46,38,5,44,1,59,21,74,55,99,66,37,120,13,35,92,48,13,9,23,57,9,43,69,9,38,58,98,76,9,5,19,1,71,40,29,25,2,49,47,34,42,49,66,101,102,84,52,9,5,70,86,15,5,52,62,25,38,9,53,164,9,14,26,9,5,1,52,48,21,83,9,70,51,5,17,24,57,85,5,70,42,72,25,24,9,19,71,9,6,1,62,37,46,5,35,57,5,10,36,5,1,31,35,27,5,10,29,5,1,39,50,12,18,47,32,46,6,1,33,14,15,55,54,67,6,28,16,20,19,10,5,10,23,5,1,28,14,15,55,44,89,57,6,28,16,20,19,10,5,10,23,5,1,33,14,15,55,56,89,69,6,28,16,20,19,10,5,10,23,5,1,33,45,1,2,48,120,0,34,23,89,434,128,462,2,72,241,31,28,36,47,83,6,201,78,69,54,82,241,2,85,51,62,25,49,19,21,17,35,11,41,33,51,13,55,43,13,9,26,26,9,5,40,44,5,50,1,60,57,37,90,7,1,95,51,62,25,49,19,21,17,35,11,41,33,130,13,55,43,13,9,26,26,9,5,40,44,5,10,38,5,1,61,62,0,15,17,42,42,14,40,42,34,44,86,64,46,47,2,0,24,0,28,0,28,0,3,11,3,0,7,18,0,23,30,19,14,16,16,16,20,0,4,36,3,12,3,40,3,30,29,79,27,15,4,0,30,27,25,45,23,58,56,4,19,62,26,5,3,0,4,50,3,23,20,16,4,0,22,21,26,12,4,140,8,5,16,12,4,32,47,18,18,17,16,15,14,20,17,16,14,20,18,17,16,15,14,20,20,19,17,16,14,20,20,19,17,16,14,20,25,24,18,17,15,16,13,24,4,2,0,4,26,3,22,20,16,4,0,24,17,37,4,17,37,4,17,37,4,17,37,4,20,2,0,4,25,3,22,20,16,4,0,23,33,29,31,31,16,2,0,4,25,4,0,31,16,12,4,22,44,4,47,2,11,1,0,21,0,26,46,22,30,5,66,34,4,36,5,0,86,26,28,26,28,33,0,5,62,5,0,21,21,0,5,77,4,80,5,0,26,0,5,28,5,0,15,0,5,20,30,21,17,5,0,35,20,0,26,61,44,5,0,66,3,0,5,50,4,30,23,16,5,0,35,0,22,18,33,0,23,0,29,29,41,21,27,23,22,0,49,45,45,31,7,0,40,0,40,46,27,7,0,47,20,74,75,41,16,51,46,32,44,0,83,32,18,9,21,9,0,53,42,0,72,30,5,0,32,47,42,41,0,60,45,26,5,0,17,3,0,5,63,40,4,31,16,5,0,31,29,0,23,23,0,83,27,0,35,54,50,34,73,14,63,7,5,3,0,5,26,4,16,5,0,22,23,3,0,5,69,4,25,22,16,5,0,26,15,59,40,21,7,5,59,40,20,7,5,17,3,0,5,18,4,23,20,17,5,0,24,62,15,3,30,24,1,0,3,55,2,34,3,0,23,0,28,48,24,30,44,20,34,22,22,32,48,56,42,37,0,5,12,5,0,20,20,18,16,17,17,13,4,0,5,64,62,40,4,76,5,0,24,80,78,17,96,18,5,0,60,96,160,61,140,27,84,160,73,129,3,0,5,78,5,0,38,9,31,19,58,5,4,0,0,5,39,4,16,5,0,29,35,0,37,22,33,15,33,42,0,27,0,35,43,0,70,68,58,18,18,52,33,14,27,50,49,22,7,7,0,29,3,0,5,44,50,4,16,5,0,18,48,54,38,20,72,3,0,5,23,4,31,17,5,0,29,9,31,44,14,43,7,17,3,0,5,23,4,66,17,5,0,19,10,9,32,17,0,74,67,28,5,0,13,3,0,5,64,5,0,25,0,5,54,4,44,46,34,4,27,17,5,0,27,9,33,18,3,30,24,1,0,25,0,3,23,3,0,20,0,25,42,21,30,25,26,0,5,53,4,36,5,0,44,22,20,34,22,22,32,0,5,12,5,0,38,0,5,78,4,80,5,0,72,32,33,17,18,19,20,72,0,40,31,57,65,40,27,0,20,15,9,0,5,57,74,4,46,5,0,51,0,29,206,3,0,42,42,45,0,5,60,5,0,24,42,43,23,3,0,5,54,5,0,38,45,44,38,25,19,4,0,5,67,5,0,38,45,45,4,0,5,45,4,16,5,0,29,30,35,0,20,25,71,0,65,83,12,40,37,5,3,0,5,81,5,0,18,67,3,0,5,23,4,31,17,5,0,29,29,81,59,31,12,37,5,3,0,5,23,4,66,17,5,0,19,29,3,0,5,36,4,77,80,5,0,43,15,47,0,61,0,43,17,41,29,0,61,57,53,33,9,14,0,18,37,66,28,14,0,18,17,31,33,17,26,24,11,0,73,73,75,59,32,27,30,0,67,57,53,33,9,14,0,14,52,67,5,0,52,19,0,27,0,18,3,0,5,38,4,65,51,5,0,25,27,0,48,43,64,5,3,0,5,63,5,0,25,24,21,1,0,3,65,22,3,0,20,69,37,9,34,2,9,0,3,12,47,15,3,0,3,18,10,3,0,28,0,3,81,42,11,3,0,133,0,3,44,11,3,0,113,0,3,51,11,3,0,52,0,3,79,2,76,76,74,27,2,78,80,75,12,2,22,19,10,3,0,28,20,79,44,1,0,3,14,40,34,43,15,3,0,3,20,11,3,0,32,0,3,18,10,3,0,32,0,3,57,2,71,19,10,3,0,31,24,40,0,15,15,3,0,13,16,16,20,0,58,36,19,26,14,19,25,14,19,25,14,19,24,14,19,24,14,14,17,5,0,30,46,5,0,26,19,3,0,28,44,11,1,0,33,0,3,11,33,15,3,0,3,18,10,3,0,22,0,3,66,2,23,25,10,3,0,31,28,73,0,20,0,42,23,0,46,70,0,20,0,42,25,41,0,28,23,51,21,15,21,15,9,5,3,0,23,14,32,3,0,22,10,47,22,41,5,3,0,22,14,3,0,25,0,14,1,0,3,29,11,3,0,32,33,43,18,31,12,13,0,52,43,29,5,0,31,3,1,0,3,14,33,47,15,3,0,3,18,10,3,0,36,47,0,3,23,11,3,0,20,0,3,13,11,3,0,26,48,16,68,0,3,61,36,2,22,29,19,10,3,0,38,36,33,14,3,0,39,32,0,12,1,0,3,44,2,22,20,10,3,0,28,26,0,42,22,64,3,0,42,22,97,3,0,15,18,1,0,3,45,2,22,29,11,3,0,48,12,15,23,0,28,19,22,0,20,20,3,0,36,63,0,29,22,43,0,24,34,0,37,61,3,0,19,30,25,10,3,0,35,29,0,33,24,37,3,1,0,3,38,2,22,21,11,3,0,40,34,0,48,37,54,42,3,0,32,1,0,3,30,2,22,21,11,3,0,30,26,63,31,0,31,26,0,44,25,5,3,0,22,0,17,1,0,3,63,2,30,29,11,3,0,43,38,0,48,0,48,53,36,21,4,1,0,31,0,3,11,33,52,15,3,0,3,23,11,3,0,25,26,20,0,3,18,10,3,0,30,42,0,3,40,2,29,19,10,3,0,25,20,0,26,23,20,3,0,30,0,27,30,17,3,0,18,26,20,0,34,1,3,62,2,29,19,10,3,0,28,28,0,32,15,24,3,0,38,0,27,30,17,3,0,18,26,20,0,42,1,3,48,2,22,19,11,3,0,26,70,23,3,0,21,19,20,0,72,42,35,40,32,25,30,41,39,36,9,13,25,25,25,25,25,25,16,18,27,5,3,0,29,15,9,0,17,17,26,0,24,22,24,3,0,12,1,0,3,46,2,22,28,20,11,3,0,33,41,25,54,26,1,0,20,19,30,21,22,13,18,19,40,21,24,26,23,27,18,27,28,16,20,23,20,19,29,29,22,23,27,20,20,29,25,40,26,19,15,26,30,28,23,33,32,29,23,30,31,17,28,31,27,32,28,42,40,32,26,22,30,26,37,34,31,24,35,23,41,2,0,3,11,33,47,15,3,0,3,23,11,3,0,25,0,3,18,10,3,0,24,0,29,28,0,24,50,0,29,19,12,12,12,12,12,12,11,2,0,32,16,12,12,11,2,0,53,16,12,12,11,2,0,3,45,11,3,0,48,15,0,58,30,30,0,26,31,31,45,0,19,21,5,0,12,1,0,3,23,2,62,61,61,60,22,2,30,20,10,3,0,24,33,70,15,3,0,33,58,3,0,10,29,18,64,12,3,0,33,67,10,1,0,3,9,47,15,3,0,3,18,10,3,0,24,0,3,59,11,3,0,39,43,0,46,41,17,5,3,0,14,1,0,3,41,2,25,10,3,0,27,16,54,3,0,44,16,20,10,3,0,21,38,10,3,0,15,44,0,46,28,0,69,14,5,0,26,26,3,1,0,3,15,52,15,3,0,3,23,11,3,0,42,26,30,38,36,26,22,0,3,20,11,3,0,37,27,0,26,48,16,70,39,0,3,34,2,26,11,3,0,39,32,36,45,0,30,26,16,32,30,17,16,33,17,15,1,0,3,18,10,3,0,36,0,3,50,2,23,24,28,21,10,3,0,45,27,0,20,62,0,23,29,0,25,16,12,15,0,39,35,47,12,5,0,22,14,39,39,0,33,46,44,14,37,39,7,0,26,46,12,18,19,75,5,0,34,0,32,25,38,5,0,30,27,54,27,12,5,0,20,41,3,1,0,3,33,2,21,19,11,3,0,32,56,20,3,0,36,38,0,41,22,36,3,0,16,1,0,3,61,2,21,25,22,19,11,3,0,45,10,0,29,58,20,0,47,53,27,5,3,0,32,1,0,3,37,2,21,19,11,3,0,35,21,80,21,3,0,25,92,25,3,0,18,1,0,3,37,2,62,64,2,31,19,11,3,0,32,7,44,15,21,3,1,0,3,33,2,31,19,11,3,0,38,30,0,54,67,17,3,0,15,1,0,3,52,2,22,21,11,3,0,28,45,26,21,1,0,3,17,2,31,31,25,26,26,11,3,0,52,21,20,43,0,22,28,41,0,23,29,0,23,67,55,0,23,62,69,0,32,16,12,5,0,26,3,0,24,12,10,3,0,39,14,0,22,25,15,1,0,3,39,2,31,26,11,3,0,36,17,10,3,0,34,41,22,37,3,1,0,31,0,3,32,2,29,30,2,19,39,2,20,20,19,14,3,0,29,33,16,25,23,6,4,12,3,16,0,3,10,32,35,47,15,3,0,3,23,11,3,0,48,47,34,26,31,34,0,3,18,10,3,0,29,0,3,20,11,3,0,48,15,0,26,46,16,68,0,3,31,2,21,10,3,0,27,61,20,39,18,17,13,1,0,3,62,61,63,66,12,2,67,66,39,2,60,46,32,10,3,0,37,18,19,0,25,34,19,15,3,0,18,44,24,24,40,36,6,3,0,30,40,44,3,0,25,38,29,3,0,23,64,51,0,14,2,0,3,44,24,2,11,3,0,47,16,46,19,25,25,0,27,44,13,21,5,0,27,47,0,22,21,34,25,5,0,31,71,19,5,0,20,31,0,15,17,23,13,5,0,17,45,28,0,49,77,23,5,0,59,61,38,23,5,0,58,46,22,78,0,29,45,32,26,7,5,0,28,51,3,0,9,2,0,3,26,2,39,36,2,18,2,43,44,45,27,2,40,34,37,2,28,2,42,53,2,24,14,3,0,34,41,48,2,0,3,25,11,3,0,51,28,18,30,0,78,0,7,34,34,34,13,40,36,29,13,5,15,24,14,3,0,13,14,1,0,3,33,2,21,11,3,0,24,65,1,0,3,37,2,22,11,3,0,28,43,21,3,0,37,0,67,52,16,1,0,26,0,2,13,17,12,2,35,57,53,61,0,24,41,79,2,0,20,1,0,28,6,23,16,3,0,66,0,57,72,18,53,16,3,0,57,17,32,43,3,67,19,5,41,16,3,0,57,17,62,26,5,56,29,16,3,0,14,16,70,15,2,1,0,82,10,27,13,0,45,30,0,25,40,24,4,3,0,30,41,45,50,39,5,4,3,2,0,11,2,0,27,0,3,7,52,15,3,0,3,18,3,0,22,31,0,3,49,2,24,26,58,64,32,47,3,0,57,0,3,35,2,25,30,19,10,3,0,33,35,54,3,0,15,53,3,0,21,36,28,12,0,34,43,45,75,5,3,0,31,23,17,3,0,29,19,43,0,21,63,14,3,0,43,38,0,37,35,21,15,32,20,5,3,0,12,1,0,3,37,2,25,18,11,3,0,27,14,16,16,0,18,54,35,24,28,30,9,13,24,48,28,13,14,20,13,5,3,0,16,42,0,13,1,0,3,51,2,22,30,10,3,0,28,49,18,51,3,0,24,40,33,20,18,0,19,38,31,3,1,0,14,0,28,28,0,18,16,46,29,29,4,0,24,56,3,0,51,39,54,56,22,9,7,19,41,38,49,40,12,29,5,3,0,42,43,19,16,0,52,25,21,43,18,10,42,21,21,43,29,10,21,20,23,10,12,65,23,21,43,48,10,21,20,23,10,5,0,19,3,0,38,34,23,92,5,12,42,20,6,3,0,42,39,14,48,21,8,5,16,3,0,50,67,21,0,26,130,21,20,47,10,37,98,5,50,21,44,29,10,5,0,19,3,0,45,41,19,18,30,84,5,36,14,45,22,8,5,16,3,0,37,101,34,14,38,21,8,5,16,3,0,39,53,30,19,36,36,59,34,34,50,9,7,5,3,0,42,21,80,0,31,18,50,50,46,58,45,53,33,0,38,15,14,73,57,54,45,18,7,12,24,50,50,53,33,13,5,3,0,33,98,31,34,26,12,44,20,8,5,0,52,52,18,20,16,58,36,79,48,42,52,43,14,11,0,31,72,36,27,22,44,50,15,15,18,19,11,9,9,6,3,0,69,36,0,5,0,18,0,33,34,31,48,40,0,44,38,40,46,0,3,30,26,30,30,32,30,3,0,19,56,97,26,31,42,30,72,0,70,97,97,0,35,35,50,0,35,44,41,3,0,30,24,24,32,34,41,53,14,44,7,5,0,30,32,23,90,7,61,5,58,3,2,0,39,31,12,16,41,33,38,40,22,19,24,23,6,3,0,29,11,23,24,50,7,66,32,0,56,66,0,53,79,28,62,12,30,5,0,32,79,81,53,41,60,58,74,0,51,47,25,28,3,0,22,29,24,0,9,44,62,0,31,94,57,39,0,62,76,44,79,15,0,35,33,24,15,105,36,33,24,15,13,11,16,44,24,28,18,11,37,37,9,7,21,26,15,27,5,3,0,34,14,9,53,21,27,5,34,3,0,36,14,9,61,73,85,84,19,25,5,17,3,0,17,52,29,12,24,5,3,0,30,73,37,50,17,13,5,25,20,5,30,25,5,42,34,11,53,64,42,24,9,47,43,88,45,81,14,55,49,11,29,9,23,29,7,5,3,0,25,50,0,66,3,1,0,3,38,35,40,27,28,27,29,30,3,0,3,112,38,109,3,44,47,71,32,14,91,40,100,49,89,3,0,22,37,2,0,49,43,21,29,45,38,43,5,2,0,37,43,32,0,28,0,31,0,3,67,2,43,34,3,0,53,33,56,3,0,48,0,24,28,0,78,81,89,18,36,21,68,27,20,5,3,0,34,64,15,3,33,2,0,73,0,38,40,0,3,56,54,63,3,19,45,63,0,3,35,26,24,3,45,38,19,3,36,45,58,3,34,44,3,27,2,0,3,36,39,29,31,28,3,69,37,40,45,76,44,3,38,0,60,37,22,38,5,3,0,57,57,36,55,40,5,3,0,34,2,0,3,36,35,26,37,3,73,25,60,3,79,48,0,30,37,30,74,31,40,26,104,50,0,27,40,63,76,5,3,0,72,2,0,32,32,0,39,0,18,7,7,7,7,6,5,7,7,6,7,8,7,7,7,12,6,7,7,6,7,7,8,6,7,6,7,8,7,9,7,7,7,9,7,8,7,7,7,7,7,7,8,7,7,7,7,8,8,7,8,7,12,7,7,9,7,7,7,13,13,13,7,7,7,8,7,7,7,6,7,8,11,7,7,7,7,7,6,6,7,11,6,8,8,8,8,8,7,7,7,7,7,7,8,7,8,7,7,7,7,7,7,7,6,7,8,7,7,7,7,7,7,7,7,8,7,7,7,7,7,8,7,9,7,7,8,8,7,8,7,7,7,11,9,5,7,7,7,7,7,7,7,7,9,7,7,7,7,7,7,7,7,7,7,8,8,7,8,7,7,8,8,7,8,8,7,7,7,7,7,6,7,7,7,13,7,7,7,7,8,7,7,6,7,7,8,7,8,8,7,10,7,7,7,6,7,7,7,7,7,7,8,7,7,8,7,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,8,8,8,7,7,6,7,7,7,8,9,7,7,7,7,7,8,7,8,8,8,7,8,8,6,9,7,7,7,6,5,7,7,2,0,20,29,24,0,28,52,0,45,0,97,0,21,0,21,0,28,28,23,0,24,28,24,30,31,30,37,24,28,0,27,25,29,0,37,39,37,33,35,37,36,46,42,0,37,33,33,82,0,31,0,31,34,42,53,34,0,21,28,27,20,23,25,20,25,33,32,28,37,32,36,24,29,34,0,42,41,40,40,17,0,33,31,48,36,7,25,10,23,25,16,10,10,15,25,19,27,23,23,21,29,6,16,0,36,0,38,38,40,38,46,0,55,0,56,30,27,20,10,12,3,2,0,45,29,36,50,3,22,2,0,34,24,27,16,10,21,3,2,0,42,31,33,27,34,22,3,2,0,71,0,3,25,3,0,19,0,48,54,0,3,37,28,30,30,36,39,3,0,3,39,3,35,0,3,38,37,51,48,55,49,48,3,78,45,19,51,0,77,76,36,23,84,8,5,4,7,50,19,22,3,1,0,3,70,66,37,55,19,19,3,64,46,20,37,31,5,2,0,3,57,57,23,41,51,66,3,67,54,44,0,30,14,28,36,53,6,39,3,13,49,45,45,10,36,11,14,59,50,52,6,25,45,74,66,66,50,13,45,26,30,24,14,28,7,7,12,26,30,30,13,6,41,3,52,0,73,49,16,46,42,42,37,47,36,27,10,40,44,31,26,5,4,2,0,23,0,52,54,39,0,3,61,57,37,41,63,66,29,3,71,42,48,0,37,94,31,21,3,0,58,0,13,49,45,10,11,31,35,12,26,30,14,66,51,58,11,39,85,70,9,8,6,45,3,52,0,77,50,16,46,42,37,44,33,46,26,5,4,2,0,3,9,3,23,0,3,44,3,18,17,62,1,0,3,56,38,42,54,3,34,32,44,44,52,23,47,48,39,0,13,24,76,42,66,15,35,7,10,62,15,41,35,7,3,16,1,0,3,48,26,44,73,54,3,38,24,11,3,42,44,50,28,24,0,53,35,0,46,66,46,11,44,36,84,36,36,58,54,9,56,36,31,79,16,31,9,23,67,44,7,73,38,82,34,34,56,52,7,27,5,4,25,55,0,43,87,55,42,3,0,16,1,0,3,51,45,51,36,45,83,3,52,24,11,3,30,49,0,41,63,31,0,17,9,40,17,28,18,5,0,32,24,58,51,55,7,12,20,49,50,5,26,16,3,0,49,41,16,3,0,41,1,0,71,44,53,0,20,63,27,3,0,52,28,0,46,46,50,12,38,26,25,13,5,28,47,22,0,98,13,5,0,26,25,13,5,55,57,24,60,33,0,74,64,0,57,5,44,0,31,34,28,27,15,7,65,0,16,0,56,52,50,47,36,31,43,67,69,41,56,14,28,42,9,0,25,0,79,94,6,4,1,0,3,86,30,26,30,55,55,56,27,64,3,71,68,57,79,84,3,0,50,41,31,16,13,0,40,85,18,81,34,5,0,61,52,47,0,74,7,3,16,1,0,3,49,59,37,73,63,63,65,21,3,62,36,53,12,17,3,0,52,31,33,39,55,53,3,0,60,7,67,32,51,14,19,5,0,108,15,30,46,64,34,101,34,44,63,56,7,40,64,34,53,56,52,93,34,0,44,37,72,7,12,65,5,12,0,42,17,0,19,39,14,18,5,3,1,0,1,0,36,0,36,0,33,31,48,0,13,5,35,17,78,1,0,15,21,54,35,45,45,32,27,5,3,1,0,7,19,25,27,25,23,11,21,18,19,18,16,20,18,20,25,23,0,16,13,12,33,23,13,16,0,60,0,38,38,44,0,44,0,3,25,3,0,3,43,38,34,39,3,0,37,3,100,43,3,35,0,57,30,33,0,33,59,3,0,3,38,40,69,52,3,52,46,16,2,0,3,85,22,47,56,67,77,29,3,68,87,0,50,45,0,60,59,58,59,37,27,3,0,47,47,0,55,72,8,34,53,38,4,0,57,66,28,54,81,30,45,27,12,5,3,0,30,41,10,12,45,17,71,41,55,40,38,11,0,52,8,6,42,3,0,73,49,16,31,0,33,20,41,63,51,28,9,5,4,1,0,59,17,36,16,52,40,14,43,20,7,5,3,0,15,2,0,58,61,0,61,35,12,79,11,2,0,80,33,36,64,65,51,2,0,3,9,3,25,0,3,44,3,18,17,1,27,40,41,21,39,39,5,16,3,0,22,38,1,0,77,62,90,1,0,83,7,37,32,33,87,12,100,5,19,34,87,12,100,5,3,1,0,84,57,0,30,61,56,46,50,5,10,29,30,78,0,70,68,51,56,64,7,0,24,73,48,5,7,50,7,88,36,75,3,1,0,3,52,73,63,50,81,54,2,64,64,32,58,32,8,33,48,13,42,56,7,48,37,43,42,47,58,6,0,39,71,52,18,13,37,26,36,51,37,91,16,104,9,14,89,7,12,27,27,28,96,27,25,96,7,5,4,0,37,14,13,18,21,4,0,24,16,1,0,3,52,43,56,60,81,27,3,71,49,70,0,45,29,0,7,48,32,42,35,5,0,31,0,67,63,59,33,51,57,38,53,7,36,24,18,39,35,5,3,1,0,3,2,24,26,3,54,34,36,64,38,0,34,41,31,19,0,49,63,3,1,0,44,30,41,17,48,16,17,4,40,1,0,3,34,53,86,51,73,27,3,61,24,11,3,32,85,0,45,0,60,7,65,32,51,17,5,30,49,94,0,63,56,0,37,40,50,54,48,34,77,30,17,9,71,0,68,33,0,64,75,40,53,83,0,83,16,77,9,57,30,9,12,69,28,5,19,49,115,28,28,5,3,0,45,47,43,55,12,19,11,48,20,54,5,3,1,0,1,0,44,40,0,54,33,29,35,28,44,32,24,24,38,0,36,48,7,9,11,9,12,12,13,16,9,11,0,12,10,0,16,18,25,9,14,0,8,14,14,7,10,11,11,17,16,14,16,12,11,0,25,10,8,16,0,34,40,0,3,25,96,68,3,0,3,2,33,37,40,24,29,33,30,32,34,33,3,0,70,40,24,30,28,12,24,5,5,16,2,0,32,5,26,5,40,52,71,3,40,2,0,69,69,28,49,22,36,19,3,38,46,3,16,22,3,13,2,0,33,69,78,0,57,47,88,2,0,40,33,16,3,30,51,3,33,2,0,53,0,3,19,24,30,3,16,5,22,36,5,35,20,40,28,27,3,0,13,25,23,63,3,0,22,25,23,23,31,0,26,9,25,19,32,73,7,5,3,0,13,25,23,27,3,0,5,29,5,17,25,23,31,3,0,13,23,21,31,22,24,3,1,0,29,30,19,45,19,60,31,52,38,33,49,66,86,43,38,40,7,33,61,3,0,27,32,67,41,69,78,5,0,27,90,5,0,26,3,0,20,39,68,6,3,0,21,26,70,47,82,43,25,51,42,3,0,21,33,21,83,36,87,7,17,3,0,20,23,72,27,59,41,49,98,11,9,5,92,3,1,0,3,59,67,2,22,26,59,3,40,51,20,10,0,18,62,0,38,28,35,28,28,33,0,39,30,0,42,33,0,28,22,0,28,56,63,81,51,63,67,68,0,67,70,0,72,50,48,0,46,46,55,30,3,0,85,14,27,3,0,82,65,50,30,43,0,51,30,57,29,12,35,5,3,52,20,53,3,0,71,81,52,0,64,0,69,65,36,12,63,50,36,3,56,0,21,27,17,41,33,32,68,50,5,4,58,29,22,0,36,25,54,10,50,3,0,46,22,1,0,17,0,3,61,35,83,64,36,3,34,46,22,33,12,33,49,0,82,45,23,7,36,7,3,0,35,34,32,44,19,5,0,77,36,53,0,47,45,34,0,16,5,0,58,59,55,72,10,48,37,16,31,93,35,19,8,23,30,52,76,9,7,3,0,14,1,0,3,64,99,36,2,17,31,35,29,0,27,68,64,46,35,5,0,26,0,33,34,52,5,0,47,45,34,5,0,14,1,0,3,62,28,2,9,45,21,0,23,28,21,68,29,58,6,52,32,23,29,52,81,28,5,0,103,28,1,0,3,31,33,2,14,23,41,81,59,5,19,1,0,26,21,53,1,0,17,17,0,3,29,54,41,44,53,19,19,95,3,44,26,0,28,50,56,25,29,54,53,47,0,36,9,52,31,16,3,0,20,30,43,24,55,30,38,44,11,62,18,5,61,34,40,5,3,0,79,37,16,35,22,38,25,65,30,26,16,27,9,38,7,6,0,73,16,3,0,28,61,33,3,0,46,69,5,68,14,9,35,20,75,38,21,3,32,0,14,1,0,3,28,23,111,3,21,35,57,85,5,31,3,30,1,0,3,32,56,38,73,82,3,38,41,47,3,0,34,49,23,38,0,19,23,17,3,0,20,23,34,40,24,32,47,17,4,45,47,24,13,1,0,19,28,1,0,3,36,127,38,117,27,86,3,52,21,0,22,54,52,3,0,25,0,42,43,50,55,15,7,0,37,0,55,55,7,47,37,0,28,41,36,14,36,27,53,17,10,7,7,4,0,39,35,22,25,41,37,21,7,7,32,23,48,6,3,1,0,19,42,1,0,3,57,37,45,21,3,25,60,27,31,37,0,58,33,69,44,90,65,3,0,42,1,0,26,38,1,0,3,89,68,61,65,3,31,101,45,0,56,1,0,20,20,0,3,38,50,54,3,27,70,41,92,32,1,0,15,15,0,3,30,75,54,60,2,28,55,0,29,54,24,52,25,1,0,3,37,48,61,71,56,18,2,39,72,58,74,45,41,35,17,61,0,78,60,51,0,62,78,36,3,0,70,51,39,51,0,53,72,0,56,48,38,22,0,76,118,65,64,115,41,40,3,0,67,21,75,74,64,33,3,0,63,68,29,33,60,72,0,71,34,26,3,1,0,3,33,21,3,18,24,36,58,1,0,3,37,21,3,18,42,23,38,29,1,0,3,2,21,27,3,30,22,37,14,14,34,3,20,1,0,23,26,73,39,28,32,23,5,30,17,35,25,5,5,16,1,0,1,0,25,31,0,3,49,72,41,50,3,35,41,21,17,2,0,23,0,22,0,36,32,41,48,9,51,61,9,36,64,9,14,96,9,17,2,0,44,45,23,75,18,25,64,40,44,0,15,29,57,1,0,46,39,49,44,56,73,54,63,46,53,13,26,12,11,2,0,33,30,45,71,22,49,26,0,26,23,25,38,24,19,9,50,29,9,0,62,10,74,73,75,58,71,78,75,77,29,21,21,21,37,26,24,21,27,0,55,32,68,22,25,28,13,29,34,34,17,39,29,17,38,35,31,40,63,37,32,42,25,21,40,45,21,26,33,21,17,13,44,26,13,59,33,13,45,33,32,89,17,80,13,32,27,13,32,37,13,26,9,0,54,0,19,0,32,19,32,22,38,23,42,79,17,43,33,72,17,50,27,13,55,38,23,13,18,55,30,42,33,24,56,42,17,13,45,9,6,31,32,31,24,9,32,10,0,35,64,41,19,33,20,0,36,59,9,28,5,1,0,11,55,57,59,67,63,69,63,69,67,71,67,73,73,76,20,65,53,55,49,51,56,58,55,57,53,55,56,58,55,57,55,57,59,51,53,49,50,2,0,13,15,23,15,35,19,23,17,15,20,28,26,28,23,13,28,24,21,2,0,17,17,13,24,17,13,21,18,14,16,13,15,17,19,16,18,17,19,17,19,15,17,14,15,2,0,28,32,36,0,63,79,24,31,35,37,0,52,24,44,3,0,34,38,3,0,38,41,3,0,58,30,29,7,40,35,36,43,10,20,59,45,53,44,38,49,50,9,88,57,68,52,64,52,11,92,65,115,45,35,11,9,7,46,35,18,174,11,45,11,9,20,52,57,59,66,0,66,34,9,7,46,36,42,39,35,60,43,10,20,61,53,44,49,52,9,7,5,19,16,3,0,40,27,31,34,31,3,0,15,2,0,28,0,74,48,9,11,13,18,3,82,27,16,16,21,16,19,24,18,17,58,21,63,15,16,71,15,16,46,17,23,57,17,16,16,45,16,16,25,27,18,20,20,70,19,17,19,16,18,20,22,19,21,20,22,20,22,18,20,17,19,71,3,0,34,47,3,0,54,64,48,19,2,0,3,45,2,66,18,76,2,28,3,0,33,24,28,34,36,0,26,40,0,33,38,18,16,83,6,23,58,28,7,18,78,8,5,18,39,3,1,0,36,19,15,17,16,17,3,14,1,0,38,27,48,39,39,41,10,13,15,16,3,1,0,25,0,64,33,28,46,0,35,10,3,0,46,38,32,3,0,55,0,57,16,36,10,3,0,6,35,35,37,5,66,55,68,102,68,72,45,3,0,19,90,37,10,24,3,0,50,67,68,65,34,3,0,37,70,25,41,16,34,26,6,10,77,3,49,25,0,20,60,5,5,0,46,45,5,1,0,34,0,27,28,30,0,77,46,38,32,3,0,38,30,24,3,0,37,0,59,60,16,27,83,12,78,16,5,3,2,0,64,24,59,33,5,51,16,60,47,5,10,66,35,84,50,35,28,28,11,50,13,5,1,42,15,25,62,47,32,33,37,35,34,7,23,1,34,36,13,60,9,19,25,9,5,17,1,59,59,45,32,42,33,64,72,17,22,81,52,17,13,18,60,26,13,10,40,45,56,26,11,7,1,48,47,36,49,56,93,108,9,60,19,9,46,7,1,0,12,53,0,15,18,20,35,19,0,18,16,24,27,0,24,29,0,32,26,0,30,18,41,45,47,4,2,0,4,3,23,24,25,26,4,37,15,24,31,11,24,4,3,2,0,4,3,23,24,25,4,30,15,24,34,11,24,4,3,2,1,0,12,0,53,68,0,15,26,21,23,18,19,28,0,37,4,3,30,30,4,28,10,0,28,21,0,28,21,2,0,4,3,26,28,26,27,23,4,35,13,20,42,46,42,29,31,28,0,61,0,27,29,45,5,0,29,38,5,0,37,39,0,36,40,36,0,29,29,4,0,28,28,0,36,14,38,48,67,49,18,12,8,7,6,66,40,5,4,0,20,42,46,28,31,0,61,0,27,29,45,5,0,29,38,5,0,39,0,36,40,0,29,4,3,0,14,2,1,0,12,0,53,62,65,0,3,2,24,12,24,24,12,22,3,40,47,34,1,0,3,39,22,3,31,58,1,0,3,39,47,43,3,49,22,20,21,9,0,26,22,47,48,4,43,9,0,23,80,34,38,47,12,44,5,5,0,41,9,0,22,48,40,53,5,0,42,9,0,21,46,9,0,27,42,9,2,0,14,1,0,51,43,58,49,52,70,57,45,5,62,1,46,12,81,19,17,23,6,1,67,36,12,9,34,33,34,28,31,11,5,17,38,22,34,114,5,16,27,34,36,36,41,25,56,109,24,5,57,94,83,5,69,34,66,66,61,48,43,67,49,54,92,17,66,78,17,22,42,65,17,13,9,5,56,34,24,53,35,70,67,47,69,17,22,52,78,68,51,57,25,21,17,61,13,18,47,34,55,75,57,101,21,17,22,42,57,54,65,85,21,17,13,9,25,55,78,43,38,67,48,51,44,53,85,88,82,13,18,44,120,13,9,32,51,43,67,32,74,13,18,75,13,9,5,72,15,47,47,55,27,23,13,63,59,55,50,47,71,57,17,13,61,53,83,50,47,80,72,86,17,13,18,52,13,10,28,61,10,31,70,85,51,13,9,7,45,62,38,13,23,39,52,14,17,18,5,10,28,52,72,44,5,12,27,12,24,37,6,1,45,70,67,3,59,33,3,70,27,28,35,27,38,42,45,19,9,24,33,41,9,27,6,39,77,5,44,38,42,9,44,51,9,46,48,54,66,17,22,63,17,15,9,45,45,30,56,17,15,9,50,47,9,14,42,9,5,18,29,52,35,13,84,67,25,80,44,13,79,54,48,13,78,35,13,56,38,13,45,57,65,60,67,17,13,40,83,69,58,69,38,60,21,17,87,47,44,82,47,31,21,73,46,71,71,58,51,29,60,39,92,67,39,71,69,70,71,98,39,29,55,25,23,19,13,83,57,41,13,58,95,37,59,17,13,10,29,46,25,80,36,13,54,37,13,9,7,68,32,44,41,48,7,1,51,21,40,49,50,32,21,5,29,45,31,25,9,22,41,25,9,5,24,65,21,5,19,42,21,5,35,57,21,5,49,41,60,21,5,33,45,33,27,21,5,44,21,5,52,34,21,5,16,1,86,94,73,27,46,1,94,54,63,55,1,59,17,73,74,5,17,1,0,11,5,41,1,11,65,65,59,63,39,1,51,16,20,24,124,21,29,60,62,32,29,13,54,55,44,38,15,72,29,13,69,49,42,13,18,55,13,11,6,20,1,47,83,23,43,30,29,31,26,11,5,24,29,5,1,0,33,33,95,24,76,81,79,69,44,18,23,5,91,43,17,22,35,6,24,35,7,25,1,99,35,64,23,27,5,24,29,5,44,61,18,50,65,5,23,38,6,68,62,48,30,27,62,49,6,36,55,88,72,72,73,28,29,27,23,45,15,25,22,21,24,13,31,6,63,63,27,38,47,61,9,101,28,77,34,43,53,13,91,43,43,13,18,64,13,64,23,9,62,6,39,71,45,29,65,9,30,6,41,41,36,55,37,39,27,49,21,19,13,9,5,9,72,64,208,110,5,15,25,39,74,49,99,32,49,24,15,9,16,5,36,1,70,72,74,23,22,60,57,67,68,69,70,24,92,46,22,9,27,6,31,81,95,73,71,41,40,32,39,64,13,25,58,31,80,66,58,17,32,13,82,73,74,22,11,5,12,50,17,5,10,40,77,81,27,35,53,30,33,50,9,5,9,25,45,29,5,13,25,35,34,9,5,1,46,24,78,25,32,61,71,28,41,50,9,5,27,24,35,37,54,9,7,1,29,80,1,0,33,0,17,59,32,47,57,33,37,34,16,2,0,51,0,3,48,2,56,70,40,10,3,38,47,40,0,49,17,0,41,24,28,25,3,0,59,0,16,1,0,3,39,2,44,39,62,62,54,10,3,54,36,49,3,1,0,3,41,2,46,39,10,3,32,43,29,3,1,0,3,41,2,44,41,10,3,31,49,22,3,0,75,1,0,3,33,2,38,30,22,10,3,27,29,0,41,0,10,0,36,28,40,69,10,28,32,3,0,13,1,0,24,19,14,33,23,17,2,0,27,37,7,45,0,81,67,65,6,0,59,52,43,6,15,40,3,1,0,30,28,0,3,68,41,3,17,5,29,4,78,28,5,28,25,21,19,6,47,19,21,3,0,5,29,4,41,12,5,12,24,17,3,0,5,58,4,13,5,12,50,0,27,36,0,21,23,5,3,1,0,24,0,26,0,40,24,49,0,54,56,44,37,35,33,0,2,72,85,51,2,69,2,16,0,3,37,3,27,5,42,4,52,78,53,72,57,75,22,80,43,76,45,73,74,76,16,76,16,78,20,70,5,46,38,34,21,77,32,25,25,0,23,0,23,25,52,42,15,45,5,3,0,5,19,5,30,32,3,0,5,43,4,42,12,5,11,22,0,48,47,5,48,47,5,44,72,5,44,72,59,43,5,0,18,3,0,5,52,4,75,44,12,5,26,58,0,32,43,44,0,23,3,0,5,50,4,12,5,13,24,28,27,5,0,24,48,0,28,27,0,21,17,20,74,11,10,7,5,3,0,5,44,4,59,44,13,5,26,31,46,10,50,47,41,48,60,76,56,41,9,21,7,0,18,7,0,20,70,5,0,39,49,5,39,49,5,55,65,5,55,65,15,49,40,7,45,5,0,20,3,0,5,47,4,63,44,13,5,28,31,0,8,56,39,7,75,5,0,41,66,74,7,15,52,63,74,7,22,66,8,5,0,18,3,0,5,26,4,75,67,13,5,35,40,44,32,0,31,78,9,0,25,0,47,31,31,64,34,64,16,13,24,39,32,62,14,11,54,29,62,32,62,14,11,22,19,49,46,11,31,32,62,14,11,16,56,9,0,28,9,7,0,26,3,0,5,42,4,41,76,40,12,5,35,31,52,15,30,9,7,3,0,5,40,4,51,76,40,12,5,33,31,50,15,30,9,7,3,0,5,21,4,41,76,40,13,5,36,58,0,25,48,24,44,37,29,0,45,44,18,9,47,38,35,48,46,5,0,40,0,30,42,0,31,42,0,16,30,29,22,15,7,0,37,32,35,8,0,52,30,29,14,40,37,0,68,32,9,7,0,27,7,3,0,5,19,4,51,76,40,13,5,34,58,0,25,48,24,44,37,29,0,45,44,18,9,0,38,35,0,46,5,0,40,0,30,50,27,10,72,10,15,7,0,35,32,35,8,0,53,0,8,61,39,8,38,0,38,35,0,66,30,7,0,27,7,3,1,0,44,0,3,63,2,40,11,3,31,29,37,1,0,3,63,2,40,11,3,31,37,0,6,47,62,5,31,11,3,0,63,60,39,45,15,1,0,3,64,2,39,11,3,30,4,75,37,4,43,28,23,1,0,31,0,2,28,2,47,46,2,30,30,30,6,2,18,22,59,60,60,60,60,60,61,61,2,0,3,55,2,39,69,10,3,36,10,20,21,22,22,23,34,4,1,0,3,56,68,15,2,42,78,10,3,28,25,12,0,19,32,17,10,42,26,10,24,39,44,9,21,7,0,13,42,35,10,23,39,39,72,88,9,21,7,0,13,42,44,10,23,39,39,39,72,49,35,9,21,7,0,13,12,19,5,3,0,14,1,0,22,41,28,26,2,0,27,40,7,50,0,53,69,6,15,40,3,1,0,46,0,46,7,31,31,29,26,14,63,83,0,19,32,32,19,19,20,0,3,32,2,20,3,37,5,33,4,45,77,77,19,78,30,78,77,65,5,29,12,0,63,48,40,46,60,35,0,28,23,0,29,28,27,25,25,22,21,0,33,28,25,0,27,23,3,0,5,46,4,53,63,34,13,5,31,70,0,40,30,23,3,0,5,47,4,53,40,13,5,14,29,0,68,0,38,35,38,29,5,0,38,0,8,35,36,0,28,47,14,71,40,7,0,22,20,0,15,3,0,5,29,4,34,13,5,17,12,22,0,8,28,22,31,16,35,42,16,35,42,16,22,25,16,22,33,16,16,24,29,17,7,25,0,12,3,0,5,42,4,54,13,5,13,34,25,13,5,0,32,0,35,25,19,19,38,13,13,35,8,5,0,48,0,77,25,19,19,29,13,13,33,8,5,0,41,33,40,0,32,23,27,21,21,31,15,15,35,10,7,0,30,27,21,21,29,15,15,33,10,7,0,38,64,29,27,21,21,43,15,15,33,10,7,0,36,60,23,27,21,21,28,15,15,31,10,7,0,23,27,21,21,31,15,15,35,10,7,0,39,27,21,21,58,15,15,49,10,7,12,25,19,19,41,13,13,31,8,5,0,73,44,0,25,26,27,21,21,29,15,15,32,10,7,30,25,19,19,29,13,13,32,8,5,0,73,78,34,3,0,5,41,4,54,13,5,24,34,25,13,5,0,58,29,3,0,5,41,4,54,13,5,24,34,25,13,5,0,32,36,0,6,79,53,6,41,25,19,19,65,14,13,48,8,5,0,70,29,3,0,5,34,4,54,13,5,16,53,54,80,27,21,21,38,16,15,45,10,7,5,0,45,32,3,0,5,22,4,13,5,13,34,25,13,5,0,33,27,3,0,5,22,4,34,60,13,5,15,30,0,30,54,27,15,7,0,47,0,10,23,77,9,33,7,5,0,62,0,27,30,32,13,5,0,22,8,79,33,8,53,33,5,0,30,3,0,5,23,4,41,34,13,5,24,82,0,65,30,0,23,42,77,20,18,25,42,20,19,49,13,12,9,0,34,7,0,36,28,0,25,7,3,0,5,28,4,49,13,5,17,20,48,40,0,35,30,27,27,0,31,17,0,48,50,56,65,16,27,9,0,41,14,53,0,61,29,23,18,37,17,17,33,12,9,0,41,7,5,0,27,3,0,5,31,4,40,60,13,5,24,32,25,0,30,52,19,37,21,21,37,15,15,49,10,14,42,0,41,23,23,42,17,17,39,12,9,0,34,0,61,23,18,37,17,17,33,12,9,0,41,19,7,39,30,12,30,5,0,27,3,1,0,26,0,3,26,2,74,44,78,16,45,51,41,11,3,67,28,60,4,0,38,23,34,13,1,0,76,38,0,46,51,49,71,0,42,35,0,3,30,3,16,5,31,4,66,80,79,12,5,49,40,0,23,40,41,5,0,26,0,31,27,0,28,28,21,3,0,5,69,4,52,43,77,16,79,20,75,15,78,12,46,78,17,78,17,48,12,5,31,13,22,19,28,0,23,46,0,33,35,14,35,7,0,66,17,5,0,19,0,35,10,41,42,9,42,14,33,33,7,12,31,63,5,0,35,0,30,18,26,34,18,26,5,0,76,0,69,40,0,30,0,32,42,39,32,43,5,0,45,0,22,33,33,33,33,0,43,0,16,56,22,5,0,47,26,3,0,5,45,4,65,70,79,36,12,5,31,12,0,29,27,70,78,52,34,33,12,45,0,25,79,7,0,43,33,0,37,27,14,25,7,5,0,21,32,16,39,11,35,19,22,17,6,0,26,61,12,55,5,3,0,5,44,4,40,74,36,12,5,24,19,17,0,35,43,23,12,30,31,37,5,0,27,79,5,0,21,32,16,39,11,35,19,15,17,6,0,26,62,12,56,5,3,0,5,44,4,40,74,36,12,5,24,19,17,0,35,43,23,12,30,31,37,5,0,27,79,5,0,21,32,16,39,11,35,19,15,17,6,0,26,62,12,56,5,3,0,5,44,4,40,43,79,16,74,24,79,17,75,15,36,12,5,27,82,40,32,0,19,17,0,35,43,23,12,30,31,37,5,0,30,34,10,15,28,33,37,42,42,9,9,58,7,28,12,19,17,5,0,48,0,28,20,34,25,41,27,37,15,17,12,8,0,28,70,14,54,7,12,21,30,36,27,43,29,39,17,19,21,11,10,8,5,3,0,5,26,4,54,75,15,43,77,16,79,20,75,15,78,12,46,78,17,78,17,36,13,5,41,20,56,13,5,0,82,0,48,27,63,35,30,65,10,0,46,0,54,40,53,0,60,9,0,15,7,0,50,30,31,55,21,7,3,0,5,37,4,13,5,13,52,41,0,52,54,5,3,0,5,31,4,53,13,5,19,50,29,3,0,5,19,4,45,36,13,5,23,28,26,34,38,28,12,38,5,3,1,0,22,0,91,0,30,30,32,36,34,34,30,38,0,3,31,3,13,5,26,4,47,64,5,21,25,23,3,0,5,14,5,16,25,3,0,5,19,5,14,23,3,1,0,71,69,0,3,36,2,17,3,32,5,31,4,47,74,55,72,30,79,34,75,38,5,35,16,0,64,71,80,3,0,5,19,5,14,23,3,0,5,19,5,16,25,3,0,5,20,5,18,27,3,1,0,74,76,78,0,3,37,2,17,3,32,5,31,4,47,74,55,72,59,5,35,16,0,70,74,3,0,5,14,5,15,24,3,0,5,19,5,17,26,3,1,0,75,77,0,3,38,2,17,3,34,5,33,4,47,74,55,55,5,35,16,0,67,3,0,5,14,5,14,23,3,1,0,76,0,3,76,29,2,9,3,21,5,32,4,76,51,80,27,74,78,66,12,5,50,16,0,29,52,51,49,11,0,30,35,8,34,49,47,15,37,68,11,0,30,35,8,34,41,47,16,32,11,0,30,35,8,33,35,40,0,30,35,8,12,13,5,0,72,36,0,23,31,12,29,5,4,0,5,30,4,72,53,12,5,38,50,83,44,14,7,5,3,2,0,19,13,13,8,14,14,2,0,56,0,3,76,14,2,65,55,72,22,11,3,33,52,29,1,0,3,63,2,55,37,10,3,26,37,35,27,25,23,20,16,17,16,15,12,0,34,32,0,38,51,36,17,18,61,9,48,70,27,70,9,0,32,46,28,37,39,16,31,9,0,25,14,68,7,41,51,36,50,48,50,27,70,9,0,32,53,28,46,39,36,9,0,25,73,43,25,14,68,7,12,8,74,56,61,8,23,39,70,9,36,52,27,28,39,38,61,27,18,45,28,16,70,9,70,24,58,36,68,32,50,27,70,9,0,32,45,27,43,31,9,39,28,46,39,36,9,0,30,25,14,68,7,5,3,0,67,53,3,0,26,41,36,32,10,34,32,30,56,12,37,5,40,3,0,16,1,0,3,60,2,76,58,10,3,31,32,25,49,76,27,26,28,20,46,39,62,29,61,30,16,13,24,10,20,6,16,1,0,55,0,77,0,36,29,28,25,23,61,36,0,46,26,22,7,15,15,15,23,12,14,27,6,14,7,56,16,47,42,0,31,36,33,64,58,0,3,34,2,24,3,42,5,30,4,62,60,49,5,44,12,0,39,27,37,33,38,28,26,25,24,46,26,24,24,0,27,31,29,26,0,36,23,45,66,30,25,16,34,9,7,0,54,12,28,5,3,0,5,73,74,11,4,19,5,20,28,3,0,24,45,0,28,0,6,47,6,58,3,0,5,19,5,24,51,0,76,3,0,5,19,5,20,48,3,0,5,20,5,18,24,3,0,5,21,5,28,17,16,3,0,5,21,5,28,17,16,3,0,5,21,5,28,16,16,3,0,5,21,5,28,19,16,3,0,5,19,5,18,26,3,0,5,19,5,20,28,3,0,5,19,5,13,21,3,0,5,50,4,75,26,65,43,79,20,76,77,65,13,5,36,35,34,35,31,37,52,7,0,78,30,26,0,34,32,0,48,42,42,46,40,40,0,25,24,0,46,0,38,36,34,40,0,40,22,3,0,5,30,4,13,5,15,24,44,62,13,5,0,62,68,5,0,40,42,60,3,0,5,31,4,57,62,63,52,66,46,63,62,54,46,23,4,80,69,16,12,5,21,55,53,79,52,5,0,50,10,31,80,9,27,7,0,13,5,0,43,62,8,79,60,8,22,0,34,0,10,35,50,9,27,7,7,0,6,63,6,34,46,18,6,3,0,5,22,4,12,5,11,8,51,44,7,13,5,0,24,25,3,0,5,17,4,39,68,76,12,5,24,53,74,5,0,37,16,30,44,16,23,5,0,57,0,47,37,13,5,0,51,54,3,0,5,17,4,39,68,76,12,5,24,53,74,5,0,37,16,30,44,16,23,5,0,57,0,47,37,13,5,0,51,54,3,0,5,23,4,12,5,12,8,51,44,7,13,5,0,25,72,3,0,5,25,4,40,45,76,13,77,15,78,17,76,79,12,5,27,53,74,5,0,40,19,19,5,0,57,0,47,37,13,5,0,18,39,28,21,16,16,6,0,63,28,5,0,54,3,0,5,35,4,12,5,15,55,53,79,52,5,0,23,45,29,5,3,1,0,3,32,22,3,50,19,42,3,0,3,32,32,3,60,19,42,3,0,3,26,22,3,44,19,36,3,0,3,26,32,3,54,19,36,3,0,3,29,22,3,47,19,39,3,0,3,29,32,3,57,19,39,3,0,3,28,22,3,46,19,38,3,0,3,28,32,3,56,19,38,3,0,1,15,19,15,13,13,15,7,25,79,3,0,2,70,80,2,59,63,21,11,54,71,7,0,18,6,18,54,45,48,16,9,7,0,48,0,46,36,9,5,5,3,0,58,64,0,28,0,3,33,2,56,60,44,47,76,16,77,18,77,24,77,11,76,14,60,36,76,25,60,37,75,63,11,3,63,16,41,34,30,28,27,21,15,32,26,24,24,23,18,20,20,19,4,0,57,25,64,62,6,3,0,16,0,33,24,34,10,9,37,17,55,5,0,29,3,0,49,53,24,0,63,23,72,47,54,30,65,3,0,26,51,0,37,16,12,40,13,5,3,0,42,49,62,32,24,0,61,53,44,48,37,25,18,20,50,29,26,24,4,52,39,0,31,48,68,12,21,6,55,68,7,3,25,39,10,39,43,33,9,30,62,10,7,0,32,5,0,65,3,20,36,57,12,40,5,3,49,62,3,0,17,39,0,31,25,3,0,10,0,29,37,40,43,52,25,25,0,49,0,8,78,46,8,44,0,20,61,53,9,7,59,33,32,67,17,32,15,65,0,68,10,75,77,10,42,35,0,50,0,30,7,5,0,6,80,78,28,6,54,37,61,5,0,41,0,31,8,72,64,80,76,79,79,44,8,53,5,10,41,3,0,21,29,74,7,3,0,28,46,0,32,38,5,0,31,42,38,0,8,17,29,26,22,7,55,71,15,7,0,18,0,15,0,11,44,19,64,42,15,7,0,56,66,23,18,12,55,8,5,5,0,44,35,0,6,69,25,6,64,0,32,0,60,68,13,5,0,39,27,24,0,57,81,13,5,0,61,18,0,35,30,71,48,57,7,34,47,5,0,20,53,13,5,0,53,0,75,0,47,31,23,77,26,53,15,7,0,21,0,11,53,21,66,53,15,7,0,53,0,10,38,63,9,79,53,15,7,0,11,80,21,66,53,15,7,0,64,26,5,0,39,38,34,49,7,5,0,12,1,0,3,43,2,54,35,11,3,44,46,31,24,1,0,3,51,2,45,77,11,3,30,36,30,1,0,3,54,2,45,80,11,3,30,27,0,57,68,3,0,30,1,0,3,41,2,54,76,37,44,11,3,55,46,0,33,49,0,25,28,19,0,52,8,78,48,54,8,30,5,0,56,10,24,66,62,3,1,0,3,76,60,2,54,37,34,11,3,46,13,41,0,6,80,75,73,36,6,70,45,3,0,11,26,68,48,6,12,3,1,0,3,53,2,39,48,11,3,43,39,0,39,35,30,0,60,0,57,46,0,39,37,1,0,3,50,2,11,3,28,39,0,54,1,0,3,50,2,52,11,3,31,39,0,54,59,0,6,76,52,6,48,0,38,3,0,31,1,0,3,51,2,11,3,29,33,1,0,3,52,2,57,75,11,3,44,53,1,0,3,49,2,59,11,3,31,39,0,51,31,1,0,3,49,2,59,11,3,31,40,1,0,3,27,2,47,11,3,25,18,1,0,3,52,2,11,3,26,39,0,46,44,42,0,46,0,12,0,4,79,78,77,79,79,80,41,4,6,38,37,55,47,5,37,3,0,28,0,33,0,38,0,6,50,51,5,26,10,54,55,3,1,0,3,51,2,40,11,3,30,51,17,3,1,0,3,50,2,11,3,24,39,0,46,28,13,1,0,3,52,2,11,3,28,39,0,48,25,0,18,48,19,3,1,0,42,0,3,78,2,55,38,10,3,26,30,17,15,12,0,35,38,0,47,34,15,16,59,7,46,41,25,68,7,0,30,0,48,0,36,77,7,0,30,23,12,66,5,3,0,35,53,3,0,42,0,32,73,3,0,26,19,1,0,39,0,82,0,34,28,34,0,30,44,34,28,39,0,41,0,18,18,17,0,3,41,2,24,3,44,5,41,4,50,77,28,79,22,75,73,79,13,68,78,79,27,69,78,22,77,65,74,78,80,70,5,34,12,0,15,36,32,31,28,27,25,22,66,19,17,17,17,16,16,6,0,8,71,71,42,7,26,76,29,8,5,0,31,56,46,0,28,40,38,11,22,9,26,21,21,24,16,8,32,36,5,0,23,64,0,58,53,45,41,64,9,9,5,0,75,33,31,36,5,0,27,26,3,0,5,79,70,76,26,4,61,12,5,13,32,68,5,0,35,34,3,0,5,80,46,4,71,12,5,13,33,15,34,53,11,7,0,40,13,5,0,35,0,40,26,0,55,25,32,52,7,0,25,33,44,16,39,9,14,42,7,12,34,0,30,50,0,8,76,25,8,26,24,9,5,3,0,5,70,4,64,67,12,5,21,28,41,72,0,55,5,0,16,3,0,5,35,4,57,75,26,65,34,12,5,40,38,0,49,58,0,31,44,73,13,5,0,60,47,73,13,5,0,38,68,73,13,5,0,42,72,73,13,5,0,34,34,13,5,0,71,30,0,45,11,60,21,64,75,15,7,5,0,75,26,0,8,39,42,7,54,39,13,31,8,0,11,63,0,54,76,74,9,21,23,68,75,15,7,5,0,6,60,6,36,20,15,78,66,11,8,0,51,79,26,73,11,0,31,23,16,22,16,19,17,14,12,11,15,7,0,79,5,0,76,3,0,5,41,4,55,68,44,57,75,26,65,34,66,13,5,70,6,70,6,70,0,29,22,75,54,8,5,0,66,0,37,25,24,0,21,41,27,28,39,6,0,48,0,25,8,61,8,51,54,42,0,21,60,32,7,5,0,54,72,38,51,9,57,34,5,0,6,67,6,39,0,54,50,0,32,42,57,7,0,23,27,28,32,0,58,44,9,9,5,0,16,3,1,0,38,0,3,76,9,2,49,62,74,13,11,3,36,69,0,37,43,47,5,4,1,0,3,47,2,49,11,3,28,25,23,1,0,3,24,2,11,3,26,17,1,0,3,61,2,76,53,51,61,11,3,57,4,80,80,79,79,76,44,4,49,13,24,32,49,14,4,0,40,0,13,57,26,42,23,18,13,4,1,0,3,77,58,2,55,55,76,53,49,11,3,80,46,35,68,0,51,10,42,3,1,0,30,24,17,12,14,16,13,2,62,12,32,67,40,36,95,74,65,38,37,19,54,55,71,62,52,19,13,11,5,10,42,38,52,27,160,81,70,39,54,26,92,43,50,48,19,30,15,43,56,9,14,83,47,23,51,13,9,45,58,5,38,39,38,23,23,17,49,13,21,69,23,64,33,23,51,75,11,59,28,55,33,9,7,28,38,120,9,14,122,9,7,80,43,38,38,36,36,32,54,35,43,43,41,26,21,26,42,21,57,18,22,15,9,38,5,78,75,75,24,29,12,29,47,34,18,50,58,17,51,13,11,30,49,35,13,18,55,13,11,23,73,10,23,24,46,27,35,35,33,18,13,18,34,13,64,40,23,13,56,45,60,46,45,17,15,10,17,53,49,39,19,36,30,36,21,26,42,56,42,48,33,38,46,33,31,25,30,38,25,21,19,15,9,6,1,0,60,37,80,100,56,28,57,44,39,82,63,48,26,9,69,43,26,9,53,68,32,83,15,22,19,9,61,35,67,32,43,15,92,96,19,9,15,6,1,0,32,0,32,0,34,0,20,0,42,18,0,4,57,76,3,16,12,4,21,0,3,78,79,78,70,43,3,21,42,0,5,80,74,5,47,2,0,4,46,3,47,63,81,16,12,4,33,16,26,29,2,0,4,37,3,75,50,47,63,73,27,12,4,58,34,60,4,0,54,45,0,86,74,64,0,18,2,0,4,24,3,75,48,12,4,36,68,36,2,0,4,71,29,3,16,11,4,26,31,25,2,0,4,75,14,3,20,11,4,60,17,13,12,0,45,0,42,75,4,0,38,63,4,0,16,3,0,4,54,3,50,46,11,4,63,44,36,0,28,41,0,72,28,4,0,13,3,0,4,62,3,50,46,11,4,71,44,37,0,28,30,27,3,0,4,61,3,50,71,11,4,73,45,0,40,0,36,29,11,9,0,22,83,0,19,65,69,73,77,81,85,6,0,58,34,6,0,49,11,34,11,0,35,91,0,21,67,71,75,79,17,75,40,12,0,61,8,6,4,0,15,3,0,4,37,3,50,47,70,35,11,4,62,55,3,0,4,46,3,50,47,70,35,11,4,66,54,3,0,4,42,3,50,76,72,57,35,11,4,92,45,0,39,13,27,17,4,0,37,0,22,9,29,35,50,8,29,6,11,79,11,34,40,54,10,35,8,6,0,7,78,7,85,32,4,0,15,3,0,4,58,3,52,35,11,4,81,11,0,15,43,50,11,33,27,4,0,15,3,0,3,54,3,68,64,0,3,22,3,32,0,3,60,3,42,0,3,22,3,2,33,2,19,0,18,0,3,48,2,49,59,62,65,15,3,54,36,15,0,26,0,21,16,14,23,0,17,15,24,0,15,23,0,18,23,0,16,17,3,0,20,2,0,21,24,29,37,29,0,48,26,0,4,49,4,22,4,56,53,12,3,13,3,51,40,3,78,61,45,62,4,69,3,16,4,0,67,55,82,0,51,70,67,5,0,50,46,0,24,47,4,0,22,34,4,3,20,32,4,0,59,99,4,0,0,43,48,0,5,105,63,5,25,47,56,60,52,4,0,0,70,45,59,26,10,0,5,70,5,38,38,15,0,5,76,79,54,5,58,0,60,0,30,28,96,46,25,4,19,3,0,4,45,45,21,3,13,3,33,19,3,44,4,50,3,16,4,0,40,24,27,0,32,0,17,3,0,4,80,3,47,3,37,3,16,4,33,70,0,15,13,55,3,0,4,53,3,47,3,65,3,16,4,48,67,3,0,4,76,3,40,3,16,4,0,30,7,87,7,52,35,30,34,15,0,38,0,5,83,29,5,14,35,30,38,40,5,0,77,22,0,61,41,0,27,3,0,4,53,3,32,66,81,3,16,4,90,31,49,69,8,4,117,18,35,40,32,30,13,40,20,6,20,22,32,13,21,17,6,6,3,0,4,78,3,49,3,16,4,25,31,16,0,28,24,0,0,40,0,3,19,2,70,69,12,3,0,26,0,5,51,4,46,49,70,4,17,5,61,36,51,5,4,0,5,64,63,4,46,49,70,4,17,5,61,36,70,75,75,5,4,0,88,79,39,53,47,56,0,79,34,15,7,0,32,37,39,37,7,36,45,7,0,48,5,4,5,48,40,4,46,49,70,89,4,17,5,68,64,60,62,24,43,42,80,97,11,78,93,11,52,10,0,75,69,5,0,73,65,5,0,46,63,68,27,63,41,49,7,5,0,57,41,53,42,7,29,7,4,0,5,46,4,46,49,70,4,17,5,65,84,32,43,49,12,43,5,3,0,2,0,38,0,12,0,27,17,9,38,53,5,27,40,38,5,3,33,2,0,23,20,26,27,37,22,22,0,56,75,40,33,54,53,4,3,0,25,39,31,29,2,44,30,40,2,49,36,48,2,41,31,19,2,0,44,57,27,22,33,26,22,23,26,23,30,32,0,32,25,42,3,0,42,18,48,36,4,0,30,25,1,66,0,51,37,21,2,0,53,75,50,21,35,3,0,53,86,73,3,39,24,20,3,0,73,48,26,19,17,5,11,3,60,77,43,70,57,3,49,8,57,17,3,2,0,34,73,34,35,20,27,3,44,24,20,3,0,33,14,38,51,3,8,20,46,44,25,47,7,24,3,2,0,52,66,38,46,2,0,54,62,37,42,2,0,45,71,18,0,35,37,29,53,50,3,0,47,31,24,34,5,44,27,19,14,29,3,0,36,25,24,24,34,27,5,0,38,45,45,48,19,47,5,23,64,5,3,0,30,17,33,3,0,52,20,28,3,8,52,3,0,23,38,31,31,34,0,14,2,0,47,1,30,37,29,59,46,4,3,0,44,65,66,64,5,3,0,69,38,25,25,3,0,60,62,52,21,53,28,38,5,24,3,0,43,42,46,24,38,5,10,62,57,5,3,2,0,0,57,61,29,40,63,24,74,11,3,0,62,51,29,39,55,3,0,30,38,70,47,0,26,31,43,52,3,0,29,78,25,40,14,20,43,32,63,32,45,34,32,20,36,9,56,38,36,36,34,67,11,9,57,31,24,9,7,9,3,2,0,55,70,34,39,37,26,28,32,29,7,3,0,70,72,65,69,44,56,0,55,43,61,46,44,41,36,0,15,34,11,3,0,61,37,68,21,0,54,67,59,52,11,3,0,44,21,52,23,36,58,43,30,3,0,58,47,69,68,36,86,70,77,72,50,77,33,55,34,63,3,0,73,82,0,73,52,62,62,70,0,41,18,7,52,3,17,52,11,3,0,34,41,26,48,49,0,73,55,63,46,45,56,80,3,0,41,45,27,32,29,6,26,22,21,30,6,9,69,5,17,30,13,5,41,3,0,35,7,27,3,17,52,3,2,0,70,26,21,17,21,36,4,0,23,27,52,32,71,74,0,46,48,25,38,27,13,50,9,21,36,36,9,7,51,36,7,12,27,24,39,7,42,27,23,7,0,21,31,43,45,25,48,0,68,34,56,5,0,50,44,77,27,28,5,0,52,46,88,80,7,5,17,1,0,26,33,0,70,34,17,33,50,32,39,25,25,29,33,48,25,4,30,42,3,17,1,0,48,16,31,29,34,29,5,3,67,41,1,0,48,31,52,17,36,5,10,59,25,5,3,38,50,54,36,21,1,0,32,43,64,3,30,18,1,0,41,51,73,1,0,10,67,38,0,32,32,25,24,48,0,47,21,3,0,60,0,3,19,2,70,69,12,3,0,0,19,0,5,63,4,46,49,62,4,17,5,0,58,60,43,42,46,5,4,0,5,67,4,46,49,62,4,17,5,0,48,25,45,5,4,0,5,57,4,46,49,62,4,17,5,0,50,29,0,71,18,70,35,41,6,0,55,44,54,59,23,7,0,99,4,0,5,63,63,25,4,46,49,62,4,17,5,0,62,0,20,70,0,74,27,29,0,25,52,86,74,8,0,54,71,73,36,43,0,47,47,5,0,28,81,61,6,0,71,44,51,61,7,7,0,56,48,30,60,26,9,5,0,50,35,23,7,0,79,66,32,37,0,48,39,64,56,34,9,0,18,34,16,51,9,7,5,0,43,0,48,65,0,59,45,62,9,7,0,26,58,40,61,11,80,60,14,59,7,7,3,0,2,0,26,26,22,0,3,19,2,73,69,12,3,0,2,20,2,3,0,0,18,5,54,35,4,46,30,4,17,5,0,69,55,23,18,5,0,60,23,18,5,4,0,5,57,4,46,30,62,4,17,5,0,54,29,0,18,70,33,62,6,0,55,44,54,59,23,7,4,0,5,62,63,4,46,30,62,4,17,5,69,0,52,63,33,0,36,40,22,9,0,48,43,9,20,16,33,6,0,31,0,50,0,0,87,59,6,0,71,84,0,20,42,44,65,25,128,25,7,7,0,71,47,0,60,41,63,9,0,78,69,54,38,26,9,0,38,0,72,0,8,82,47,8,91,0,49,0,39,61,7,0,64,0,35,16,30,14,47,7,19,5,3,2,0,20,32,38,36,39,30,30,29,28,0,32,0,4,50,35,3,13,3,39,23,3,45,4,96,3,16,4,0,34,0,29,54,69,43,34,21,0,38,45,26,0,16,8,0,36,10,43,27,10,30,46,41,44,0,16,8,0,41,27,8,0,36,0,50,51,60,10,0,63,85,8,0,45,12,36,41,11,49,42,44,12,120,17,10,8,7,5,2,47,0,32,18,0,27,70,0,77,76,26,0,57,22,6,0,55,21,6,0,40,0,2,0,41,0,49,5,52,51,5,45,15,4,3,0,58,22,60,0,37,52,32,0,24,93,4,0,39,0,15,3,0,51,19,22,30,4,0,76,20,25,20,39,6,7,0,68,41,51,4,65,17,0,36,37,6,0,51,0,33,3,67,41,51,4,65,17,0,36,37,6,0,51,0,35,3,17,0,89,45,0,0,3,28,2,12,2,47,53,2,60,2,80,2,14,3,0,0,37,4,64,4,7,62,62,57,62,62,53,53,85,122,124,80,108,130,94,102,133,127,7,4,56,55,20,7,5,0,34,1,0,0,50,50,50,0,0,0,0,3,48,3,30,0,3,37,39,37,2,44,49,41,12,49,3,0,20,30,17,0,74,0,45,55,43,23,47,36,20,19,9,39,56,9,56,54,53,36,31,127,36,30,19,61,23,41,52,22,31,17,13,18,99,36,30,19,26,13,11,29,40,9,69,48,7,21,57,32,44,61,59,35,68,70,79,43,56,25,67,52,31,21,17,13,11,5,100,57,28,40,57,55,35,34,69,59,47,73,38,21,56,61,88,38,21,54,61,44,21,17,72,35,52,17,45,23,13,9,15,6,1,49,73,33,1,0,24,0,29,0,24,0,56,27,35,0,36,31,57,14,25,20,17,49,9,21,65,14,25,20,17,65,9,21,67,14,25,20,17,43,9,21,56,14,25,20,17,51,9,21,6,0,40,23,47,56,41,58,28,80,0,46,18,75,54,27,23,20,13,10,0,71,33,23,8,6,0,39,65,43,14,25,20,17,57,9,21,6,0,52,67,29,12,5,3,0,60,34,17,43,77,4,0,16,26,18,17,6,2,0,40,81,63,63,19,6,4,16,2,0,30,35,27,43,43,38,4,23,2,9,0,26,0,52,51,53,52,19,13,28,44,92,72,41,21,69,17,13,9,7,100,64,61,6,1,0,48,36,55,38,61,100,67,67,26,9,16,13,96,9,19,27,9,43,13,62,82,30,88,60,89,88,61,43,98,25,80,62,65,27,21,31,94,92,94,48,39,64,40,47,38,49,26,89,53,65,27,21,17,22,73,86,47,30,78,65,27,21,26,38,21,17,13,53,71,64,48,73,45,49,32,47,62,33,86,197,21,26,33,92,140,21,68,17,13,35,39,36,35,32,45,84,84,36,84,26,40,44,63,53,17,51,65,34,83,49,77,41,37,17,73,68,67,19,29,92,72,100,64,42,59,88,62,39,23,17,13,9,19,65,57,41,72,30,17,45,40,23,13,57,57,41,72,30,17,74,75,64,77,72,77,23,13,27,9,15,6,1,0,43,79,40,42,44,24,24,25,31,12,22,51,19,23,11,6,1,39,36,53,5,10,98,5,1,44,101,31,22,56,46,64,9,5,32,44,62,54,59,5,35,22,30,37,120,102,58,70,68,80,64,28,64,5,2,88,52,36,24,23,49,54,35,57,5,10,77,69,67,80,39,76,43,49,5,36,31,94,24,44,28,47,39,16,48,39,107,46,37,32,9,32,85,86,92,76,69,21,57,9,144,6,50,35,19,9,22,41,78,22,103,13,58,44,13,9,66,48,27,63,59,36,15,9,41,59,25,41,46,62,112,17,13,9,7,75,78,55,69,58,76,52,8,24,12,13,15,13,30,24,35,68,18,40,13,9,6,2,38,100,67,32,26,9,49,57,83,58,44,21,68,87,59,61,23,17,27,35,17,13,9,15,6,1,0,44,31,100,56,40,28,32,72,25,42,10,15,6,1,0,18,7,89,7,49,11,44,11,23,25,35,41,41,39,37,36,39,30,29,34,43,23,59,33,41,9,5,1,41,24,15,5,18,25,24,77,1,19,28,35,40,39,83,42,41,5,39,57,44,5,23,64,5,28,47,5,24,49,19,35,35,49,15,9,5,69,115,48,50,94,118,35,38,39,5,21,37,31,45,56,11,5,7,78,76,25,7,124,46,48,62,29,30,49,52,62,27,35,33,9,78,38,40,42,42,82,17,13,11,35,55,49,52,62,27,26,9,38,49,48,32,5,70,75,53,19,58,21,32,46,32,52,59,68,37,46,67,13,39,9,81,54,49,46,9,19,5,76,76,74,37,31,37,64,33,42,63,9,42,44,49,25,13,9,40,24,35,19,5,45,50,81,22,32,59,58,47,33,34,42,56,75,49,53,13,9,49,5,1,0,28,0,33,0,15,0,25,6,31,14,14,15,2,1,0,28,6,75,14,15,2,1,0,24,32,51,2,0,19,2,0,22,33,30,0,23,36,15,2,0,56,21,16,3,0,14,2,0,6,89,25,14,15,2,2,0,34,27,8,29,1,0,52,112,0,46,21,19,9,23,18,17,4,14,17,3,4,0,15,2,0,28,34,69,30,28,42,0,31,60,0,33,0,3,44,0,6,34,2,39,34,72,35,0,16,0,27,19,39,21,3,0,41,0,33,7,55,29,12,0,28,28,3,0,80,87,0,26,28,3,0,57,72,0,20,3,5,0,43,17,0,28,7,69,19,23,3,2,0,19,2,0,35,12,14,20,21,30,12,3,0,34,54,14,17,6,2,0,67,34,0,26,44,14,9,18,27,4,6,2,0,13,25,32,0,29,19,0,21,36,3,0,27,37,3,0,28,30,3,0,12,32,3,61,52,0,19,76,78,0,20,16,21,22,12,20,4,0,15,55,3,0,37,0,21,34,3,0,12,84,78,60,24,41,4,30,48,3,0,32,60,49,3,0,87,89,9,12,17,10,91,53,0,57,31,8,58,27,13,0,56,60,62,3,0,32,38,3,0,22,63,61,40,39,3,2,0,22,36,2,0,56,47,2,0,83,0,20,43,36,0,41,55,55,12,5,0,24,6,5,2,0,20,0,19,2,0,35,34,45,2,0,18,13,8,4,2,0,36,32,43,2,0,54,91,63,2,0,18,13,8,8,26,3,4,2,0,35,59,16,2,0,37,0,19,46,2,0,19,1,0,68,20,31,2,0,23,50,2,0,41,1,0,16,0,63,25,17,61,4,7,74,135,2,4,0,64,19,58,17,4,56,4,0,61,26,17,48,4,72,4,0,17,23,0,18,0,31,0,12,23,0,28,40,24,17,19,0,30,0,40,48,43,0,18,16,4,0,32,36,16,4,45,38,59,18,6,4,15,2,0,43,50,17,4,37,2,0,37,38,57,6,2,0,32,53,2,16,1,0,9,20,0,25,34,21,14,19,0,30,0,37,38,51,6,2,0,32,47,2,0,37,51,2,0,37,23,22,22,0,42,54,42,54,0,30,30,30,18,0,25,34,34,31,0,13,2,13,1,0,9,69,26,8,23,1,0,22,20,0,38,38,17,17,3,0,12,40,50,5,0,51,54,17,21,16,22,9,9,6,3,0,47,72,13,68,18,19,7,5,15,5,1,0,31,36,7,41,16,66,18,12,14,5,3,1,0,49,38,34,0,28,36,22,0,33,68,0,35,35,0,67,47,72,7,7,46,46,43,68,7,6,30,65,9,61,0,18,53,26,3,0,10,12,12,15,3,2,0,35,34,13,13,3,11,13,0,65,19,0,54,29,53,39,0,29,71,0,44,73,13,0,30,5,0,66,30,33,28,57,22,20,30,12,33,7,43,7,5,0,62,2,0,33,18,0,65,19,0,45,29,71,0,44,73,13,0,47,33,11,60,17,22,28,14,22,9,21,5,3,0,30,16,0,18,15,0,29,2,0,22,25,0,30,0,35,48,55,0,28,16,2,0,95,2,0,28,47,36,0,28,22,37,0,56,50,30,52,49,99,0,73,75,26,13,46,23,23,9,5,0,17,0,9,47,43,67,11,17,19,15,30,31,9,5,0,76,97,19,84,5,0,20,1,0,35,80,1,0,40,0,17,0,52,51,0,29,24,46,0,15,1,0,53,24,19,0,55,0,58,64,44,0,64,48,36,40,0,44,0,29,21,0,24,46,0,44,32,50,5,0,15,1,0,32,34,0,31,0,36,0,41,42,0,14,14,2,0,66,38,0,24,18,2,0,52,2,0,31,40,0,33,45,21,38,0,11,0,9,39,44,25,31,0,69,45,1,0,34,0,26,40,25,34,0,45,45,67,0,32,41,0,60,0,18,41,33,0,38,5,0,23,1,0,32,19,22,5,0,40,46,0,69,61,0,89,68,50,104,100,100,40,77,0,84,85,56,0,37,58,99,0,76,0,62,58,115,5,0,18,1,0,42,45,39,23,20,5,0,83,88,0,30,20,16,13,16,24,19,20,17,10,6,0,53,58,1,0,22,0,43,0,43,78,23,24,50,31,33,7,1,0,39,17,15,5,0,33,0,37,75,57,73,30,51,0,22,59,13,9,0,91,6,1,0,39,48,55,5,0,16,1,0,43,48,59,5,0,16,1,0,16,21,17,21,18,2,0,24,22,24,0,40,26,49,0,30,74,0,75,87,45,0,19,1,0,44,26,49,0,30,77,0,109,82,0,18,1,0,27,33,36,0,34,36,0,3,53,47,2,15,45,67,2,3,3,73,80,3,40,38,70,78,48,55,5,48,49,5,17,1,53,44,89,24,7,33,25,200,9,7,16,1,35,27,24,25,20,21,20,14,14,2,44,53,56,65,64,88,79,32,69,45,13,53,89,37,72,66,97,53,31,15,24,9,21,28,9,5,78,96,93,84,62,28,5,23,36,9,66,85,20,5,17,21,5,1,0,48,77,50,71,44,57,30,29,7,34,37,14,75,71,21,57,5,79,100,80,60,20,20,15,20,19,16,35,11,20,27,61,79,10,40,58,10,33,40,55,62,13,48,89,10,29,26,78,53,13,10,37,60,10,36,60,73,13,10,39,55,29,97,13,26,10,23,34,52,48,58,17,13,31,32,27,34,57,63,33,15,39,10,21,38,92,13,38,80,13,18,92,13,10,38,42,65,78,50,59,19,13,42,10,28,30,34,39,36,76,6,65,26,35,17,37,13,21,31,13,10,45,40,49,9,5,36,63,37,35,28,9,39,6,42,37,45,61,9,55,39,41,17,52,13,25,25,34,42,19,13,9,7,33,59,7,36,59,7,50,57,69,61,82,9,7,40,44,80,58,11,5,52,25,72,43,5,82,20,28,46,5,32,34,25,78,5,12,35,16,68,5,11,30,48,5,29,67,39,82,32,27,88,5,32,49,25,50,57,20,63,80,5,28,77,50,42,63,31,53,22,104,60,33,22,11,5,20,61,22,29,36,27,19,9,28,33,9,44,43,56,26,56,13,38,32,13,29,6,40,65,58,55,17,35,13,23,44,23,13,41,11,5,10,27,5,18,1,67,41,22,73,5,41,52,57,54,43,58,13,39,28,36,7,17,57,25,68,50,23,76,69,139,13,18,26,13,11,5,37,90,43,18,97,5,1,38,18,25,5,28,34,41,32,34,39,11,7,36,27,7,51,48,26,35,26,32,17,22,30,17,15,9,14,22,9,7,1,38,54,1,50,20,35,15,45,6,37,70,21,51,5,64,63,65,78,42,5,17,42,25,12,6,39,51,157,5,18,1,38,17,49,68,25,50,41,50,27,27,13,11,5,25,9,53,5,17,49,27,11,15,5,34,40,65,25,41,9,14,25,41,9,5,77,26,40,62,53,28,31,9,5,10,62,5,54,37,1,46,32,30,77,76,74,75,76,65,80,28,47,28,65,65,14,9,83,5,1,0,13,17,28,44,47,2,0,13,19,23,44,23,17,19,81,24,68,24,59,37,23,39,59,63,41,19,61,47,26,54,21,26,44,34,28,21,26,27,25,63,99,65,53,65,60,51,40,36,71,71,22,60,65,23,17,22,85,17,31,101,63,56,73,13,18,40,59,13,65,9,50,60,43,54,24,38,49,35,24,10,47,45,25,24,26,52,61,10,45,70,49,13,25,24,26,50,59,10,44,54,46,30,44,16,56,24,10,15,6,1,0,49,84,84,51,12,28,61,43,46,43,46,43,51,6,1,3,78,3,43,76,26,117,53,38,25,79,69,5,11,36,25,70,5,12,37,16,60,5,27,87,20,69,43,40,19,18,41,25,26,45,55,17,13,9,8,43,42,35,57,38,54,33,58,13,39,28,14,7,85,23,83,43,18,83,5,12,15,19,21,21,69,9,6,1,0,17,17,46,17,2,0,82,22,48,23,24,40,18,27,9,14,28,27,9,5,12,15,15,15,23,27,28,29,33,46,13,9,6,1,0,44,3,54,77,80,57,3,31,18,1,82,30,36,48,76,74,33,32,44,5,70,71,45,5,23,13,16,37,6,32,31,105,25,60,41,61,9,5,84,52,26,33,17,25,9,28,24,9,49,59,9,14,39,9,6,126,106,87,105,22,91,85,23,74,65,56,38,46,54,11,44,55,5,20,50,45,41,7,19,100,25,67,72,6,47,52,75,74,47,28,70,59,53,71,45,68,28,6,22,32,70,23,53,56,79,85,69,93,21,23,69,44,5,30,40,76,62,63,26,45,39,17,18,62,75,30,83,36,55,17,72,49,48,81,44,22,72,40,41,27,30,56,26,28,27,37,71,40,83,28,13,18,27,40,74,40,38,77,47,56,55,49,65,60,48,58,51,46,34,29,28,13,95,10,6,33,69,92,13,77,125,58,51,34,21,47,109,23,31,28,31,28,6,83,35,54,20,64,36,39,6,28,73,108,21,27,27,32,37,17,16,13,12,24,25,21,29,15,36,63,14,23,21,23,31,30,10,29,70,10,15,32,23,23,30,28,29,66,46,13,10,38,81,23,46,36,34,10,36,39,6,22,18,25,6,94,69,28,24,26,23,28,6,131,95,32,23,19,51,43,32,51,48,7,22,35,214,5,36,151,5,31,19,51,43,109,5,28,44,24,57,21,35,67,13,11,5,74,126,85,61,5,59,39,67,46,38,87,44,62,126,40,64,122,4,13,9,5,20,1,3,84,32,3,54,31,144,46,19,5,19,30,23,48,41,42,9,5,10,31,36,124,30,9,5,26,30,118,20,5,16,1,35,26,27,29,18,39,36,35,42,36,16,38,11,5,52,1,96,36,72,21,21,59,50,5,10,68,29,54,66,43,25,36,18,9,5,24,39,20,5,22,41,21,5,46,22,5,10,72,13,65,63,9,21,5,9,68,94,60,62,35,26,34,71,9,16,48,19,46,10,5,15,121,16,5,1,50,62,64,76,34,37,32,26,21,40,25,21,38,29,28,23,17,38,40,51,10,18,13,41,30,37,55,38,43,42,46,39,39,44,39,53,35,57,47,22,47,100,53,52,44,35,25,84,52,54,25,88,79,70,25,32,43,42,26,23,17,14,13,52,30,79,89,120,88,114,32,75,61,26,23,17,13,9,7,43,12,19,80,6,1,50,72,82,72,76,16,63,46,59,53,13,58,9,17,17,45,13,19,82,13,9,5,73,10,51,57,79,61,64,44,55,13,18,48,13,10,48,58,39,55,50,5,1,58,22,64,30,72,22,55,22,46,13,9,5,16,1,48,63,1,46,31,63,33,56,53,1,0,636,0],"data":null,"url":"\")"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+saxes@6.0.0/node_modules/saxes/saxes.js":{"lineLengths":[13,62,46,44,44,48,18,26,42,32,24,26,26,48,38,34,61,56,16,107,20,23,27,2,22,107,20,13,12,12,15,14,2,20,15,19,36,51,33,47,44,52,26,31,32,46,47,26,45,35,37,28,37,29,43,43,42,31,34,47,47,35,41,42,40,39,48,47,51,44,33,41,26,35,47,37,48,49,49,30,44,14,15,15,19,18,20,17,20,19,27,23,18,19,21,22,26,27,17,36,52,32,62,56,62,73,43,21,19,40,77,13,18,21,42,81,13,18,16,5,18,29,39,67,68,22,18,27,29,27,68,26,24,83,26,24,87,13,18,16,5,1,42,47,51,5,1,49,44,26,28,36,3,32,3,18,14,11,28,14,14,19,16,14,15,12,12,10,12,2,36,30,24,39,30,30,40,34,30,32,26,26,22,26,2,56,19,7,37,7,22,61,47,58,57,42,23,86,85,86,14,68,19,14,52,42,35,73,56,73,48,115,65,61,37,49,51,13,9,14,50,40,33,73,59,73,51,9,10,82,84,16,10,27,66,24,34,26,31,22,28,30,34,29,35,34,24,30,23,25,27,31,26,32,31,24,30,31,30,25,25,27,35,30,28,36,31,35,32,26,31,25,29,37,30,36,36,38,27,35,65,10,21,5,7,75,42,7,18,28,5,13,15,31,23,23,27,25,22,23,24,26,24,31,19,23,45,46,29,69,43,37,52,74,84,39,74,21,44,42,43,45,46,52,88,13,38,9,46,35,29,29,24,31,32,34,10,22,24,52,84,5,7,76,18,6,74,61,7,20,43,5,7,75,67,6,79,80,80,61,6,73,18,7,23,54,5,7,77,79,47,6,42,6,41,7,23,114,57,5,7,30,6,50,7,15,114,59,5,7,79,80,71,19,6,65,6,66,7,24,15,75,33,33,27,13,49,9,29,24,9,40,5,7,81,81,14,6,42,6,20,7,19,44,42,36,22,9,14,25,9,20,5,7,38,6,42,6,20,7,73,28,18,26,85,9,24,29,80,26,23,23,9,45,37,9,83,80,83,81,66,53,62,58,49,9,33,53,19,74,21,78,83,82,44,56,20,42,9,36,27,19,32,113,46,9,36,39,5,7,79,25,6,20,7,13,32,5,7,81,43,6,48,6,35,7,17,34,23,82,52,23,32,23,9,75,34,41,22,28,48,28,13,27,24,32,36,59,30,24,90,57,89,91,32,39,21,88,29,53,32,36,59,35,24,84,55,32,13,9,28,80,84,50,54,51,13,24,9,59,47,23,84,53,31,47,9,21,5,7,81,43,6,48,6,44,7,17,34,23,82,52,23,32,23,9,75,34,41,22,28,79,31,28,13,27,31,32,36,59,30,33,84,28,57,54,91,87,39,21,72,17,39,33,34,32,36,59,35,24,55,32,13,9,28,86,83,59,54,51,13,24,9,59,47,23,82,69,31,47,9,21,5,7,78,32,7,19,33,38,5,13,28,22,5,7,74,18,6,81,63,6,81,79,15,7,22,32,31,57,22,37,43,44,57,60,29,13,27,67,31,13,9,5,7,71,6,79,70,6,80,32,7,25,32,31,57,22,35,24,29,71,35,27,26,25,52,33,24,13,29,60,28,13,9,5,7,80,19,6,79,79,15,7,24,41,57,22,37,28,48,27,13,82,33,60,46,13,9,5,7,25,6,70,79,15,7,18,57,22,41,39,25,13,9,5,28,41,63,32,35,42,9,14,35,42,9,61,5,27,80,57,14,80,82,79,65,57,50,21,26,9,40,5,24,82,83,82,83,40,31,36,37,41,9,20,22,41,86,56,45,62,17,22,21,22,20,29,36,45,9,5,16,15,53,20,27,105,31,36,69,22,13,21,22,20,53,41,39,17,38,49,31,17,9,5,21,25,36,49,26,35,9,5,12,49,24,19,9,45,34,35,9,30,41,9,30,38,23,9,5,18,25,36,49,31,26,9,5,20,37,45,20,22,50,39,22,26,38,22,20,35,9,5,24,62,46,26,26,62,35,9,5,19,40,29,46,9,5,25,37,45,71,5,24,37,45,28,31,9,14,44,56,44,39,9,5,14,43,29,41,9,5,20,37,45,28,31,9,5,13,10,80,73,79,47,10,82,83,82,76,81,39,10,37,36,9,14,41,9,5,15,83,32,31,67,14,57,22,37,29,73,35,26,33,55,80,51,31,40,56,38,21,26,58,41,21,89,44,21,57,31,17,25,54,57,31,24,13,9,5,17,74,82,74,18,33,52,33,36,25,41,9,14,24,35,45,49,26,26,50,43,49,26,30,49,26,24,66,40,49,13,9,5,21,70,36,27,68,65,55,17,69,65,54,17,37,39,22,22,39,39,22,27,39,51,78,17,39,22,20,85,48,52,51,17,9,5,16,40,42,9,5,22,15,37,26,41,101,27,9,14,55,35,9,5,21,37,28,44,56,44,56,35,9,14,32,9,5,14,48,40,9,5,20,37,34,42,9,14,55,33,9,5,21,15,37,20,27,103,31,36,22,13,31,33,22,20,60,37,9,5,80,81,20,37,82,61,37,53,35,9,44,66,66,9,14,78,53,35,9,5,15,81,39,41,57,22,41,28,52,23,13,85,22,37,64,50,43,50,52,98,25,92,21,26,74,21,17,22,86,61,17,22,13,9,5,15,37,41,33,41,13,31,52,13,9,73,40,48,37,9,5,17,15,37,28,38,51,91,13,86,33,32,15,43,32,9,34,84,86,83,22,29,9,14,55,35,9,37,5,25,36,73,40,29,70,43,19,9,24,41,48,9,5,20,59,73,40,29,43,35,27,56,19,9,39,19,9,31,23,55,39,23,75,26,23,78,26,24,83,13,9,74,5,18,37,73,40,29,43,56,19,9,21,19,9,26,41,9,44,5,26,37,73,40,29,43,56,19,9,21,19,9,26,47,27,9,14,23,9,38,5,21,53,73,40,29,43,27,56,19,9,24,19,9,32,23,28,29,65,38,47,84,51,75,17,79,53,48,17,22,13,28,63,58,34,17,53,46,22,30,56,80,17,41,48,22,20,82,52,9,23,42,5,25,37,73,40,29,70,43,19,9,22,46,25,9,43,5,22,15,37,28,42,82,13,47,58,69,13,104,27,43,32,9,14,83,76,32,85,9,37,5,16,15,42,24,19,9,32,28,44,10,23,28,54,9,96,28,51,62,9,20,25,31,22,31,46,22,20,30,67,17,38,9,5,21,41,38,9,14,73,34,9,5,15,36,24,19,9,33,25,39,9,33,27,9,39,42,9,14,65,9,5,19,42,26,40,9,26,49,9,33,50,50,39,27,9,29,65,9,5,27,36,20,21,23,23,44,22,20,54,39,55,31,31,36,35,17,46,33,47,17,22,73,42,17,9,5,20,37,25,23,47,9,27,51,49,25,9,5,26,81,47,34,32,57,22,37,23,91,47,34,55,27,25,64,42,67,27,24,29,25,70,35,26,26,64,55,27,25,52,27,24,13,9,5,26,37,21,34,9,33,27,9,39,42,9,38,59,25,39,9,14,65,9,5,28,76,78,82,64,61,67,20,21,38,65,22,22,51,22,21,22,20,48,80,17,54,43,36,35,17,22,42,17,9,5,17,42,28,28,9,26,47,9,29,62,9,5,25,36,25,32,22,21,22,20,66,9,5,34,24,84,81,80,84,10,84,78,10,48,53,67,18,57,22,37,28,45,48,46,69,48,50,43,25,54,43,25,21,53,57,35,17,25,42,52,48,68,21,53,57,35,35,45,45,63,34,47,71,34,55,34,32,64,21,26,29,71,84,21,53,26,29,48,75,21,35,53,26,25,48,56,21,57,35,24,53,13,9,45,5,29,84,77,83,33,32,53,29,67,21,57,22,40,27,28,45,48,46,69,48,50,43,25,54,43,25,21,57,38,17,25,42,52,48,68,21,36,57,38,29,48,75,21,35,26,25,48,56,21,57,38,24,37,40,21,13,9,24,19,9,76,78,17,60,57,47,9,61,57,46,9,5,31,15,51,52,35,94,33,41,69,75,13,40,46,9,36,41,37,43,9,5,34,15,37,35,94,5,7,77,31,6,20,7,11,19,28,63,9,30,33,35,51,9,66,41,9,30,32,93,27,9,28,82,21,20,5,7,34,6,43,6,80,7,21,19,37,32,23,9,30,64,41,36,27,13,9,30,32,23,9,109,5,7,58,6,36,6,15,7,17,53,40,27,47,9,44,44,67,50,9,33,5,24,15,36,29,9,40,59,32,30,98,32,41,72,17,33,86,37,17,13,9,38,19,9,35,31,55,59,40,49,20,23,32,62,30,13,18,43,73,41,40,86,33,17,44,13,35,61,13,29,27,36,9,29,5,27,36,56,47,51,49,59,13,37,9,29,5,7,79,74,21,7,15,15,30,30,29,34,83,75,91,23,28,23,5,7,82,79,40,7,26,23,30,30,29,33,83,75,91,92,98,27,35,9,28,23,5,7,80,74,22,7,16,36,80,23,28,23,26,48,31,19,9,45,28,25,46,32,75,36,22,13,47,9,22,35,9,25,57,38,9,5,7,70,6,43,6,34,7,25,66,32,50,40,31,13,65,56,33,9,22,65,48,9,44,48,9,76,32,53,33,9,41,5,1,34,33],"data":{"version":3,"file":"saxes.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+saxes@6.0.0/src/saxes.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/node_modules/xmlchars/xml/1.0/ed5.js":{"lineLengths":[13,3,77,2,33,15,36,3,62,2,13,2,70,22,43,204,91,2,23,2,62,57,84,72,101,71,12,13,13,17,2,9,2,46,38,3,66,2,27,2,55,3,20,41,44,39,40,1,24,3,71,2,27,2,52,3,17,60,1,18,3,77,2,27,2,66,3,29,39,35,21,21,23,23,35,35,39,39,39,39,39,39,39,39,40,1,42,3,71,2,27,2,60,3,24,32,35,21,21,21,39,37,1,32,31],"data":{"version":3,"file":"ed5.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/src/xml/1.0/ed5.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/node_modules/xmlchars/xml/1.1/ed2.js":{"lineLengths":[13,3,77,2,33,15,36,3,62,2,13,2,69,93,22,43,204,91,2,23,2,62,84,57,84,72,101,71,12,13,13,17,2,9,2,46,38,3,66,2,27,2,55,3,20,42,39,40,1,24,3,77,2,27,2,66,3,30,36,20,20,34,35,33,1,44,3,78,77,79,40,2,27,2,73,23,3,36,25,22,22,33,23,36,39,40,1,56,3,71,2,27,2,52,3,17,60,1,18,3,77,2,27,2,66,3,49,29,39,35,21,21,23,23,35,35,39,39,39,39,39,39,39,39,40,1,42,3,71,2,27,2,60,3,24,32,35,21,21,21,39,37,1,32,31],"data":{"version":3,"file":"ed2.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/src/xml/1.1/ed2.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/node_modules/xmlchars/xmlns/1.0/ed3.js":{"lineLengths":[13,3,54,2,33,15,36,3,62,2,13,2,43,207,97,2,23,2,90,78,110,3,65,2,27,2,46,3,49,31,39,21,35,35,35,39,39,39,39,39,39,39,39,39,40,1,46,3,59,2,27,2,46,3,26,34,22,25,39,27,43,42,1,36,31],"data":{"version":3,"file":"ed3.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+xmlchars@2.2.0/src/xmlns/1.0/ed3.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,EAAE;AACF,aAAa;AACb,EAAE;AAEF,2CAA2C;AAC9B,QAAA,kBAAkB,GAAG,iLAA2K,CAAC;AAEjM,QAAA,YAAY,GACvB,MAAI,0BAAkB,yCAAsC,CAAC;AAE/D,EAAE;AACF,uBAAuB;AACvB,EAAE;AAEW,QAAA,qBAAqB,GAChC,IAAI,MAAM,CAAC,OAAK,0BAAkB,OAAI,EAAE,GAAG,CAAC,CAAC;AAElC,QAAA,eAAe,GAAG,IAAI,MAAM,CAAC,OAAK,oBAAY,OAAI,EAAE,GAAG,CAAC,CAAC;AAEzD,QAAA,UAAU,GACrB,IAAI,MAAM,CAAC,OAAK,0BAAkB,UAAK,oBAAY,QAAK,EAAE,GAAG,CAAC,CAAC;AAEjE;;;;;;GAMG;AACH,iDAAiD;AACjD,SAAgB,iBAAiB,CAAC,CAAS;IACzC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,KAAK,IAAI;QACV,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC;AAC1C,CAAC;AAhBD,8CAgBC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,CAAS;IACpC,OAAO,iBAAiB,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,KAAK,IAAI;YACV,CAAC,KAAK,IAAI;YACV,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;YACxB,CAAC,KAAK,MAAM;YACZ,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;YAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;AACnC,CAAC;AARD,oCAQC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/index.js":{"lineLengths":[13,62,259,48,57,137,46,111,50,117,127,58,118,16,64,16,43,16,45,16,49,117,125,13,3,25,2,33,34,20,2,11,2,8,36,2,100,2,58,5,3,31,50,1,22,56,46,23,31,31,5,81,39,32,1,38,33],"data":null,"url":"index.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js":{"lineLengths":[13,62,24,52,67,77,60,48,63,61,48,47,49,16,35,39,29,29,17,18,27,60,68,68,60,80,66,60,54,62,72,67,77,73,59,61,65,83,69,67,69,75,79,87,42,18,18,17,20,16,15,18,2,156,30,27,34,49,23,2,8,14,82,47,43,33,29,51,59,32,32,86,38,11,73,60,11,41,41,59,31,37,44,87,52,54,65,32,55,9,112,70,113,148,144,112,5,10,33,41,43,31,5,56,85,100,50,187,96,92,60,99,69,69,77,9,50,40,37,44,22,5,19,74,67,48,24,5,12,36,15,31,19,84,21,17,37,35,41,63,60,69,10,31,5,18,34,19,105,52,45,5,28,19,50,58,9,131,20,24,29,75,47,54,13,18,64,13,57,9,5,36,116,40,90,5,60,61,50,56,48,5,32,48,59,66,5,22,34,71,34,40,5,34,40,22,81,40,22,13,56,9,5,40,116,19,9,41,40,45,71,22,13,40,38,41,42,43,45,72,22,13,43,76,22,13,46,74,22,13,20,25,9,5,19,29,38,46,46,82,29,83,107,30,88,13,9,5,45,50,103,69,9,52,47,9,14,70,58,9,5,41,97,59,5,41,97,59,53,5,40,87,49,47,5,28,99,66,59,56,50,48,70,5,30,104,48,70,73,63,5,39,75,58,50,84,9,5,30,19,26,52,78,32,86,13,18,65,13,9,14,64,61,9,28,19,64,98,51,98,75,20,66,100,9,55,81,9,5,35,119,47,59,9,5,44,91,48,60,27,85,88,93,19,53,43,41,47,17,19,45,43,49,18,75,9,5,22,55,69,35,25,20,25,71,43,50,9,14,60,9,51,90,80,25,9,16,88,39,98,33,104,86,5,26,29,50,40,22,13,55,44,22,13,48,38,22,13,48,38,22,13,50,45,22,13,48,37,22,13,44,34,22,13,61,50,22,13,9,5,24,50,61,60,76,5,47,44,72,25,195,75,50,71,98,58,13,9,5,20,23,51,52,58,50,5,22,82,68,5,21,27,63,38,109,43,62,27,17,44,44,46,69,27,17,48,66,27,17,49,71,27,17,46,64,27,17,45,63,27,17,49,67,27,17,47,57,27,17,49,72,27,17,45,113,27,17,41,43,32,67,31,21,26,17,45,32,67,31,21,26,17,13,9,51,5,45,28,53,55,55,26,17,57,74,27,17,13,9,53,5,22,41,44,5,38,115,5,36,63,59,50,49,94,113,21,26,17,46,79,33,70,21,91,17,24,29,13,9,75,5,35,61,37,92,9,14,67,9,5,22,36,61,54,5,24,37,43,51,19,9,37,41,48,22,13,45,45,22,13,45,45,22,13,41,41,22,13,51,49,22,13,44,44,22,13,39,42,39,45,45,22,13,36,41,52,46,22,13,40,45,40,46,22,13,47,50,22,13,49,48,22,13,44,44,22,13,50,49,22,13,20,25,9,5,28,37,43,55,19,9,37,41,48,22,13,45,45,22,13,45,45,22,13,41,41,22,13,51,49,22,13,44,44,22,13,38,46,22,13,40,45,40,46,22,13,49,48,22,13,44,44,22,13,50,49,22,13,20,25,9,5,22,37,36,39,19,9,37,39,43,43,39,49,42,39,40,42,47,45,38,39,41,50,43,43,48,43,22,13,47,46,22,13,44,60,22,13,48,54,53,22,13,20,25,9,5,22,37,37,41,50,22,13,43,39,49,44,72,22,13,47,46,22,13,20,25,9,5,23,37,34,37,57,97,9,5,7,35,6,77,79,79,24,6,41,7,29,69,50,9,14,55,9,5,43,37,41,48,22,13,45,48,22,13,45,48,22,13,41,44,22,13,51,52,22,13,44,47,22,13,41,44,22,13,42,45,22,13,47,46,22,13,44,47,22,13,49,51,22,13,47,49,22,13,40,43,22,13,41,44,22,13,43,46,22,13,52,53,22,13,45,48,22,13,44,47,22,13,45,48,22,13,48,51,22,13,50,52,22,13,54,56,22,13,20,25,9,5,21,37,34,36,48,9,14,53,9,5,41,37,41,48,22,13,45,46,22,13,45,46,22,13,41,42,22,13,51,50,22,13,44,45,22,13,41,42,22,13,38,42,22,13,42,43,22,13,47,46,22,13,44,45,22,13,49,49,22,13,47,47,22,13,40,41,22,13,41,42,22,13,43,44,22,13,52,51,22,13,45,46,22,13,44,45,22,13,45,46,22,13,48,49,22,13,50,49,22,13,20,25,9,5,18,37,41,48,22,13,45,45,22,13,45,45,22,13,41,41,22,13,51,49,22,13,44,44,22,13,39,40,42,47,45,38,39,41,52,39,22,13,38,39,22,13,47,46,22,13,45,43,22,13,42,43,46,48,54,41,22,13,20,25,9,5,34,35,41,78,47,27,17,52,13,9,43,42,19,9,37,39,49,42,36,47,41,50,43,48,46,22,13,39,42,39,43,42,48,54,55,22,13,40,45,40,46,22,13,47,60,22,13,20,25,9,5,1,24,27,106,68,28,51,109,33,71,75,42,9,59,42,9,5,10,38,5,34,1,33,59,29,38,29,50,57,18,9,71,36,9,5,25,58,71,5,25,1,26,59,36,70,103,113,64,81,72,78,43,34,69,13,43,9,14,66,48,67,13,50,60,34,9,5,23,1,28,54,67,109,61,38,22,1,26,75,56,44,49,44,5,10,65,76,78,9,63,5,1,30,79,77,45,83,45,57,77,67,58,71,1,23,39,50,80,38,18,9,79,29,18,9,69,90,96,46,27,77,77,5,1,24,68,34,73,1,51,57,1,44,44,1,32,21,82,25,87,76,49,65,62,9,35,65,56,86,55,54,51,64,94,63,62,21,17,13,9,5,1,31,68,41,30,101,39,65,5,52,48,1,39,61,78,48,27,1,35,68,39,48,51,52,5,10,34,5,1,37,27,133,34,5,1,36,31,48,27,1,35,68,39,26,37,37,18,9,37,55,51,52,18,9,18,38,9,5,1,37,27,133,34,5,10,77,5,1,36,74,43,44,27,1,31,68,35,26,37,37,18,9,35,39,38,35,37,55,40,18,9,38,75,18,9,41,45,80,13,18,59,66,13,18,9,39,38,76,18,9,39,80,18,9,41,37,54,33,56,72,18,9,37,80,18,9,18,34,9,5,1,33,26,37,33,55,18,9,35,33,37,34,18,9,41,43,18,9,18,81,9,5,1,41,39,58,72,86,9,72,55,41,32,5,10,77,5,1,32,25,47,27,1,41,68,43,26,37,37,18,9,39,38,35,35,35,39,38,37,18,9,41,69,18,9,18,42,9,5,1,41,26,41,33,52,18,9,35,42,18,9,18,81,9,5,1,40,165,27,25,44,27,1,34,68,38,26,37,37,18,9,37,55,33,52,18,9,41,55,56,18,9,35,39,38,35,35,39,37,36,39,38,74,70,37,49,18,9,37,80,18,9,18,37,9,5,1,36,26,35,35,35,37,18,9,41,43,18,9,18,81,9,5,1,35,74,44,25,1,31,68,31,25,46,38,18,9,57,48,18,9,44,36,18,9,46,37,18,9,44,35,18,9,40,32,18,9,16,21,5,1,46,45,31,1,36,45,31,25,1,39,41,76,5,1,39,74,56,29,64,5,1,43,74,38,46,47,51,52,5,1,42,62,27,5,47,1,49,62,27,5,71,29,5,47,1,38,62,27,5,47,105,104,29,25,1,39,52,39,66,31,9,51,26,51,9,5,1,43,25,27,56,51,80,151,74,60,18,9,53,49,47,70,18,9,5,62,27,5,47,1,44,62,27,5,47,59,1,41,61,48,70,5,45,47,25,1,36,115,29,37,58,67,5,45,47,74,1,36,45,47,74,1,39,45,59,37,49,5,47,74,1,41,45,47,46,25,1,40,142,27,5,47,25,45,1,39,45,47,25,32,1,31,80,78,1,40,45,47,32,29,5,32,1,40,47,32,1,37,62,27,5,47,25,32,1,40,44,39,33,1,43,47,105,111,29,56,46,25,41,1,38,62,27,5,45,25,68,1,41,25,68,1,92,23,42,68,1,41,45,47,25,21,53,59,62,55,53,46,38,1,43,66,29,5,45,47,1,37,59,48,5,47,1,37,59,81,5,47,1,39,45,49,46,28,53,5,10,53,5,32,1,38,45,46,46,28,50,5,10,50,5,32,1,42,45,47,1,35,26,32,32,32,32,33,33,34,35,35,36,37,39,38,18,9,34,38,18,9,33,33,33,33,33,35,51,18,9,32,33,33,33,34,34,34,35,35,36,37,37,37,37,37,37,38,38,38,38,38,39,41,43,44,18,9,33,33,35,45,18,9,33,34,34,35,36,39,41,18,9,35,39,18,9,33,36,39,18,9,33,35,39,18,9,34,40,40,18,9,36,40,18,9,36,40,18,9,37,41,18,9,35,35,35,36,36,37,38,39,41,37,18,9,37,41,18,9,37,41,18,9,37,41,18,9,37,41,18,9,38,42,18,9,38,42,18,9,36,36,39,42,18,9,38,42,18,9,39,43,18,9,37,37,40,43,18,9,39,43,18,9,39,43,18,9,37,41,45,18,9,40,44,18,9,41,45,18,9,41,45,18,9,41,45,48,13,18,48,13,18,9,42,46,18,9,34,33,33,33,35,36,36,36,36,38,41,27,18,9,18,44,9,5,1,37,59,51,76,38,47,82,30,54,13,9,5,1,37,59,51,34,5,1,40,27,40,48,49,5,1,30,52,30,22,29,5,90,48,25,72,9,31,47,9,5,1,27,63,72,5,23,1,28,65,80,66,5,1,35,27,40,63,49,5,1,40,52,48,54,5,1,39,27,40,48,49,55,5,1,28,45,70,25,25,1,40,29,28,55,48,51,85,114,68,45,50,18,9,54,18,9,5,1,33,26,32,32,32,32,32,33,33,34,35,35,35,36,37,39,41,18,9,34,29,18,9,33,33,33,34,34,34,34,35,35,36,37,37,37,37,37,37,37,38,38,38,38,38,38,39,41,43,42,18,9,35,30,18,9,33,35,37,18,9,33,33,33,33,33,35,42,18,9,35,30,18,9,37,39,18,9,37,39,18,9,37,32,18,9,37,37,40,41,18,9,41,43,18,9,18,42,9,5,1,30,46,32,5,10,30,5,1,28,68,33,11,50,103,5,25,46,1,30,75,25,46,19,1,32,68,37,64,44,56,50,54,29,50,47,22,13,61,57,22,13,26,9,5,10,31,5,1,43,45,46,47,47,1,44,45,47,52,1,39,45,82,52,36,1,41,45,47,50,1,38,45,76,50,34,1,41,65,69,32,34,5,1,41,31,51,5,10,31,5,32,1,40,59,51,47,29,5,1,36,26,33,33,35,40,18,9,36,37,41,37,18,9,36,41,18,9,37,42,18,9,38,43,18,9,36,36,38,43,18,9,38,43,18,9,40,45,18,9,41,46,18,9,18,35,9,5,1,34,26,38,73,77,40,13,18,9,41,43,18,9,35,38,34,39,35,36,33,36,33,36,35,27,18,9,18,35,9,5,1,33,63,36,38,25,57,1,37,68,51,41,1,41,41,51,1,37,14,50,58,57,9,5,10,58,61,9,5,46,27,1,34,68,248,38,27,38,71,52,75,59,53,38,9,5,10,33,5,1,36,27,17,38,38,75,56,79,63,57,52,44,17,13,18,9,35,34,39,35,36,33,36,33,36,35,27,18,9,18,35,9,5,1,39,68,42,26,37,37,18,9,36,55,40,18,9,41,37,18,9,18,41,9,5,1,40,26,41,76,37,57,13,18,9,41,43,18,9,36,27,18,9,18,41,9,5,1,39,68,29,49,31,5,1,37,68,40,26,35,57,55,51,18,9,33,35,57,78,51,36,18,9,38,34,39,36,36,38,67,61,37,57,42,13,18,9,18,38,9,5,1,38,27,26,36,36,38,53,61,37,57,13,18,9,38,67,61,37,57,40,13,18,9,35,38,34,39,35,33,33,35,27,18,9,18,36,9,5,1,30,68,34,26,33,35,56,55,52,54,18,9,38,34,39,36,36,36,35,70,60,37,62,46,13,18,9,18,38,9,5,1,32,26,35,70,60,37,62,13,18,9,38,70,60,37,62,44,13,18,9,36,36,38,117,60,37,62,44,13,18,9,35,38,34,39,35,33,35,29,18,9,18,36,9,5,1,31,68,35,27,38,121,32,36,9,5,10,33,5,1,33,27,17,33,35,53,56,57,63,55,13,18,9,36,36,36,36,35,53,36,38,13,18,9,35,38,34,39,37,27,18,9,18,35,9,5,1,33,68,37,26,37,37,18,9,39,74,37,13,55,18,9,41,74,37,13,76,37,13,55,18,9,36,37,39,39,75,78,40,62,46,17,13,18,9,37,41,37,18,9,16,21,5,1,35,26,41,46,74,99,37,13,76,37,13,18,9,39,74,37,13,18,9,39,75,78,40,13,18,9,41,43,18,9,16,21,5,1,42,68,44,27,42,40,40,40,40,37,37,37,70,32,34,5,10,35,5,1,42,27,42,40,40,40,40,37,37,37,49,74,36,30,9,5,10,33,5,1,35,68,39,26,66,35,39,38,35,35,39,37,36,39,38,37,18,9,55,38,39,36,36,38,65,53,38,18,9,36,72,60,44,18,9,35,70,58,42,18,9,33,35,63,51,36,18,9,18,64,52,37,9,5,1,37,52,39,5,1,34,39,72,55,41,32,23,5,10,30,5,1,34,68,38,48,33,5,10,33,5,1,36,11,48,33,61,9,76,38,101,62,69,56,143,54,13,9,5,10,33,5,1,35,44,25,1,35,68,39,26,37,37,18,9,41,55,18,9,38,55,40,18,9,41,37,18,9,16,21,5,1,37,98,29,94,59,9,5,1,38,68,42,26,37,37,18,9,41,37,18,9,16,21,5,1,40,48,61,5,1,40,68,43,48,33,5,10,38,5,1,40,44,25,1,44,68,47,26,37,37,18,9,41,37,18,9,16,21,5,1,50,68,50,48,31,1,46,31,25,1,44,89,86,29,5,1,45,43,42,48,5,10,55,65,48,57,9,50,56,54,9,50,32,47,9,14,47,9,36,5,1,43,84,42,46,15,5,55,48,75,50,18,9,58,54,68,36,46,18,9,5,1,33],"data":null,"url":"index.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js":{"lineLengths":[13,62,51,55,53,49,54,61,47,53,52,17,17,16,17,17,17,17,16,17,16,17,16,16,17,17,17,17,17,17,17,16,17,16,17,16,16,16,3,8,10,19,38,42,44,52,48,46,54,46,72,68,69,75,71,71,83,79,79,79,89,69,79,89,99,95,95,93,83,93,103,113,89,73,59,71,75,89,89,79,87,75,57,77,57,67,45,75,85,95,105,63,53,63,45,69,55,67,87,95,109,109,93,121,87,95,109,109,93,57,57,73,65,69,81,69,85,105,93,85,93,26,46,25,21,25,27,35,31,39,2,7,109,82,90,27,92,1,27,108,1,27,104,1,28,48,1,34,49,1,35,108,1,35,104,1,30,84,1,27,19,1,27,185,1,48,90,1,50,124,1,11,17,35,31,31,28,78,28,11,100,77,10,93,11,35,35,28,32,38,30,40,42,33,51,72,59,5,12,16,19,131,5,59,32,51,24,9,16,46,53,59,24,23,26,10,5,23,24,19,27,45,43,39,45,36,13,9,28,5,9,13,27,5,27,27,58,9,28,44,24,19,31,27,90,9,5,46,27,52,31,27,90,9,5,35,27,56,31,5,17,26,46,56,32,24,9,21,5,17,16,37,43,5,23,44,41,5,34,27,28,5,23,44,41,40,9,5,53,67,86,48,24,9,21,5,20,28,29,49,24,44,31,34,22,49,10,5,26,29,47,24,44,31,34,22,49,10,5,33,29,47,21,54,10,5,38,29,47,30,31,27,27,43,10,5,40,38,17,18,43,10,5,20,34,28,34,22,10,58,5,22,15,15,40,82,47,57,141,76,35,39,13,9,14,63,9,5,23,35,66,64,70,9,5,20,22,53,33,26,57,59,65,9,59,5,27,37,30,55,57,47,40,9,14,38,69,13,33,74,13,38,9,44,5,28,30,35,44,5,28,30,35,44,5,46,41,93,45,70,85,83,89,13,54,54,73,26,17,59,77,26,17,65,83,26,17,13,46,9,5,21,52,23,50,48,54,9,50,73,28,5,25,99,115,98,40,58,89,107,115,50,41,59,66,70,52,13,18,55,23,13,9,45,5,24,37,55,50,53,49,80,5,52,108,20,84,5,34,39,26,23,37,96,97,22,22,24,52,75,62,25,92,55,120,121,64,62,79,125,128,66,43,37,17,22,79,28,41,102,47,67,101,31,81,17,40,63,36,26,17,13,9,32,67,84,9,78,80,57,27,22,5,40,75,71,65,5,53,54,63,9,14,36,9,5,83,20,29,30,36,22,13,32,38,22,13,33,39,22,13,37,42,22,13,35,41,22,13,34,39,22,13,38,42,22,13,34,39,22,13,47,50,22,13,45,48,22,13,45,48,22,13,48,51,22,13,46,49,22,13,46,49,22,13,52,54,22,13,50,52,22,13,50,52,22,13,50,53,22,13,55,57,22,13,45,49,22,13,50,53,22,13,55,57,22,13,60,61,22,13,58,59,22,13,58,59,22,13,57,59,22,13,52,55,22,13,57,59,22,13,62,63,22,13,67,67,22,13,55,57,22,13,47,51,22,13,40,45,22,13,46,50,22,13,48,52,22,13,55,58,22,13,55,58,22,13,50,54,22,13,54,57,22,13,48,51,22,13,39,44,22,13,49,53,22,13,39,44,22,13,44,48,22,13,33,39,22,13,48,51,22,13,53,55,22,13,58,59,22,13,63,63,22,13,42,46,22,13,37,42,22,13,42,46,22,13,33,39,22,13,45,49,22,13,38,43,22,13,44,48,22,13,54,57,22,13,58,61,22,13,65,67,22,13,65,67,22,13,57,60,22,13,71,72,22,13,54,57,22,13,58,61,22,13,65,67,22,13,65,67,22,13,57,60,22,13,39,44,22,13,39,44,22,13,47,51,22,13,43,47,22,13,45,50,22,13,51,55,22,13,45,50,22,13,53,57,22,13,63,66,22,13,57,61,22,13,53,57,22,13,57,60,22,13,22,49,13,9,5,20,17,72,20,21,59,44,22,13,54,46,55,22,13,49,72,40,22,13,48,37,22,13,22,40,13,9,5,20,72,22,21,54,48,55,22,13,59,57,22,13,49,72,68,22,13,48,37,22,13,22,40,13,9,5,20,72,23,21,59,58,22,13,49,72,68,22,13,48,37,22,13,22,40,13,9,5,24,72,26,21,59,62,22,13,49,72,68,22,13,48,37,22,13,22,40,13,9,5,22,72,25,21,49,72,68,22,13,48,37,22,13,22,40,13,9,5,21,72,23,32,40,40,35,9,12,25,65,63,26,17,56,52,26,17,62,91,48,53,48,26,17,52,69,41,41,26,17,26,83,41,44,40,17,13,5,25,72,26,32,38,40,35,9,12,25,66,70,44,26,17,52,69,42,41,26,17,26,83,48,53,48,17,13,5,21,72,23,40,21,48,52,53,54,57,22,13,52,58,22,13,62,40,43,22,13,49,72,68,22,13,48,57,37,22,13,22,96,13,9,5,34,72,34,54,51,9,14,33,38,34,9,5,32,72,32,32,51,44,9,14,34,38,34,9,5,30,74,46,9,34,40,46,72,21,48,52,53,54,62,57,29,13,52,62,58,29,13,62,62,43,40,29,13,22,50,13,9,5,32,72,32,43,34,38,34,9,5,35,72,35,54,52,9,14,33,39,35,9,5,33,72,33,32,52,45,9,14,34,39,35,9,5,33,72,33,43,34,39,35,9,5,39,72,38,21,52,60,22,13,61,60,38,22,13,22,37,47,42,13,9,5,37,72,36,32,56,48,9,14,34,43,38,9,5,37,72,36,43,34,43,38,9,5,37,72,37,59,61,33,9,14,43,38,9,5,42,72,41,59,61,33,9,14,43,38,9,5,32,72,33,21,57,60,37,22,13,59,70,22,13,49,72,68,22,13,48,79,37,22,13,22,40,13,9,5,37,72,37,21,57,65,37,22,13,59,70,22,13,49,72,55,68,22,13,48,79,37,22,13,22,55,40,13,9,5,42,72,41,21,57,37,22,13,59,70,22,13,62,47,37,22,13,49,72,55,68,22,13,48,79,37,22,13,22,55,40,13,9,5,47,72,45,54,64,9,37,33,63,55,9,14,33,51,45,9,5,45,72,43,32,64,55,9,14,34,51,45,9,5,45,72,43,43,34,51,45,9,5,44,72,43,81,112,36,76,53,13,58,9,46,51,45,9,5,39,72,39,21,57,67,37,22,13,59,77,37,22,13,49,72,68,22,13,48,79,37,22,13,22,40,13,9,5,44,72,43,21,57,72,37,22,13,59,77,37,22,13,49,72,62,68,22,13,48,79,37,22,13,22,62,40,13,9,5,49,72,47,21,57,37,22,13,59,77,37,22,13,62,47,37,22,13,49,72,62,68,22,13,48,79,37,22,13,22,62,40,13,9,5,54,72,51,54,61,33,9,14,58,51,9,5,42,72,41,81,112,36,76,53,13,51,9,46,58,51,9,5,34,72,35,21,48,52,53,54,36,22,13,50,60,48,56,50,22,13,56,88,38,50,22,13,22,37,50,45,13,9,5,27,72,29,21,48,52,53,52,50,60,48,38,56,50,22,13,56,38,58,22,13,57,53,59,83,66,22,13,49,72,76,22,13,22,104,13,9,5,33,72,34,21,48,52,53,54,36,22,13,52,58,22,13,56,58,22,13,62,40,43,22,13,48,57,37,22,13,22,37,50,45,13,9,5,35,72,36,21,48,52,53,54,36,22,13,59,65,22,13,55,65,22,13,62,70,40,43,22,13,22,60,54,13,9,5,44,72,42,21,59,64,22,13,54,71,55,22,13,49,72,77,22,13,48,57,37,22,13,22,67,13,9,5,44,72,42,21,55,64,22,13,54,71,55,22,13,49,72,77,22,13,48,57,37,22,13,22,67,13,9,5,39,72,38,21,48,52,53,54,39,57,22,13,54,66,55,22,13,62,39,40,43,22,13,49,72,77,22,13,57,53,57,54,57,92,67,22,13,48,57,37,22,13,22,67,13,9,5,43,72,41,21,48,52,53,54,39,57,22,13,52,39,58,22,13,62,39,40,43,22,13,48,57,37,22,13,22,83,57,51,13,9,5,35,72,35,21,62,48,41,40,43,22,13,48,57,37,22,13,22,71,57,51,13,9,5,26,72,28,40,21,62,40,47,22,13,48,47,37,22,13,49,72,65,22,13,22,55,13,9,5,36,72,37,83,82,45,9,87,129,102,39,9,90,37,49,13,18,67,88,51,49,13,9,85,69,46,69,40,45,40,9,5,26,72,28,21,57,54,22,13,62,76,40,48,47,22,13,22,43,39,13,9,5,31,72,32,40,21,57,47,22,13,62,76,40,47,22,13,48,61,47,37,22,13,22,34,43,39,13,9,5,20,72,23,40,21,57,52,22,13,59,34,58,22,13,49,72,65,22,13,48,61,47,37,22,13,22,55,13,9,5,35,72,35,40,21,61,34,63,22,13,59,34,22,13,22,43,39,13,9,5,40,72,39,59,64,9,14,39,35,9,5,45,72,43,59,69,9,14,48,42,9,5,50,72,47,103,58,9,39,34,5,29,72,30,40,21,57,47,22,13,48,61,47,37,22,13,22,34,43,39,13,9,5,24,72,26,40,21,62,40,47,22,13,61,52,22,13,57,34,22,13,48,61,47,37,22,13,22,35,43,39,13,9,5,29,72,30,40,21,57,36,52,22,13,62,73,40,47,22,13,48,61,47,37,22,13,22,36,43,39,13,9,5,20,72,23,21,48,52,53,54,55,22,13,62,55,49,22,13,48,61,47,48,41,47,37,22,13,22,83,55,49,13,9,5,32,72,33,31,76,44,9,12,25,52,56,57,58,40,26,17,53,76,81,52,26,17,66,71,51,52,45,51,44,26,17,52,65,51,52,45,51,41,26,17,26,71,52,17,13,5,25,72,27,40,21,48,52,53,54,54,22,13,62,40,47,22,13,49,72,65,22,13,48,61,41,47,37,22,13,22,93,13,9,5,31,72,32,40,21,48,52,53,54,36,22,13,62,40,47,22,13,48,61,41,47,37,22,13,22,89,68,17,94,68,17,91,77,54,93,45,53,48,17,13,9,5,41,72,41,40,21,48,52,53,54,68,22,13,59,91,36,75,22,13,55,91,36,75,22,13,62,79,41,40,47,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,45,72,45,40,21,48,52,53,54,36,22,13,59,36,75,22,13,55,36,75,22,13,62,79,41,40,47,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,54,72,51,40,21,59,67,22,13,49,72,69,22,13,62,78,41,47,40,22,13,48,61,41,47,37,22,13,22,59,13,9,5,54,72,51,40,21,55,67,22,13,49,72,69,22,13,62,78,41,47,40,22,13,48,61,41,47,37,22,13,22,59,13,9,5,44,72,44,40,21,48,52,53,54,81,22,13,62,40,47,22,13,59,106,36,75,22,13,55,106,36,75,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,58,72,56,40,21,48,52,53,54,36,22,13,62,47,40,22,13,59,36,75,22,13,55,36,75,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,41,72,41,40,21,48,52,53,54,68,22,13,59,91,36,75,22,13,55,91,36,75,22,13,62,79,41,40,47,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,45,72,45,40,21,48,52,53,54,36,22,13,59,36,75,22,13,55,36,75,22,13,62,79,41,40,47,22,13,48,61,41,47,37,22,13,22,90,41,49,44,13,9,5,54,72,51,40,21,59,67,22,13,49,72,69,22,13,62,78,41,47,40,22,13,48,61,41,47,37,22,13,22,59,13,9,5,54,72,51,40,21,55,67,22,13,49,72,69,22,13,62,78,41,47,40,22,13,48,61,41,47,37,22,13,22,59,13,9,5,44,72,44,40,21,48,52,53,54,36,22,13,62,47,40,22,13,48,61,41,47,37,22,13,22,96,49,44,13,9,5,26,72,28,40,21,62,47,40,22,13,49,72,22,13,48,47,37,22,13,20,25,9,5,26,72,28,21,65,57,22,13,48,59,37,22,13,22,40,13,9,5,34,72,35,67,49,9,14,33,45,40,9,5,30,72,31,21,62,40,22,13,65,37,22,13,22,38,49,44,13,9,5,32,72,34,58,59,9,43,57,51,9,14,97,57,9,5,38,72,39,67,76,69,40,44,9,31,58,81,13,42,9,14,97,51,9,5,31,72,34,38,65,9,14,60,79,13,57,9,5,40,72,41,29,111,69,9,58,36,59,53,9,14,87,97,99,57,9,5,50,72,50,34,63,57,9,14,87,97,99,31,42,9,5,44,72,45,39,65,9,44,65,9,36,65,9,61,63,9,14,84,63,56,9,5,40,72,41,31,65,9,61,63,9,14,84,63,56,9,5,44,72,44,65,67,78,9,46,82,78,9,67,72,78,9,76,75,9,139,70,89,44,47,13,9,75,53,5,1,30,33],"data":null,"url":"index.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js":{"lineLengths":[13,62,30,53,61,7,41,14,32,112,20,26,31,23,22,83,29,27,37,38,35,56,27,30,35,22,63,32,5,112,15,83,5,18,49,5,20,43,16,17,28,26,26,24,32,30,10,5,16,78,45,59,9,5,15,44,35,5,27,44,48,62,60,97,27,71,31,79,13,9,94,42,38,48,9,34,63,18,5,27,47,5,23,41,54,42,47,25,33,37,9,5,31,35,31,9,14,30,9,35,44,5,35,101,35,5,40,52,59,56,25,9,28,59,9,50,65,47,29,13,9,20,5,18,38,38,56,48,9,47,109,5,15,19,59,25,31,24,41,9,43,56,48,9,48,112,62,30,40,54,9,116,26,56,30,39,69,28,45,31,38,13,9,37,48,44,9,74,67,65,72,39,56,62,38,34,52,9,18,5,40,55,74,9,62,70,9,5,20,26,44,50,23,9,27,5,1,36,40],"data":null,"url":"preprocessor.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js":{"lineLengths":[13,62,225,39,89,83,84,30,3,41,16,25,49,50,62,73,61,61,53,75,71,65,61,63,67,57,57,57,61,71,65,77,69,73,73,73,73,83,67,69,70,70,70,88,68,21,20,27,23,21,21,21,2,12,26,38,1,34,30,38,1,42,46,45,1,62,43,33,116,36,1,48,35,73,1,52,35],"data":null,"url":"unicode.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js":{"lineLengths":[13,62,21,8,17,79,70,64,115,60,71,64,65,99,82,100,54,89,80,99,116,108,52,35,61,88,106,138,106,104,104,80,80,78,78,56,67,83,43,44,75,43,67,39,107,63,73,95,69,79,89,55,102,54,59,46,50,86,97,88,69,70,84,60,92,44,39],"data":null,"url":"error-codes.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js":{"lineLengths":[13,62,50,14,23,56,66,78,56,52,52,52,44,60,62,40,55,47,40,9,5,16,1,36,33],"data":null,"url":"token.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+entities@4.4.0/node_modules/entities/lib/decode.js":{"lineLengths":[13,72,62,2,62,250,88,55,86,53,78,56,61,142,136,14,23,45,47,47,47,53,54,54,90,63,34,17,26,72,74,66,71,33,51,21,24,23,58,46,29,27,24,67,59,86,39,30,47,74,30,32,31,17,18,50,72,35,77,77,39,62,56,68,36,21,38,33,21,70,37,17,25,13,30,27,28,46,61,100,32,26,46,65,66,29,103,79,44,35,21,96,57,42,30,43,17,13,34,92,22,37,97,43,76,104,46,13,9,40,6,1,62,66,55,51,28,70,5,54,21,38,48,16,46,5,54,39,21,34,22,34,37,28,25,9,33,25,9,14,49,9,5,14,1,42,60,58,3,80,2,35,31,3,26,35,1,32,3,83,2,35,31,3,32,34,1,44,3,82,2,35,31,3,25,33,1,30,34],"data":{"version":3,"file":"decode.js","sourceRoot":"","sources":["https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/decode.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+entities@4.4.0/node_modules/entities/lib/generated/decode-data-html.js":{"lineLengths":[13,46,62,34,18,47531,14,52,44],"data":{"version":3,"file":"decode-data-html.js","sourceRoot":"","sources":["https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/generated/decode-data-html.ts"],"names":[],"mappings":";AAAA,8CAA8C;;AAE9C,kBAAe,IAAI,WAAW;AAC1B,kBAAkB;AAClB,268CAA268C;KACt68C,KAAK,CAAC,EAAE,CAAC;KACT,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CACnC,CAAC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+entities@4.4.0/node_modules/entities/lib/generated/decode-data-xml.js":{"lineLengths":[13,46,62,34,18,87,14,52,43],"data":{"version":3,"file":"decode-data-xml.js","sourceRoot":"","sources":["https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/generated/decode-data-xml.ts"],"names":[],"mappings":";AAAA,8CAA8C;;AAE9C,kBAAe,IAAI,WAAW;AAC1B,kBAAkB;AAClB,uFAAuF;KAClF,KAAK,CAAC,EAAE,CAAC;KACT,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CACnC,CAAC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+entities@4.4.0/node_modules/entities/lib/decode_codepoint.js":{"lineLengths":[13,117,7,62,58,25,15,16,16,15,16,16,16,16,15,16,15,16,15,15,16,16,16,16,16,16,16,15,16,15,16,15,15,15,3,24,113,83,20,29,29,77,49,5,45,18,2,38,11,79,22,5,86,1,44,37,67,1,34,44],"data":{"version":3,"file":"decode_codepoint.js","sourceRoot":"","sources":["https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/decode_codepoint.ts"],"names":[],"mappings":";AAAA,qHAAqH;;;;AAErH,IAAM,SAAS,GAAG,IAAI,GAAG,CAAC;IACtB,CAAC,CAAC,EAAE,KAAK,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,IAAI,CAAC;IACX,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,GAAG,CAAC;IACV,CAAC,GAAG,EAAE,GAAG,CAAC;CACb,CAAC,CAAC;AAEU,QAAA,aAAa;AACtB,iHAAiH;AACjH,MAAA,MAAM,CAAC,aAAa,mCACpB,UAAU,SAAiB;IACvB,IAAI,MAAM,GAAG,EAAE,CAAC;IAEhB,IAAI,SAAS,GAAG,MAAM,EAAE;QACpB,SAAS,IAAI,OAAO,CAAC;QACrB,MAAM,IAAI,MAAM,CAAC,YAAY,CACzB,CAAC,CAAC,SAAS,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CACxC,CAAC;QACF,SAAS,GAAG,MAAM,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;KAC5C;IAED,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AAEN,SAAgB,gBAAgB,CAAC,SAAiB;;IAC9C,IAAI,CAAC,SAAS,IAAI,MAAM,IAAI,SAAS,IAAI,MAAM,CAAC,IAAI,SAAS,GAAG,QAAQ,EAAE;QACtE,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,MAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,mCAAI,SAAS,CAAC;AACjD,CAAC;AAND,4CAMC;AAED,SAAwB,eAAe,CAAC,SAAiB;IACrD,OAAO,IAAA,qBAAa,EAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;AACtD,CAAC;AAFD,kCAEC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js":{"lineLengths":[13,62,197,36,7,16,48,56,45,49,55,50,41,10,19,27,31,35,31,27,29,27,27,50,3,28,2,76,3,18,27,45,39,55,74,14,23,25,37,51,35,31,37,33,25,31,39,37,29,43,31,27,35,37,35,31,29,39,27,31,37,35,29,29,27,27,27,33,39,43,35,31,35,50,31,33,39,27,27,27,27,27,27,31,35,35,27,31,25,29,33,33,35,35,33,27,31,37,31,43,37,31,31,31,35,27,27,27,27,33,29,31,39,37,39,35,27,39,35,25,33,41,29,27,27,27,29,31,25,35,37,35,35,33,31,35,35,33,29,37,29,33,33,39,39,33,27,27,33,33,27,33,27,25,27,29,29,29,29,62,3,47,2,69,3,11,20,46,34,46,60,44,40,46,42,34,40,49,47,39,53,41,37,45,47,45,41,39,49,37,41,47,45,39,39,37,37,37,43,49,53,45,41,45,61,41,43,49,37,37,37,37,37,37,41,45,45,37,41,35,39,43,43,45,45,43,37,41,47,41,53,47,41,41,41,45,37,37,37,37,43,39,41,49,47,49,45,37,49,45,35,43,51,39,37,37,37,39,41,35,45,47,45,45,43,41,45,46,44,40,48,40,44,44,50,50,44,38,38,44,44,38,44,38,36,38,40,40,40,40,53,32,28,40,54,38,34,40,36,28,34,42,40,32,46,34,30,38,40,38,34,32,42,30,34,40,38,32,32,30,30,30,36,42,46,38,34,38,54,34,36,42,30,30,30,30,30,30,34,38,38,30,34,28,32,36,36,38,38,36,30,34,40,34,46,40,34,34,34,38,30,30,30,30,36,32,34,42,40,42,38,30,42,38,28,36,44,32,30,30,30,32,34,28,38,40,38,38,36,34,38,38,36,32,40,32,36,36,42,42,36,30,30,36,36,30,36,30,28,30,32,32,32,32,3,28,11,94,1,28,17,28,24,18,17,15,18,16,15,19,18,21,15,13,17,18,17,14,19,13,18,14,14,13,13,16,19,21,17,17,15,16,19,13,13,13,13,13,13,15,17,17,13,15,17,14,16,13,15,18,15,18,15,15,14,18,19,19,17,13,12,16,20,14,17,18,17,17,16,18,16,16,13,19,19,16,13,16,16,13,16,13,14,14,7,78,59,26,24,26,2,31,98,1,44,32,20,21,18,21,22,23,24,3,49,85,1,44,32],"data":null,"url":"html.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/parser/open-element-stack.js":{"lineLengths":[13,62,34,47,15,264,54,33,29,30,27,24,27,24,27,24,3,36,49,50,47,50,49,48,45,51,45,59,47,47,47,47,50,46,56,47,3,149,98,150,97,63,24,24,36,103,5,49,39,31,24,25,27,27,53,32,5,22,23,62,5,28,21,135,5,29,49,55,5,15,26,24,44,31,43,34,35,29,9,54,5,11,36,57,29,9,24,37,45,5,37,46,37,36,38,9,5,61,65,55,58,24,45,41,9,97,5,36,42,12,72,113,60,5,26,38,40,61,36,13,28,41,64,9,5,36,43,48,5,40,62,48,5,36,62,5,31,60,5,29,105,46,27,32,5,43,50,117,25,13,9,18,5,37,62,38,5,31,59,5,35,64,5,34,63,5,21,43,23,40,27,13,18,42,43,32,45,55,13,9,5,12,40,77,101,5,23,43,5,32,54,63,5,32,79,5,22,25,50,38,71,61,28,13,52,29,13,9,20,5,32,50,38,71,82,28,13,52,29,13,9,20,5,33,50,38,71,61,28,13,144,29,13,9,20,5,31,50,38,71,61,28,13,116,29,13,9,20,5,30,50,38,71,43,25,13,33,28,13,116,29,13,9,20,5,39,50,38,71,43,25,13,114,28,13,80,29,13,9,20,5,31,50,38,71,43,25,13,33,28,13,85,29,13,9,20,5,22,30,66,23,9,5,40,77,23,9,5,54,114,23,9,5,1,44,46],"data":null,"url":"open-element-stack.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/parser/formatting-element-list.js":{"lineLengths":[13,62,59,7,28,14,23,50,52,62,42,29,29,30,39,26,29,5,26,83,63,57,30,45,66,76,55,42,50,22,13,38,69,79,75,60,69,17,13,9,26,5,41,52,19,65,84,50,19,83,89,32,88,53,44,71,95,37,59,58,17,13,9,5,15,20,37,5,33,46,30,36,20,18,11,5,48,64,45,36,20,18,11,5,24,55,30,47,9,5,7,68,6,130,7,25,55,29,50,9,14,36,9,5,12,48,142,72,5,30,107,5,1,54,51],"data":null,"url":"formatting-element-list.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js":{"lineLengths":[13,62,36,47,32,12,26,14,25,6,1,30,23,22,16,34,52,27,10,6,30,16,43,27,10,6,49,16,30,20,18,25,27,29,10,6,29,16,33,17,29,10,6,19,38,44,40,6,54,74,63,40,6,57,49,6,41,39,6,57,98,26,36,44,44,9,14,26,42,21,25,25,33,14,67,9,6,37,29,6,31,29,6,22,30,65,54,35,9,6,34,47,85,66,39,23,13,9,81,6,55,97,74,35,9,14,101,9,6,39,84,48,56,47,13,9,6,21,25,34,6,25,31,6,25,31,6,26,29,6,15,25,31,6,30,36,6,34,30,6,40,32,6,42,32,6,46,36,6,46,36,6,16,22,41,6,25,44,6,30,49,6,25,69,6,27,47,43,6,37,39,6,53,105,6,2,35],"data":null,"url":"default.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/doctype.js":{"lineLengths":[13,62,56,39,7,34,46,91,40,49,49,59,38,38,45,45,37,30,31,30,36,30,28,34,34,34,34,41,41,41,41,33,26,47,60,53,55,60,53,55,42,49,49,58,66,50,85,76,43,52,59,38,35,35,29,36,38,42,47,45,28,32,42,38,2,53,38,39,43,2,40,43,41,11,3,119,58,41,39,43,2,7,40,66,1,5,30,48,34,73,1,36,33,44,46,5,31,71,46,5,29,28,42,51,50,9,120,44,50,9,18,117,44,58,9,5,45,1,42,35],"data":null,"url":"doctype.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js":{"lineLengths":[13,62,221,39,12,20,27,45,2,12,44,53,42,20,20,20,18,15,20,22,15,18,15,24,20,19,23,16,17,15,19,24,19,18,18,23,16,17,17,26,23,19,16,16,16,20,26,21,11,11,18,16,25,23,23,23,19,18,19,18,19,21,18,14,14,17,14,17,23,23,17,45,42,91,91,85,85,85,87,85,79,79,81,76,87,3,30,48,15,18,19,19,20,23,15,14,20,26,18,23,24,24,21,14,14,14,14,14,21,14,14,18,19,15,19,25,18,13,19,20,15,21,21,15,39,44,39,23,25,32,26,24,28,26,24,25,24,24,24,27,24,24,24,24,24,24,26,24,23,25,24,29,26,26,26,24,23,25,26,23,27,26,28,28,25,25,27,24,23,24,25,3,33,36,35,59,145,60,1,32,19,40,50,58,63,18,9,5,1,56,37,50,83,39,51,9,5,1,50,37,50,84,32,61,57,67,9,5,1,50,39,84,34,40,61,5,1,54,20,47,193,1,48,79,48,61,59,94,13,9,5,144,1,55,105,101,1,48,43],"data":null,"url":"foreign-content.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+parse5@7.1.2/node_modules/parse5/dist/cjs/serializer/index.js":{"lineLengths":[13,62,52,47,54,60,7,31,29,29,33,32,27,28,30,30,27,28,30,31,29,29,30,31,30,28,3,39,54,74,65,1,93,3,44,2,11,2,8,36,2,100,2,28,43,2,44,56,2,62,6,2,33,40,3,35,72,36,18,5,43,1,30,3,80,2,11,2,8,36,2,76,2,35,62,2,58,6,2,33,40,3,40,72,37,1,40,51,18,39,70,86,77,60,21,68,21,47,56,9,5,16,1,39,50,47,5,47,48,5,50,51,5,55,56,5,47,14,1,42,52,144,1,53,18,55,20,30,30,9,12,37,40,47,26,17,42,48,41,21,38,26,17,42,49,26,17,26,58,17,13,69,5,16,1,43,36,57,51,99,22,68,75,17,47,1,54,63,1,59,69,1,33],"data":null,"url":"index.js.map"},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+entities@4.4.0/node_modules/entities/lib/escape.js":{"lineLengths":[13,62,157,45,26,19,18,19,17,17,3,57,23,71,36,62,77,29,60,58,45,28,27,38,10,3,75,32,2,45,61,3,25,17,20,14,62,28,37,40,33,52,28,9,14,123,56,90,9,5,37,1,30,3,75,64,2,79,31,2,32,3,27,33,34,18,24,24,44,42,63,13,63,54,46,38,9,48,6,1,3,72,2,56,2,32,3,56,3,69,88,2,32,3,61,19,18,20,4,3,63,88,2,32,3,57,18,17,17,20,4,34],"data":{"version":3,"file":"escape.js","sourceRoot":"","sources":["https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/escape.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+http-proxy-agent@5.0.0/node_modules/http-proxy-agent/dist/index.js":{"lineLengths":[13,72,62,2,52,37,37,1,34,58,63,56,38,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+http-proxy-agent@5.0.0/node_modules/http-proxy-agent/src/index.ts"],"names":[],"mappings":";;;;AAIA,oDAAsC;AAEtC,SAAS,oBAAoB,CAC5B,IAAyD;IAEzD,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED,WAAU,oBAAoB;IAmBhB,mCAAc,GAAG,eAAe,CAAC;IAE9C,oBAAoB,CAAC,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;AAC5D,CAAC,EAtBS,oBAAoB,KAApB,oBAAoB,QAsB7B;AAED,iBAAS,oBAAoB,CAAC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+http-proxy-agent@5.0.0/node_modules/http-proxy-agent/dist/agent.js":{"lineLengths":[13,90,112,64,99,102,118,78,7,2,72,62,2,62,46,46,46,50,61,43,55,28,78,1,3,71,72,2,14,3,49,24,17,40,46,9,14,25,9,20,92,9,64,20,46,64,31,71,71,50,45,50,9,40,53,9,39,78,74,77,42,30,34,9,27,5,7,66,24,6,21,7,25,61,48,57,35,42,13,35,69,13,58,48,13,39,73,59,33,13,70,70,52,68,29,108,13,62,23,30,58,54,13,18,58,54,13,79,79,78,30,26,33,76,35,38,58,32,91,42,65,80,59,17,71,33,91,51,65,44,68,71,17,13,79,79,81,65,57,26,11,5,1,33,33],"data":{"version":3,"file":"agent.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+http-proxy-agent@5.0.0/node_modules/http-proxy-agent/src/agent.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@tootallnate+once@2.0.0/node_modules/@tootallnate/once/dist/index.js":{"lineLengths":[13,62,47,45,28,105,50,53,9,35,22,26,9,31,22,24,9,98,34,37,7,1,23,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@tootallnate+once@2.0.0/node_modules/@tootallnate/once/src/index.ts"],"names":[],"mappings":";;AAOA,SAAwB,IAAI,CAI3B,OAAgB,EAChB,IAAW,EACX,EAAE,MAAM,KAAkB,EAAE;IAE5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtC,SAAS,OAAO;YACf,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC9C,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACtC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,SAAS,OAAO,CAAC,GAAG,IAAW;YAC9B,OAAO,EAAE,CAAC;YACV,OAAO,CAAC,IAA+C,CAAC,CAAC;QAC1D,CAAC;QACD,SAAS,OAAO,CAAC,GAAU;YAC1B,OAAO,EAAE,CAAC;YACV,MAAM,CAAC,GAAG,CAAC,CAAC;QACb,CAAC;QACD,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC3C,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1B,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACJ,CAAC;AA1BD,uBA0BC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+agent-base@6.0.2/node_modules/agent-base/dist/src/index.js":{"lineLengths":[13,72,62,2,35,50,60,44,21,60,1,29,34,34,21,106,1,38,49,1,25,7,40,55,6,33,18,7,47,38,20,29,49,41,13,32,32,13,70,32,59,44,13,75,70,36,32,44,30,34,31,30,9,27,63,48,13,49,9,28,41,9,24,60,45,13,59,9,25,38,9,33,119,9,11,71,55,10,22,11,32,50,59,57,13,36,40,13,36,59,13,40,73,13,41,75,74,76,62,33,13,30,33,38,36,41,46,55,29,40,33,33,59,38,34,27,39,73,81,37,14,37,33,32,107,38,29,14,44,29,27,41,44,37,17,29,14,42,29,27,40,44,37,17,38,72,76,35,98,49,27,17,29,47,54,23,41,27,17,119,29,14,54,64,23,13,44,48,76,82,17,22,61,17,13,65,61,13,66,46,13,17,105,99,13,25,57,13,9,34,73,29,9,19,64,9,5,30,43,56,38,29,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+agent-base@6.0.2/node_modules/agent-base/src/index.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+agent-base@6.0.2/node_modules/agent-base/dist/src/promisify.js":{"lineLengths":[13,62,24,33,49,52,26,32,17,22,33,17,15,11,6,1,28,37],"data":{"version":3,"file":"promisify.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+agent-base@6.0.2/node_modules/agent-base/src/promisify.ts"],"names":[],"mappings":";;AAeA,SAAwB,SAAS,CAAC,EAAkB;IACnD,OAAO,UAAsB,GAAkB,EAAE,IAAoB;QACpE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,EAAE,CAAC,IAAI,CACN,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,CAAC,GAA6B,EAAE,GAAyB,EAAE,EAAE;gBAC5D,IAAI,GAAG,EAAE;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;iBACZ;qBAAM;oBACN,OAAO,CAAC,GAAG,CAAC,CAAC;iBACb;YACF,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;AACH,CAAC;AAjBD,4BAiBC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/dist/index.js":{"lineLengths":[13,72,62,2,52,38,37,1,35,60,64,58,39,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/src/index.ts"],"names":[],"mappings":";;;;AAKA,oDAAuC;AAEvC,SAAS,qBAAqB,CAC7B,IAA2D;IAE3D,OAAO,IAAI,eAAgB,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,WAAU,qBAAqB;IAoBjB,qCAAe,GAAG,eAAgB,CAAC;IAEhD,qBAAqB,CAAC,SAAS,GAAG,eAAgB,CAAC,SAAS,CAAC;AAC9D,CAAC,EAvBS,qBAAqB,KAArB,qBAAqB,QAuB9B;AAED,iBAAS,qBAAqB,CAAC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/dist/agent.js":{"lineLengths":[13,90,112,64,99,102,118,78,7,2,72,62,2,62,46,46,46,52,50,43,82,57,3,75,73,2,79,79,78,38,2,70,59,2,14,3,50,24,17,40,46,9,14,25,9,20,92,9,65,20,46,64,31,71,71,50,45,50,9,40,53,9,46,78,62,47,9,39,78,74,77,42,30,34,9,27,5,7,66,24,6,21,7,25,61,48,62,23,30,58,54,13,18,58,54,13,61,57,61,68,29,103,13,61,54,54,55,35,13,32,41,54,59,13,80,43,72,37,43,42,74,66,64,68,139,39,17,30,13,80,78,77,33,77,70,80,31,14,56,29,77,39,80,39,67,62,80,78,28,33,29,15,30,11,5,1,34,25,20,1,38,73,1,28,78,1,29,19,12,22,34,32,9,5,15,1,33],"data":{"version":3,"file":"agent.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/src/agent.ts"],"names":[],"mappings":"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"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/dist/parse-proxy-response.js":{"lineLengths":[13,72,62,2,62,50,72,37,45,87,88,86,38,30,27,25,36,18,26,16,46,9,28,48,52,52,52,9,31,47,9,26,27,9,31,22,37,24,9,28,28,38,67,62,38,33,70,23,23,13,86,56,62,21,27,24,15,9,36,36,32,15,7,1,37,48],"data":{"version":3,"file":"parse-proxy-response.js","sourceRoot":"","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+https-proxy-agent@5.0.1/node_modules/https-proxy-agent/src/parse-proxy-response.ts"],"names":[],"mappings":";;;;;AAAA,kDAAgC;AAGhC,MAAM,KAAK,GAAG,eAAW,CAAC,wCAAwC,CAAC,CAAC;AAOpE,SAAwB,kBAAkB,CACzC,MAAgB;IAEhB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtC,+EAA+E;QAC/E,gFAAgF;QAChF,8EAA8E;QAC9E,8BAA8B;QAC9B,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,SAAS,IAAI;YACZ,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC;gBAAE,MAAM,CAAC,CAAC,CAAC,CAAC;;gBACZ,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,SAAS,OAAO;YACf,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,SAAS,OAAO,CAAC,GAAW;YAC3B,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QACpC,CAAC;QAED,SAAS,KAAK;YACb,KAAK,CAAC,OAAO,CAAC,CAAC;QAChB,CAAC;QAED,SAAS,OAAO,CAAC,GAAU;YAC1B,OAAO,EAAE,CAAC;YACV,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACzB,MAAM,CAAC,GAAG,CAAC,CAAC;QACb,CAAC;QAED,SAAS,MAAM,CAAC,CAAS;YACxB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,aAAa,IAAI,CAAC,CAAC,MAAM,CAAC;YAE1B,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAElD,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;gBACxB,iBAAiB;gBACjB,KAAK,CAAC,8CAA8C,CAAC,CAAC;gBACtD,IAAI,EAAE,CAAC;gBACP,OAAO;aACP;YAED,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAClC,OAAO,EACP,CAAC,EACD,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CACxB,CAAC;YACF,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,KAAK,CAAC,+BAA+B,EAAE,SAAS,CAAC,CAAC;YAClD,OAAO,CAAC;gBACP,UAAU;gBACV,QAAQ;aACR,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAExB,IAAI,EAAE,CAAC;IACR,CAAC,CAAC,CAAC;AACJ,CAAC;AAvED,qCAuEC"},"url":null},"file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/lib/index.js":{"lineLengths":[13,0,62,0,58,32,18,39,13,43,24,45,30,3,16,1,0,16,33,23,25,24,21,22,23,3,1,22,27,24,22,27,33,23,19,3,1,0,65,9,9,11,9,15,73,1,0,22,43,66,2,52,9,39,23,4,14,16,72,3,3,233,20,19,222,20,63,0,20,28,71,46,4,24,81,46,3,2,0,26,46,48,45,55,50,30,37,37,27,46,27,38,53,57,48,54,30,21,29,30,4,45,37,2,28,7,8,111,0,22,25,8,46,82,116,88,98,89,109,77,74,77,93,77,93,69,64,62,35,8,54,154,189,106,139,72,72,65,127,67,72,21,14,92,56,61,57,56,27,14,14,168,98,28,8,118,68,72,76,107,26,8,75,109,49,27,14,121,96,21,20,109,65,66,84,76,81,108,49,48,73,37,18,9,45,58,72,32,16,54,23,18,48,16,12,68,23,12,76,35,93,30,14,48,78,35,18,58,62,98,68,24,13,52,101,69,59,48,87,41,19,17,135,25,17,155,69,115,84,94,39,7,70,38,21,104,27,13,48,56,52,55,56,130,111,84,91,91,36,71,60,25,18,149,30,18,53,177,181,183,69,69,141,75,167,66,71,175,179,181,68,127,65,84,23,11,43,92,99,89,88,53,28,16,54,76,21,13,14,112,121,111,69,84,106,81,29,11,25,92,85,99,140,47,57,54,49,93,22,18,68,82,76,81,2,0,24,58,25,17,58,32,15,51,104,80,78,38,2,0,149,30,173,144,81,32,9,189,125,29,8,80,8,39,123,100,103,86,97,150,2,0,34,29,40,7,15,13,66,31,8,11,6,67,9,9,29,40,28,163,69,11,8,16,23,25,8,16,15,84,10,20,50,17,13,9,8,12,29,24,8,52,41,24,7,7,4,1,49,32,83,3,36,51,42,50,31,44,25,19,7,15,16,64,76,80,39,17,15,23,18,19,3,32,1,187,0,7,16,11,69,20,20,3,33,60,56,14,1,72,11,49,30,54,5,16,3,0,22,12,9,6,21,9,41,17,5,0,48,18,14,11,6,16,3,0,29,15,9,29,23,20,5,49,46,16,3,0,30,25,50,47,16,3,29,47,3,0,29,42,3,30,42,3,0,22,41,3,30,42,3,0,30,39,27,32,42,56,27,38,33,47,28,16,3,0,31,38,28,3,26,54,40,12,35,5,3,40,31,3,26,30,231,3,73,80,82,54,27,3,94,106,32,58,35,5,32,3,22,42,5,61,20,7,5,60,3,47,46,16,19,21,36,16,3,23,5,61,41,7,5,45,3,26,5,61,44,7,5,21,3,0,29,49,30,22,16,3,62,61,58,3,0,104,36,30,33,89,41,25,26,40,28,5,27,30,3,31,59,5,61,28,7,5,45,24,3,38,66,5,61,28,7,5,45,34,24,3,72,92,15,29,35,27,7,29,5,16,3,71,91,15,25,29,5,16,3,57,103,3,33,54,54,5,47,3,37,54,13,12,13,15,36,82,7,38,12,38,5,3,57,53,45,20,9,29,43,20,9,12,66,5,3,46,66,40,37,38,47,29,99,7,28,25,5,16,3,28,5,43,13,5,38,3,39,54,59,24,34,29,14,36,43,65,45,54,33,9,0,38,9,36,17,23,19,195,45,41,28,11,9,14,5,16,3,50,70,36,95,43,7,0,23,49,32,57,7,84,28,5,16,3,34,42,29,5,48,3,25,43,3,0,26,76,3,24,69,3,36,68,3,38,45,27,3,61,41,27,3,3,0,18,37,24,32,23,41,3,1,15,29,33,34,48,2,0,1,45,1,0,24,24,20,22,20,21,25,33,24,26,29,29,35,25,27,25,26,24,23,32,40,40,52,32,36,32,34,56,5,32,5,3,1,0,29,44,25,43,30,15,1,35,28,15,9,5,1,26,22,23,23,28,28,25,42,80,21,25,83,106,106,91,56,26,1,48,84,21,41,25,85,108,108,93,58,26,1,0,12,30,15,14,5,35,15,14,5,34,15,14,5,29,33,28,15,14,5,32,15,14,5,33,15,14,5,27,31,28,15,14,5,27,27,14,5,26,14,5,27,14,5,34,14,5,24,30,14,5,33,28,14,5,36,32,14,5,31,14,5,35,15,14,5,37,14,5,41,15,14,5,23,26,14,5,45,0,24,15,12,5,29,15,12,5,34,15,12,5,32,15,12,5,35,15,12,5,0,32,11,12,14,5,26,15,11,14,5,27,15,11,14,5,34,14,5,31,14,5,33,42,34,35,33,34,34,44,34,34,42,40,41,41,31,15,13,11,14,5,28,14,14,5,26,13,5,30,31,15,14,26,5,28,15,12,5,44,15,12,5,33,32,14,5,33,39,39,38,14,5,32,14,5,37,40,14,5,27,36,14,5,35,34,15,11,14,5,29,29,33,31,30,15,14,5,32,14,5,34,14,5,34,14,5,38,14,5,35,36,14,5,32,14,5,32,14,5,34,14,5,36,15,11,14,5,32,15,11,14,5,36,15,11,14,5,28,11,14,5,30,10,5,34,10,5,0,32,14,5,40,14,5,38,14,5,38,14,5,36,14,5,34,14,5,34,14,5,36,14,5,32,14,5,36,14,5,34,14,5,40,14,5,38,14,5,38,14,5,42,14,5,40,14,5,42,14,5,40,14,5,48,14,5,46,14,5,38,14,5,32,14,5,40,14,5,38,14,5,42,14,5,46,14,5,38,14,5,44,14,5,40,14,5,44,14,5,42,14,5,36,14,5,40,14,5,46,14,5,46,14,5,36,14,5,40,14,5,29,14,5,0,33,14,5,27,14,5,33,14,5,35,14,5,33,14,5,37,14,5,26,34,35,20,5,43,20,5,38,34,20,4,2,35,37,1,51,21,1,44,37,1,44,37,1,44,33,1,41,33,1,35,36,1,52,38,1,29,36,1,32,36,1,33,36,1,32,22,1,31,30,1,39,38,1,43,38,1,32,28,1,41,28,1,41,22,1,33,36,1,34,27,1,1,44,18,4,105,30,4,45,57,20,12,35,5,4,46,45,4,1,0,4306,2658,85,106,62,0,2067,1055,0,35,20,60,18,33,22,33,3,15,1,0,34,36,30,36,31,23,83,3,57,1,0,33,36,29,30,30,36,31,23,78,3,103,1,0,23,329,109,35,2,48,61,69,0,41,57,1,0,47,76,1,0,45,46,1,0,51,84,1,26,28,1,0,48,67,1,0,353,97,20,18,34,39,1,0,32,30,31,28,35,28,35,28,35,32,84,39,34,34,38,39,36,37,39,45,46,47,41,0,92,62,54,64,64,44,92,58,42,59,63,60,70,52,40,36,36,86,0,90,86,60,60,26,0,13,0,22,25,29,31,23,3,1,0,20,33,25,25,27,38,25,29,3,20,59,3,20,62,3,20,60,3,26,67,3,17,60,3,41,47,71,3,23,52,13,13,29,39,20,7,46,21,7,5,3,28,63,3,29,64,3,22,28,3,16,50,3,10,40,23,3,0,37,123,3,39,36,80,68,46,34,14,32,7,45,45,7,46,61,35,70,28,45,43,7,5,62,41,5,3,35,62,41,5,3,60,61,50,16,28,9,5,3,49,55,43,89,5,44,103,5,194,3,24,11,10,11,45,75,41,52,5,3,18,55,3,26,52,13,13,29,30,21,7,5,3,0,27,52,13,13,29,72,21,7,5,3,1,0,31,24,19,38,3,1,45,22,32,3,39,38,51,68,43,39,13,5,46,3,49,73,51,105,5,17,3,24,60,33,5,3,1,0,18,17,35,45,3,27,43,44,12,55,40,21,7,57,53,91,23,9,7,18,5,3,33,26,101,3,1,0,46,44,37,10,47,3,1,0,45,43,36,10,46,3,1,0,43,41,34,10,44,3,1,0,57,25,26,41,32,3,68,47,10,57,3,1,41,23,60,38,3,0,24,11,18,19,51,41,35,42,43,39,10,5,11,22,13,25,40,39,35,40,40,34,14,39,40,9,14,7,5,3,0,30,11,14,18,76,43,61,7,44,61,7,12,13,29,27,20,59,28,34,31,34,66,18,32,40,65,18,37,36,41,30,29,36,62,18,33,30,33,64,18,40,35,66,18,18,13,47,13,9,14,41,7,5,3,0,31,11,18,19,56,44,5,33,3,0,43,11,18,19,11,12,21,29,47,41,35,5,3,0,45,11,18,19,51,41,35,25,40,39,43,33,37,40,38,38,14,7,5,3,1,0,43,53,0,26,17,12,12,14,14,18,12,19,3,1,55,78,0,45,8,39,56,0,29,17,16,16,16,12,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,12,19,3,1,0,13,17,25,26,28,27,25,21,31,24,40,40,24,36,32,34,33,51,25,34,25,6,27,44,21,23,27,17,20,22,19,17,30,32,26,33,35,29,46,34,26,3,8,15,15,14,15,6,102,29,34,74,3,17,75,3,21,30,35,60,26,26,46,26,7,0,23,5,17,3,1,0,39,34,2,43,57,33,2,42,36,34,34,82,2,75,25,37,33,15,29,23,9,10,12,12,24,72,42,12,5,37,44,42,12,5,20,42,95,48,27,14,20,17,10,14,22,7,8,12,18,15,15,23,44,12,16,22,40,32,51,14,56,16,9,18,37,14,74,7,12,12,5,3,10,8,13,20,14,12,38,4,1,44,28,71,3,46,1,78,37,8,0,22,8,7,14,11,5,37,15,13,23,13,23,13,7,17,10,15,13,91,69,7,13,7,17,10,15,13,83,70,7,13,23,12,23,13,27,13,23,12,41,14,7,12,22,16,14,14,21,12,12,23,25,14,64,7,12,33,33,70,32,42,26,43,40,9,35,43,61,27,29,18,69,11,9,47,7,42,3,1,93,25,8,4,6,7,98,19,25,67,12,27,5,3,10,12,7,4,1,112,20,127,225,22,16,65,39,12,54,45,45,31,33,18,13,10,73,127,33,18,13,10,67,7,0,12,15,5,21,27,28,27,32,22,12,21,5,23,36,16,18,13,10,83,16,28,16,23,14,14,7,5,10,32,3,71,12,14,9,6,3,10,13,7,4,1,80,35,11,19,10,6,11,9,114,10,43,27,57,14,16,21,13,10,7,5,10,6,11,9,87,3,10,9,7,4,1,0,25,22,49,53,1,76,0,13,22,27,29,29,25,64,3,1,0,40,0,31,12,30,21,34,57,54,41,53,15,11,20,8,99,86,6,86,77,66,7,104,57,65,52,11,8,50,53,56,11,7,7,106,73,50,55,52,11,7,7,29,29,23,31,29,3,20,49,28,30,3,0,10,31,30,44,5,47,49,53,21,3,13,27,18,18,12,19,5,3,0,15,36,3,0,31,12,21,18,23,25,21,35,27,31,41,29,33,36,6,3,0,15,27,48,28,21,29,28,21,16,3,20,52,3,28,35,76,3,23,56,3,23,40,64,47,40,62,7,5,14,3,0,21,31,17,88,10,10,38,5,3,16,61,3,0,15,21,38,74,40,28,13,5,63,3,0,32,17,63,33,58,21,52,36,9,5,45,37,72,27,50,5,0,33,0,21,27,46,12,35,65,6,53,19,3,30,33,17,63,64,39,64,51,7,5,0,33,0,31,59,21,26,12,12,10,65,6,53,19,3,0,15,38,24,48,55,19,16,17,15,27,16,16,65,29,11,16,18,18,27,31,48,16,16,62,20,15,60,44,43,73,17,22,15,20,15,56,44,43,73,17,22,15,20,25,11,16,16,33,29,51,39,156,54,42,41,71,15,20,25,13,51,39,138,54,42,41,71,15,20,25,13,18,23,11,7,5,30,33,33,26,12,17,26,27,28,8,54,5,3,0,26,36,49,37,27,27,28,35,5,3,22,27,25,3,0,26,63,13,5,39,46,35,57,36,9,5,74,42,75,147,38,11,7,26,25,28,14,28,7,41,23,50,29,23,46,12,27,5,3,19,59,35,28,13,5,74,26,27,12,23,27,5,3,21,59,22,27,12,27,5,3,27,62,55,32,33,24,62,49,5,62,32,16,3,31,37,18,57,0,37,14,55,16,5,0,44,14,35,5,31,3,28,59,24,61,29,14,49,7,13,5,23,24,29,15,7,61,77,78,40,13,9,28,28,15,7,0,60,77,77,40,13,9,28,28,15,7,5,22,27,13,5,45,3,21,59,0,44,27,5,27,41,23,22,10,27,0,65,31,32,7,5,10,27,5,3,22,59,0,60,23,22,10,27,5,10,27,5,3,28,59,24,27,13,5,22,27,12,27,5,3,18,11,9,19,48,22,50,29,15,7,27,13,5,22,27,13,5,25,3,18,11,9,19,48,22,65,53,36,15,7,30,13,5,22,27,13,5,25,3,27,59,22,82,13,5,37,26,27,13,5,44,3,24,59,60,22,25,29,14,29,7,62,26,27,12,23,27,5,3,26,19,0,14,29,15,0,14,25,29,15,14,25,29,15,14,25,29,15,14,25,29,15,14,100,79,81,42,15,11,0,30,30,16,27,30,9,15,14,25,28,15,15,100,79,82,42,15,11,0,30,30,16,27,30,9,15,15,25,28,15,14,97,31,16,27,31,9,15,14,34,15,14,33,15,14,9,65,44,37,19,11,44,36,19,11,43,36,19,11,9,14,14,14,14,14,14,14,14,14,31,15,0,14,14,30,15,0,14,31,15,14,14,41,15,15,14,38,15,14,31,15,14,14,38,15,14,28,15,14,28,15,14,14,37,15,15,29,15,14,32,15,14,36,15,14,24,15,14,38,30,17,9,5,55,35,44,7,3,24,72,27,32,3,16,41,39,25,9,9,19,20,31,53,57,11,7,44,26,53,57,11,7,20,24,14,24,25,42,26,43,16,9,28,7,5,49,10,18,25,62,31,42,43,0,38,25,60,35,58,27,15,11,32,35,58,27,15,11,9,34,51,25,13,9,53,49,23,11,14,14,7,12,19,5,25,27,23,17,7,3,0,67,11,8,9,162,25,13,3,26,46,25,24,36,22,39,56,13,9,5,55,23,23,22,30,47,20,9,5,65,49,36,9,5,19,88,33,13,5,31,3,0,29,33,46,24,25,26,28,24,54,40,36,9,5,94,25,62,62,20,9,31,51,32,56,71,13,9,7,56,5,53,34,23,23,21,51,5,52,53,39,25,7,38,53,22,11,7,21,25,51,5,23,38,49,22,11,7,23,22,5,23,61,42,43,22,11,7,23,23,5,65,49,36,9,5,0,78,19,33,13,5,20,33,13,5,61,31,3,0,33,11,11,9,142,25,16,3,21,11,10,10,14,15,94,92,29,37,33,31,3,0,30,25,31,5,21,29,3,0,23,47,11,10,22,10,14,15,70,94,29,37,33,26,157,5,45,73,12,23,74,5,3,40,6,6,27,67,32,10,9,12,61,5,3,0,24,35,18,33,36,34,52,5,42,53,33,47,29,38,61,50,96,62,51,40,13,42,19,9,25,45,27,38,59,26,15,11,44,9,36,14,14,7,5,63,3,0,23,43,38,29,51,12,34,5,3,25,11,10,19,57,53,32,42,9,5,3,0,40,11,10,26,74,59,32,10,13,7,49,57,17,3,0,49,11,10,26,75,59,26,37,50,30,36,41,14,17,11,7,39,5,53,3,0,28,0,25,46,51,49,7,3,33,37,18,5,44,50,33,7,3,32,58,52,32,34,9,5,3,23,41,25,50,9,6,3,1,0,18,17,34,35,43,3,1,25,23,25,20,43,25,3,13,45,3,11,38,3,10,43,0,35,0,80,20,55,55,9,14,65,18,30,11,7,5,3,46,11,19,20,27,23,43,52,60,21,63,66,63,66,0,67,51,30,45,7,5,20,58,16,28,9,5,27,39,3,29,19,36,52,5,21,54,12,63,16,28,9,5,3,1,0,22,38,43,28,23,35,23,21,3,36,111,3,37,47,3,1,53,21,16,39,3,45,6,6,27,63,3,32,41,3,27,45,3,1,30,23,25,41,25,3,16,27,3,10,21,3,0,49,12,6,20,24,6,11,11,13,29,25,54,51,59,14,15,7,25,5,44,3,0,43,12,6,11,11,13,42,20,24,6,50,39,56,50,12,13,5,3,0,35,6,6,11,11,13,29,25,52,64,69,12,11,7,25,5,3,23,11,11,13,49,63,57,39,15,9,31,27,54,47,27,7,7,3,1,41,52,1,30,68,1,31,73,1,31,31,1,0,5,17,23,23,24,20,0,34,17,21,3,16,28,3,10,22,3,18,47,3,18,51,3,18,51,3,19,52,3,15,48,3,1,46,71,1,0,36,0,49,22,48,21,25,12,41,19,13,9,5,3,0,23,64,3,41,44,56,52,42,36,5,17,3,31,39,49,3,0,24,35,18,18,5,17,3,0,41,37,33,40,33,11,7,41,5,3,0,24,76,3,27,94,3,27,57,54,3,22,53,3,0,30,66,41,34,7,3,0,21,49,3,0,47,25,16,6,9,40,32,26,9,62,37,30,57,16,15,58,24,25,19,10,7,14,13,20,22,23,23,8,21,35,28,41,16,21,16,23,25,19,10,7,34,16,33,22,24,24,19,10,7,18,5,3,56,43,11,25,21,20,27,28,109,20,23,5,37,54,30,9,5,33,41,26,9,5,32,49,25,9,5,40,45,5,3,0,27,55,3,0,23,39,3,0,26,24,3,0,34,127,3,25,94,3,26,42,3,24,40,3,69,40,27,60,41,0,38,29,32,48,50,40,54,42,50,52,60,18,36,56,0,34,28,36,38,48,6,3,24,27,24,32,5,36,37,3,50,11,19,28,33,63,5,3,1,0,24,17,35,31,30,38,3,1,0,12,33,19,21,17,39,71,79,3,1,37,1,39,68,35,60,26,95,33,7,5,19,4,1,33,31,1,32,9,9,10,8,8,10,10,8,11,46,21,23,19,19,23,23,21,31,44,3,16,1,35,9,9,10,8,8,10,9,11,31,34,3,46,21,23,19,19,23,31,26,10,25,3,28,16,1,36,15,65,3,20,42,3,0,25,44,3,0,26,67,3,0,36,21,28,26,58,62,16,3,38,32,30,60,3,61,28,26,58,3,0,50,58,3,1,0,178,0,41,110,199,24,16,58,81,102,81,37,15,12,147,29,15,12,132,34,12,194,29,20,12,144,44,12,130,45,13,15,16,140,44,13,14,101,45,13,14,145,27,13,15,14,168,36,13,14,106,47,12,129,72,106,208,100,101,67,129,133,90,79,36,93,6,40,5,72,60,89,132,72,85,75,141,92,108,28,16,52,89,94,91,83,105,167,34,26,14,103,107,55,3,0,38,248,1,34,68,1,37,57,1,27,30,28,22,31,2,0,32,19,19,41,59,3,24,1,51,0,68,24,19,32,3,21,28,3,22,77,3,22,51,3,26,53,42,31,7,5,40,3,23,40,60,55,33,43,35,14,50,7,5,37,3,33,40,29,27,38,34,16,3,24,34,42,16,31,56,65,21,9,5,23,43,22,56,12,56,5,3,42,40,29,20,20,25,25,36,44,12,34,36,27,46,7,5,29,3,31,16,43,49,3,34,16,48,38,43,25,73,12,37,5,20,51,33,29,30,20,88,87,73,30,21,82,52,3,40,25,46,32,49,32,49,41,27,56,14,27,54,42,13,9,49,7,40,50,40,51,40,50,32,72,12,30,5,3,34,16,60,70,21,52,3,32,34,26,38,12,39,5,50,36,19,28,38,27,20,57,70,42,13,9,36,14,83,57,7,26,5,22,19,48,20,32,33,40,34,61,27,13,9,20,63,30,64,27,13,9,28,61,27,13,9,26,31,7,7,35,50,3,57,20,23,45,67,14,48,25,7,26,63,12,114,39,67,34,39,46,11,7,27,23,23,31,67,29,65,34,22,31,31,31,44,53,42,31,33,9,42,20,7,5,28,3,39,16,31,57,21,57,3,35,16,51,39,20,3,36,16,58,40,20,3,35,16,37,53,3,0,48,65,100,25,69,12,33,5,22,25,21,23,10,60,41,5,33,18,10,59,29,5,33,18,10,63,29,5,42,27,24,25,26,25,7,3,31,34,54,25,71,12,33,5,53,3,28,37,57,3,28,23,59,31,9,5,3,50,41,97,19,24,7,3,55,79,41,3,0,28,62,74,25,69,12,33,5,51,21,46,3,38,31,61,74,25,69,12,33,5,0,26,25,57,5,25,19,56,5,21,47,3,0,50,45,34,46,60,27,29,38,25,19,42,12,27,56,26,11,7,5,50,3,39,40,34,21,29,0,44,18,12,24,5,32,8,73,38,34,31,7,28,24,7,30,20,34,61,3,41,34,40,21,29,20,64,42,29,45,28,24,7,5,58,20,34,63,3,50,34,40,21,29,20,29,68,28,24,7,5,20,34,63,3,28,34,31,22,23,10,60,29,5,42,25,24,25,24,25,7,60,3,32,99,3,56,27,0,39,50,49,12,21,38,5,19,49,29,54,3,51,27,48,19,19,43,25,28,87,12,26,25,29,7,51,5,59,3,38,21,21,31,21,25,69,5,20,25,56,28,28,24,7,5,48,63,28,24,7,5,23,57,5,20,54,59,3,51,39,27,62,59,3,23,16,15,16,15,16,6,40,29,39,34,30,28,33,17,14,24,38,21,19,19,12,21,19,20,5,28,35,27,31,33,36,49,43,61,22,46,30,9,7,50,43,0,61,22,26,9,7,48,24,36,41,9,26,25,48,11,93,16,93,9,52,36,41,9,23,46,9,92,14,26,62,45,59,36,24,11,9,169,37,25,55,16,51,9,7,37,64,66,29,11,7,5,26,0,22,34,5,67,34,15,3,105,23,96,27,27,57,42,13,35,53,42,13,9,23,50,24,13,9,20,7,25,53,40,11,7,34,39,7,21,47,22,11,7,43,63,12,51,29,41,23,27,45,27,36,41,9,23,46,9,89,47,49,9,81,63,31,13,9,14,47,28,27,26,9,53,33,7,31,57,5,3,0,41,55,80,30,121,31,9,5,32,91,20,9,5,57,49,20,9,5,3,29,77,24,5,3,50,18,80,62,26,47,33,58,63,5,16,3,38,44,31,66,25,71,5,58,3,25,34,20,48,57,3,24,34,20,19,60,44,31,22,5,19,56,3,37,20,25,30,34,32,42,43,29,53,18,11,7,42,25,24,21,60,20,13,9,7,55,12,44,5,21,29,41,54,3,44,50,21,26,31,54,3,44,20,21,25,52,24,28,24,7,5,48,58,28,24,7,5,23,52,5,12,13,11,11,6,3,49,22,17,58,18,21,62,19,60,19,60,20,61,20,61,20,61,14,41,55,5,3,0,26,41,34,12,13,30,64,30,13,41,29,28,28,28,28,11,13,41,29,27,28,28,29,11,13,46,41,62,20,14,71,24,49,33,29,30,24,24,47,63,14,20,0,49,69,48,57,18,33,11,9,28,48,38,64,0,117,28,24,18,25,11,9,19,98,16,51,9,33,29,30,24,24,47,35,63,15,82,14,14,36,20,69,14,39,22,32,99,11,32,99,11,69,35,13,9,32,15,82,15,82,14,20,59,14,20,66,14,20,59,14,20,61,14,42,14,46,56,22,53,56,39,49,11,88,9,5,28,3,26,41,43,42,77,46,36,72,21,39,32,20,60,14,31,46,23,40,35,33,45,16,33,37,9,7,5,16,3,25,34,23,55,61,12,41,5,3,40,45,57,53,69,23,23,45,33,61,5,17,3,31,34,17,59,24,26,65,5,96,3,24,34,17,50,24,26,56,5,89,3,19,40,29,43,34,16,3,42,62,43,42,55,12,34,5,3,29,34,58,51,3,62,105,25,60,35,5,17,3,29,57,72,27,3,23,24,25,34,37,31,14,32,7,18,51,5,20,3,0,66,30,110,5,58,3,60,25,40,31,68,101,5,66,3,0,29,54,41,55,38,20,45,7,67,36,18,49,5,49,72,29,5,16,3,0,52,37,36,121,45,9,54,40,47,42,47,44,55,9,7,5,66,3,0,34,11,10,19,94,37,5,48,3,30,11,10,19,94,36,5,44,3,34,60,36,18,49,5,48,3,57,37,44,46,26,22,22,22,61,20,7,5,20,37,51,44,9,17,12,45,68,39,47,31,27,41,50,43,9,10,21,16,50,68,7,39,58,28,11,7,41,27,39,41,10,21,16,50,7,5,51,45,20,21,33,116,58,3,35,64,54,35,47,12,17,12,6,3,0,50,25,22,32,31,52,54,43,16,28,9,30,57,36,35,7,5,26,63,26,5,97,3,31,20,26,100,51,41,22,3,49,15,74,66,23,49,12,23,5,18,3,34,48,23,27,34,5,25,54,37,67,65,5,16,3,33,250,13,5,40,3,33,53,89,51,5,16,3,32,33,31,47,18,26,59,36,20,14,56,7,40,31,47,18,62,40,31,47,18,54,67,32,47,18,60,12,48,5,3,23,47,65,31,18,18,18,5,17,3,44,11,14,19,72,53,32,5,24,3,47,54,25,69,5,3,46,11,14,19,33,66,15,7,28,5,53,25,126,52,22,11,32,61,26,11,7,5,3,20,59,3,18,35,33,0,55,44,37,32,9,5,36,3,0,26,59,39,33,67,53,50,24,36,7,34,88,26,33,12,42,5,3,33,45,59,12,49,5,3,37,100,54,5,36,3,0,55,47,31,73,53,7,5,62,3,0,51,47,22,31,174,50,33,11,7,5,20,3,69,89,0,61,43,5,16,3,47,94,3,0,28,25,59,5,42,3,35,25,59,5,49,3,0,19,51,3,0,21,53,3,34,67,3,0,94,26,49,5,27,25,71,5,101,41,35,61,61,20,11,7,15,58,26,41,61,61,20,11,7,5,3,67,26,49,5,27,25,71,5,74,3,0,25,32,44,76,5,33,18,47,10,38,59,29,75,16,37,9,67,29,5,3,35,42,61,28,30,61,58,19,11,43,58,19,11,7,5,3,41,45,3,0,103,24,47,5,25,23,0,40,64,45,5,125,0,25,63,5,18,3,39,23,40,50,19,11,7,36,58,19,11,7,28,5,25,60,41,58,17,9,5,52,49,17,9,5,33,17,3,37,57,115,52,31,9,5,16,3,34,35,50,5,49,3,31,38,53,60,40,9,5,3,52,120,70,3,0,42,30,20,25,22,40,20,5,15,34,13,12,13,0,43,39,7,68,20,31,7,5,56,3,0,71,18,16,42,33,43,39,35,48,37,7,5,26,69,50,87,38,49,52,14,40,36,49,7,12,86,56,49,14,31,58,26,40,13,9,40,36,7,35,49,14,25,62,7,5,63,54,66,21,9,5,54,84,5,69,84,5,68,3,22,30,14,42,14,40,5,3,0,45,27,61,69,5,52,3,0,26,33,25,62,37,5,3,0,49,25,66,43,55,60,5,63,3,0,27,59,3,0,57,13,21,12,71,33,100,0,38,0,13,15,21,57,79,22,7,5,63,23,42,25,44,34,66,93,85,66,24,11,0,116,0,73,61,45,62,31,16,33,23,90,45,33,84,32,15,11,28,9,0,37,7,0,48,35,24,7,28,37,31,7,65,42,0,70,26,9,5,71,3,0,20,25,42,68,45,42,33,70,62,57,47,24,9,37,0,54,0,107,5,34,3,28,60,3,44,74,27,12,53,5,3,81,93,13,5,0,50,54,53,28,11,7,5,88,3,50,121,3,44,117,18,46,25,69,53,87,39,111,0,60,96,59,23,37,26,7,24,38,27,7,40,5,58,3,59,55,48,20,35,20,7,18,46,25,70,22,68,27,51,71,46,25,42,81,24,71,49,32,9,83,9,24,56,27,7,5,73,3,24,31,21,52,92,5,31,3,47,44,35,39,61,3,31,59,66,40,26,23,13,5,38,3,28,59,39,26,13,5,35,3,32,56,36,54,36,9,5,20,3,22,67,38,56,33,11,7,38,49,24,38,41,7,13,5,76,3,21,11,9,19,38,28,62,34,5,71,75,35,43,5,0,117,44,5,0,35,39,5,0,17,3,30,57,21,52,36,9,5,3,0,49,13,14,6,60,14,17,14,7,3,59,262,13,21,3,48,13,14,6,59,14,15,16,7,3,60,12,6,70,15,14,7,3,24,41,60,30,15,9,69,28,20,29,37,28,14,11,18,28,25,12,9,15,9,68,28,20,29,37,28,14,11,18,28,25,12,9,14,14,9,67,28,20,30,37,28,14,11,18,28,25,12,9,14,16,26,23,10,5,3,23,36,42,61,19,9,6,12,9,10,6,3,65,11,18,16,32,13,5,40,63,5,3,19,13,16,6,32,21,25,24,24,26,6,34,28,25,33,14,7,42,13,11,12,35,33,30,17,7,38,54,17,21,72,18,11,7,38,56,17,21,18,11,7,32,23,17,21,18,8,25,26,23,11,81,41,90,18,11,22,11,80,41,88,18,11,22,11,80,41,88,18,11,23,11,80,11,20,11,35,29,81,22,28,80,22,22,98,13,11,7,27,24,7,5,12,14,23,6,3,63,12,6,42,30,47,32,69,48,73,18,11,7,30,12,46,73,18,11,7,32,5,3,29,12,6,46,46,75,32,16,9,5,11,11,19,16,96,54,32,17,30,9,5,17,3,26,29,33,57,14,7,19,11,14,23,30,15,18,7,47,27,21,33,46,23,56,20,33,45,23,55,20,33,100,18,11,23,55,20,48,23,55,14,9,31,30,27,59,12,36,57,55,55,63,67,27,45,104,22,15,27,59,72,60,79,25,42,17,13,50,27,60,72,60,78,25,42,17,13,49,27,59,18,65,26,22,15,27,11,9,5,3,34,38,17,56,52,3,0,25,39,45,56,50,5,17,3,39,71,3,3,0,18,18,17,11,17,10,10,17,18,17,18,19,16,19,17,16,17,17,18,16,16,16,17,16,19,17,17,18,18,17,19,18,17,17,18,19,19,19,19,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,18,19,19,19,18,17,19,18,18,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,19,19,19,19,18,17,19,18,17,18,18,19,19,17,17,17,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,18,16,20,16,16,16,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,19,18,16,20,16,16,16,18,21,18,16,17,17,19,17,16,16,16,18,18,18,18,18,18,18,18,19,19,17,19,19,18,18,19,19,18,18,17,18,19,17,18,20,17,17,17,17,17,18,17,17,17,17,17,19,17,18,18,18,17,18,15,17,16,18,19,18,17,18,16,16,15,16,16,16,19,16,17,18,15,18,15,15,16,16,17,17,17,18,19,17,17,18,18,19,19,17,17,16,19,18,19,17,2,0,39,83,30,18,74,78,139,21,15,14,103,88,55,130,3,0,29,103,1,0,38,40,23,3,44,58,3,46,91,3,0,62,1,66,0,18,17,36,14,42,60,33,11,7,55,19,16,17,52,61,31,43,13,46,11,62,44,16,62,38,38,16,16,17,0,16,30,64,45,40,18,29,11,7,5,3,33,53,12,21,68,23,42,12,36,5,25,42,15,3,24,17,38,14,42,53,33,11,7,55,30,22,60,36,36,33,60,42,36,14,25,7,5,58,38,3,19,38,53,23,21,56,19,25,7,70,77,25,47,7,12,20,23,115,25,7,17,64,38,25,21,24,9,7,5,0,30,15,3,0,17,11,33,8,51,48,74,3,0,24,34,26,35,49,50,12,24,5,16,50,3,0,28,41,43,35,44,26,42,54,3,0,25,41,45,44,18,5,26,49,28,51,61,5,16,3,0,28,13,30,13,32,37,20,68,60,50,20,13,9,20,15,15,36,14,57,33,11,5,3,0,29,60,78,3,0,29,16,45,34,41,19,51,3,0,54,24,55,12,48,35,5,37,41,19,59,3,0,23,34,24,35,18,22,53,36,43,21,57,5,46,69,49,3,0,38,44,24,57,5,43,54,3,41,26,49,48,5,33,36,21,54,3,0,38,44,24,57,5,43,21,54,3,0,31,44,24,67,30,38,26,34,19,43,24,31,71,29,13,60,18,19,48,18,17,13,44,43,26,35,62,22,84,15,20,13,18,36,9,7,97,57,28,11,77,56,29,66,11,78,100,58,31,68,13,9,7,5,37,44,44,12,43,43,5,29,25,64,31,9,5,115,3,0,21,41,16,44,3,26,11,13,19,45,3,0,38,26,60,33,36,80,29,36,12,54,5,3,15,41,53,3,26,38,35,33,5,63,36,34,7,24,25,37,7,69,40,7,5,107,23,35,5,40,3,27,11,14,10,19,42,42,44,30,33,30,46,76,22,85,14,38,45,7,12,71,5,3,3,0,37,24,19,27,27,32,29,40,3,1,0,51,24,19,27,3,22,38,0,38,3,16,35,40,5,23,3,10,31,35,30,5,17,3,32,41,47,18,5,34,41,56,7,5,17,3,39,45,39,52,18,30,11,7,64,13,5,38,50,43,41,13,5,46,39,45,70,45,7,28,5,64,75,64,3,49,32,45,67,52,36,7,18,5,68,36,49,14,21,7,5,64,18,5,63,3,24,11,10,11,37,39,40,39,78,5,31,3,1,0,89,21,18,46,3,11,1,20,11,35,3,1,45,37,14,94,36,16,95,99,78,82,77,79,180,94,21,8,51,87,96,33,4,12,47,23,12,45,29,9,43,60,62,100,73,94,27,13,85,85,36,12,82,83,88,81,93,33,12,65,36,12,68,45,12,106,27,20,92,214,85,86,95,98,127,86,134,102,85,36,12,82,114,139,125,95,84,91,45,21,123,81,145,125,142,142,103,101,69,79,87,104,39,8,104,3,0,37,18,15,28,19,32,18,31,17,30,18,31,18,31,18,31,18,31,21,34,19,32,12,23,3,1,39,85,1,44,49,1,80,21,34,3,20,46,3,30,164,3,34,16,43,3,0,68,72,23,5,38,52,76,25,7,74,24,7,5,21,3,0,20,13,21,24,34,56,6,60,51,52,18,43,11,7,6,57,87,52,18,33,11,7,6,14,13,16,21,156,27,41,37,63,25,20,13,16,65,63,65,44,9,53,33,50,25,20,13,9,34,54,14,61,50,25,20,13,16,65,65,67,67,66,65,9,34,7,82,35,23,18,11,7,5,3,28,19,25,25,29,35,29,31,29,39,30,5,35,3,35,22,44,34,5,18,3,65,99,3,0,86,22,30,14,42,14,7,28,37,28,25,7,27,25,51,17,7,42,14,7,26,24,7,23,5,30,51,5,18,3,90,26,20,23,14,24,7,5,86,18,21,12,22,5,18,3,23,34,20,20,27,58,31,9,5,0,42,20,23,48,5,25,56,5,49,3,48,58,26,48,25,60,56,5,18,3,26,34,45,58,56,5,52,3,33,16,43,29,60,25,52,3,25,34,16,47,3,22,34,20,25,47,12,47,5,58,56,5,48,3,31,27,21,38,109,60,7,3,0,30,27,21,27,41,69,7,3,79,34,25,48,50,47,52,3,44,25,56,5,3,41,34,44,18,12,24,5,33,15,6,72,92,35,48,16,9,5,43,70,5,63,3,0,43,51,0,35,43,63,20,65,30,88,41,88,5,3,36,58,147,64,22,28,11,7,21,7,3,32,52,22,5,3,38,35,38,39,3,37,16,45,18,28,5,17,3,34,96,23,5,19,38,53,30,0,19,27,49,41,38,53,3,52,43,25,43,21,57,18,11,7,29,42,62,38,11,7,39,40,37,45,34,43,45,40,13,55,68,42,15,11,9,41,45,45,40,13,16,54,49,68,42,15,11,80,72,42,15,11,54,68,42,15,11,9,36,63,37,13,9,14,31,7,58,12,31,45,51,47,40,62,5,3,23,34,43,77,5,25,34,18,45,84,14,52,66,7,5,27,21,37,106,7,52,14,17,5,34,150,32,36,5,72,3,24,34,51,50,3,30,19,87,19,19,3,27,16,23,36,5,33,18,5,25,19,5,16,33,19,5,16,26,3,32,34,48,53,52,3,23,34,19,25,39,18,33,41,27,5,19,59,71,19,25,39,18,22,30,27,5,48,21,19,49,3,22,34,125,0,36,31,46,27,13,12,22,146,57,25,11,7,136,0,27,34,49,37,7,59,100,42,63,25,11,7,7,48,3,29,0,11,14,19,30,34,34,33,18,53,38,107,42,14,54,18,11,33,7,51,64,26,58,45,65,5,15,50,37,53,5,16,3,30,34,20,45,20,56,3,52,34,39,33,32,18,5,0,80,39,3,28,34,27,32,17,17,17,16,16,39,16,34,7,9,50,3,32,34,46,50,3,31,53,45,3,40,51,66,56,12,25,5,3,25,30,15,15,15,14,14,45,14,39,40,45,65,36,11,48,56,9,14,14,57,14,39,14,40,13,126,13,39,14,47,14,14,49,14,9,17,16,25,70,131,76,44,26,53,13,47,11,9,5,28,3,30,42,58,26,48,32,23,52,14,48,31,44,23,60,7,5,16,3,25,34,38,16,29,61,34,44,12,5,51,3,42,39,25,25,15,14,49,18,11,5,3,22,34,31,43,57,91,75,48,3,35,23,92,76,26,7,5,3,33,93,185,3,72,34,50,21,8,41,33,52,22,5,23,39,3,37,118,3,30,115,3,29,25,18,5,100,3,26,63,18,18,5,24,13,14,21,47,11,38,52,25,21,7,5,24,18,13,14,21,47,11,44,52,26,21,7,5,17,3,42,16,43,18,5,38,81,20,7,27,20,29,22,9,7,5,17,3,53,32,33,31,36,85,38,74,54,49,30,37,71,16,67,43,9,45,54,7,121,35,23,54,9,0,52,31,35,68,54,7,0,53,49,33,29,66,52,7,3,45,86,3,30,69,3,20,39,3,32,38,66,18,16,5,3,33,34,19,5,47,16,65,19,5,22,53,39,31,9,5,16,3,64,25,36,44,7,50,3,0,17,30,50,104,18,5,44,26,104,20,84,20,85,54,3,36,66,3,31,41,69,5,25,72,55,78,5,43,3,26,73,50,31,9,5,34,47,18,79,7,20,45,52,3,32,49,84,36,49,27,58,7,68,7,32,52,29,13,9,5,25,3,54,50,31,48,45,39,55,12,21,49,31,9,5,95,23,59,5,34,72,57,59,3,37,37,48,47,97,22,67,38,20,59,7,32,7,21,59,3,21,42,41,9,18,15,38,5,3,0,16,40,29,9,18,15,36,5,3,43,94,56,9,18,15,90,5,3,40,94,57,9,18,15,90,5,3,29,71,3,32,60,3,25,53,3,25,32,11,32,7,3,23,34,104,23,57,5,49,3,49,44,48,31,37,82,19,95,19,54,3,24,34,34,19,74,22,50,3,61,37,18,55,5,23,37,60,24,12,40,34,44,28,24,5,56,3,49,33,25,39,33,59,12,24,5,24,40,34,44,28,24,12,23,5,56,3,50,38,37,56,20,58,93,53,27,9,5,43,21,62,3,33,69,3,28,118,3,36,34,31,20,27,30,5,44,20,62,3,0,18,37,20,23,15,3,25,41,20,57,52,23,3,17,37,23,51,20,12,25,23,5,3,27,34,13,5,36,13,32,21,19,5,0,42,29,28,64,7,29,28,50,7,30,50,23,11,7,30,66,7,49,69,30,78,9,0,24,50,22,23,11,7,30,63,23,11,34,7,41,75,7,7,3,0,33,83,3,54,24,21,9,59,28,39,31,11,16,9,20,28,44,38,27,28,24,47,28,32,61,9,14,14,75,5,3,0,53,20,22,105,67,9,14,20,47,32,70,58,66,11,9,14,23,85,64,9,14,18,85,56,9,14,5,3,31,15,53,18,18,5,36,3,49,26,23,5,72,45,47,46,57,38,71,22,18,7,66,15,23,5,55,3,0,38,34,23,5,39,3,26,34,37,30,22,97,8,35,47,16,9,5,20,65,3,26,54,3,0,30,50,44,3,55,41,22,25,25,39,26,29,17,84,9,45,35,35,80,58,22,11,7,5,42,44,61,48,44,30,35,7,58,43,43,74,63,16,11,7,25,56,5,28,35,5,15,3,27,123,3,60,25,70,5,168,68,49,5,78,61,16,9,25,78,7,5,66,3,37,32,53,12,46,5,3,37,27,75,55,33,11,7,7,3,28,15,46,20,3,69,89,42,53,5,16,3,50,58,44,18,59,42,71,5,31,60,20,26,20,7,56,18,5,0,43,31,52,58,82,29,32,11,9,70,35,48,58,17,9,47,84,48,24,9,39,50,29,72,0,58,46,42,43,11,76,9,42,12,27,27,98,17,9,48,31,44,66,9,33,50,7,19,131,82,35,13,9,22,7,5,64,3,24,22,31,11,12,13,130,50,38,5,3,44,20,150,50,29,49,20,29,28,50,38,30,15,11,45,9,34,9,86,26,30,35,5,58,3,63,39,72,5,3,31,38,53,58,40,9,5,3,0,28,21,30,80,35,35,26,26,26,33,20,33,7,68,57,7,5,47,0,43,39,65,67,22,9,5,22,3,33,25,18,70,33,20,14,34,7,61,30,26,50,23,59,40,24,33,39,23,67,12,66,20,33,14,34,7,49,5,3,21,66,3,34,33,35,18,26,46,5,0,26,72,32,5,48,3,66,11,22,19,105,46,16,9,10,36,26,0,52,68,18,11,250,98,18,11,7,5,23,3,44,63,36,22,48,19,9,5,33,59,5,33,72,32,5,58,3,25,68,3,41,39,41,49,7,32,7,3,29,70,3,46,114,27,23,34,41,42,69,7,52,43,20,20,57,62,40,13,9,55,14,85,7,6,25,64,12,41,5,3,68,54,14,31,28,56,20,11,7,33,61,21,40,11,7,27,55,20,11,7,28,56,20,11,7,13,5,57,62,18,9,5,26,33,52,20,11,7,5,0,75,3,46,34,47,50,51,24,9,5,49,50,24,9,5,3,0,52,45,72,74,3,0,34,49,48,3,0,57,64,73,5,79,23,25,76,7,18,5,52,23,3,0,34,48,23,27,34,5,25,54,37,65,67,5,16,3,32,65,78,5,0,41,46,88,68,31,9,5,60,113,34,118,31,5,20,53,33,5,23,3,45,16,65,13,5,99,96,61,3,38,25,25,29,32,29,7,5,49,41,3,28,44,100,60,31,9,5,42,13,11,15,59,32,122,9,5,42,3,35,24,54,16,9,5,0,29,59,17,36,9,5,44,49,3,36,44,24,53,16,9,5,50,3,94,59,42,57,26,9,5,0,11,22,10,15,56,44,19,12,9,5,63,101,3,67,59,63,74,3,48,48,69,55,3,25,32,64,73,5,34,65,5,3,103,59,61,117,3,45,59,61,52,3,0,26,33,89,27,5,49,15,36,37,5,3,0,49,25,53,5,63,3,57,69,0,14,12,17,71,33,100,0,38,0,13,15,21,57,79,22,7,5,67,73,5,0,67,23,42,39,52,79,119,16,7,0,104,62,7,43,18,14,0,41,76,24,5,15,37,0,105,48,5,46,33,22,5,21,35,76,24,5,59,38,27,5,63,40,83,137,3,38,20,171,51,16,9,5,3,0,50,51,41,12,66,5,3,20,25,0,45,73,66,26,9,33,27,56,38,7,5,34,3,0,39,23,94,48,19,11,7,28,5,49,42,33,17,3,33,24,34,61,33,20,14,51,5,3,37,24,37,62,14,28,35,33,29,20,105,20,13,16,62,20,13,9,50,14,34,66,58,9,14,40,5,3,52,35,28,35,33,29,37,50,14,14,40,5,3,45,24,28,35,29,33,59,14,14,56,5,3,0,57,21,33,39,40,100,107,100,76,3,22,30,14,42,14,40,5,3,38,43,68,27,62,44,20,7,32,5,52,3,30,94,18,19,12,46,5,3,0,19,51,3,21,71,3,37,57,115,54,31,9,5,16,3,0,26,28,24,36,7,24,36,7,5,40,3,0,18,11,10,19,22,26,26,29,26,26,5,3,15,11,10,19,22,26,27,16,5,16,3,55,47,31,75,53,7,5,62,3,29,57,72,27,3,28,25,65,5,42,3,27,59,3,29,69,3,41,43,57,47,61,5,55,3,45,70,61,33,71,55,3,27,48,49,15,34,35,5,17,3,26,60,39,9,18,15,56,5,3,45,58,49,9,61,15,54,5,3,48,25,27,86,40,0,42,29,71,18,11,54,7,12,32,5,3,96,118,26,48,42,20,15,13,19,62,21,124,11,7,5,18,3,30,44,25,3,33,55,3,11,45,41,5,25,3,19,45,41,5,33,3,73,39,75,54,5,30,87,3,88,16,47,83,59,5,35,169,3,80,56,57,37,18,33,33,35,0,32,45,34,48,58,34,29,87,36,16,31,36,9,63,34,85,14,32,27,7,61,30,21,46,37,80,9,14,48,7,5,55,114,15,9,5,33,35,59,56,54,92,5,30,62,5,19,110,5,3,3,44,59,9,13,12,17,130,17,3,62,1,56,52,59,40,62,1,0,56,51,53,3,0,84,34,26,36,18,27,0,46,27,23,56,5,3,41,76,37,0,68,3,0,26,74,35,5,40,3,0,38,91,3,28,81,3,63,29,72,5,3,0,22,72,3,47,87,3,29,84,36,12,38,5,3,0,38,51,18,5,0,39,33,18,5,17,3,38,64,45,3,0,40,80,56,5,25,24,62,18,67,55,5,21,26,53,3,71,128,3,30,83,3,45,70,16,40,60,22,63,30,46,23,69,43,14,65,33,11,7,12,55,5,32,105,39,3,33,60,65,52,27,25,76,61,5,0,43,39,37,77,47,3,30,25,41,52,93,22,9,7,5,44,3,42,56,18,5,56,3,21,11,16,13,50,42,52,5,28,33,3,21,60,53,25,52,73,23,56,5,0,56,34,79,23,69,0,64,5,30,43,21,54,3,23,0,79,3,0,19,60,53,36,9,5,3,3,0,76,22,25,54,36,18,47,48,61,50,29,28,9,7,43,5,3,0,38,79,3,3,0,45,117,52,59,28,32,58,12,44,40,21,7,39,58,23,9,7,18,5,5,1,49,41,32,32,12,29,5,5,61,29,3,14,1,66,49,54,35,41,50,89,5,100,88,69,5,100,88,69,5,3,71,67,3,80,76,3,47,78,49,76,116,5,69,24,8,30,47,84,7,46,83,7,84,47,69,151,7,52,162,7,59,144,5,3,47,5,51,89,7,106,63,186,7,5,3,214,157,3,89,124,43,16,3,1,0,22,9,6,7,13,14,14,2,51,0,24,23,28,17,15,35,36,37,33,32,14,19,16,16,40,23,21,2,0,27,21,50,79,3,17,1,0,87,47,105,2,36,0,37,34,34,117,58,18,50,104,20,13,63,61,20,13,9,14,59,18,11,7,5,24,24,27,26,31,25,14,30,36,94,27,42,36,69,126,50,45,15,11,9,14,28,9,17,16,17,19,40,86,11,42,16,9,27,9,159,9,29,35,130,14,34,36,52,33,13,9,40,29,44,14,37,48,14,5,3,0,57,39,116,20,9,47,32,32,45,36,20,46,18,11,7,12,37,5,3,0,55,36,36,30,25,41,33,33,46,38,14,38,7,39,22,48,19,13,38,48,32,13,9,7,5,3,33,24,24,27,26,31,25,20,30,9,50,53,124,13,9,28,45,27,48,29,94,34,37,37,50,30,38,26,14,21,5,3,0,28,24,20,3,55,57,34,70,49,7,5,3,0,36,34,16,81,50,3,0,22,34,16,44,48,3,0,22,30,13,9,40,22,61,55,9,13,45,5,0,34,3,0,70,20,21,30,18,22,14,24,7,41,24,35,14,34,78,55,29,16,9,14,30,61,60,35,13,9,32,49,9,76,7,5,16,3,0,34,16,43,34,48,3,0,26,34,11,11,14,19,22,49,30,58,65,41,12,35,5,24,77,3,0,55,42,44,61,28,35,5,15,3,0,39,17,3,0,37,25,80,68,35,44,21,48,54,3,19,28,12,19,32,30,30,44,31,33,6,10,3,0,25,17,24,25,30,63,36,6,26,33,0,48,38,34,58,24,11,7,13,5,43,93,13,12,21,25,37,40,26,13,16,33,9,7,13,5,222,34,29,99,35,23,58,35,33,13,29,9,9,13,5,129,172,0,53,18,31,27,18,23,35,28,61,11,7,5,3,118,142,38,48,13,32,11,14,55,13,30,11,7,5,48,46,10,9,5,37,54,5,3,50,75,3,45,24,37,66,14,24,30,14,29,30,32,14,57,18,11,5,3,30,26,19,5,105,29,7,16,3,1,0,43,0,61,86,21,13,5,25,66,31,21,42,17,11,15,7,26,34,60,63,11,16,45,19,13,9,7,27,5,3,48,86,3,0,19,30,21,40,27,24,5,37,40,36,30,32,5,16,3,0,52,21,85,5,80,3,0,44,41,60,25,46,32,28,74,7,46,57,5,16,3,0,67,96,3,0,64,93,3,0,64,25,165,3,0,57,41,33,36,37,29,59,9,20,7,5,28,30,34,12,51,33,5,11,10,19,49,53,5,63,25,55,5,45,46,40,31,27,38,25,42,115,52,9,0,123,56,9,0,113,62,51,9,14,25,7,18,43,28,57,9,18,37,60,5,16,3,0,46,41,57,56,60,18,5,70,3,34,24,23,46,23,55,22,47,60,5,16,3,49,97,3,0,37,41,57,68,60,18,5,48,3,0,44,35,0,48,95,48,19,31,11,7,60,5,31,75,45,27,24,48,54,24,11,64,9,52,25,41,47,35,23,45,9,20,62,29,14,66,71,37,15,11,9,57,115,39,87,62,35,13,9,69,7,5,16,3,0,34,41,17,14,71,22,55,46,15,23,55,70,60,41,19,15,107,15,24,62,56,15,9,0,14,55,5,3,0,38,41,118,3,23,20,11,14,19,41,72,15,0,100,50,21,23,9,5,56,42,20,9,5,16,3,36,25,61,25,9,5,3,0,50,41,42,43,18,45,59,18,5,34,34,41,39,25,27,46,7,38,18,55,60,42,34,40,43,20,13,56,49,20,13,9,7,20,24,48,9,56,7,5,34,39,18,13,12,21,138,51,60,22,11,41,7,5,16,3,0,50,17,40,53,69,9,18,5,41,61,76,75,46,39,26,27,18,28,60,9,5,16,3,0,44,41,57,57,60,18,5,48,3,44,19,33,55,17,6,8,65,0,36,26,16,3,0,50,11,10,19,34,60,39,71,5,25,22,55,26,20,7,50,18,5,37,83,12,35,49,75,14,26,20,7,5,3,0,58,44,23,29,19,45,21,33,34,46,22,11,7,76,46,12,49,5,36,31,63,12,55,5,3,0,45,44,23,16,41,22,92,3,0,68,72,35,45,16,0,44,23,11,22,25,14,26,55,51,5,30,31,5,19,61,12,107,33,5,76,71,24,58,47,34,102,12,28,62,36,7,47,5,66,24,3,52,67,3,0,56,44,20,42,36,53,20,9,5,61,3,30,142,78,3,40,40,40,9,52,50,11,9,7,69,44,19,108,11,14,43,45,57,21,15,11,9,7,5,89,3,107,20,21,80,50,30,18,22,14,24,32,108,64,44,15,11,29,59,11,22,16,9,7,86,5,74,16,3,27,56,3,49,20,49,20,134,29,49,5,39,59,5,16,3,0,21,41,70,3,0,38,13,26,11,10,19,19,14,33,14,32,20,29,52,9,30,48,42,13,9,47,14,32,20,55,14,9,55,9,14,14,9,28,59,9,15,58,15,57,15,58,15,57,14,39,14,46,14,47,14,9,78,69,9,13,13,9,81,9,13,9,74,9,13,13,9,82,9,13,9,76,9,14,50,14,44,14,94,14,42,14,14,41,0,14,9,34,22,29,62,51,59,18,54,24,15,11,9,15,9,50,36,44,13,41,9,14,9,65,9,14,9,65,9,14,14,9,50,9,14,14,14,9,84,29,58,18,36,11,9,14,9,76,47,31,64,18,18,36,11,9,14,38,108,48,11,78,53,44,82,19,18,27,30,57,26,81,49,52,83,22,26,15,37,57,66,13,11,75,24,84,11,20,16,34,9,5,3,0,70,78,23,39,41,23,23,80,52,12,30,5,3,0,37,34,41,38,0,16,0,78,3,0,65,82,0,83,23,60,19,66,34,22,11,7,0,36,45,12,59,21,40,9,5,3,0,70,27,18,9,54,49,14,9,19,32,14,61,22,11,5,3,0,38,71,44,26,39,52,36,9,5,20,57,3,0,26,39,18,46,5,25,16,40,27,18,40,36,28,12,36,5,34,49,3,0,16,34,16,98,42,16,9,81,42,16,9,5,63,43,16,9,5,42,3,22,34,32,60,34,16,46,48,3,33,34,0,16,0,52,81,18,28,42,51,26,7,56,5,36,3,47,21,47,47,61,50,26,26,43,9,5,49,3,0,33,75,16,0,33,27,52,16,11,7,36,5,52,3,41,43,77,23,16,39,3,29,34,54,3,29,53,3,30,54,3,29,53,3,30,54,3,29,65,33,29,16,3,30,34,23,16,51,3,22,34,16,48,3,0,50,41,12,16,52,72,80,45,50,46,24,55,21,23,30,29,18,22,14,127,29,54,16,9,7,27,55,45,88,44,16,9,14,94,7,5,49,20,66,74,47,100,58,47,34,60,23,5,32,27,50,5,70,56,58,46,30,44,33,49,46,12,24,5,41,9,3,41,55,55,62,95,24,5,55,44,71,3,0,28,38,3,20,23,18,5,3,22,13,16,3,25,34,16,25,76,18,68,66,48,22,11,7,22,5,31,3,0,18,30,23,42,34,28,12,26,5,50,3,24,41,40,53,23,9,51,48,36,9,30,48,31,9,5,3,0,34,11,12,15,10,11,19,32,79,25,22,58,89,11,7,5,34,39,36,18,72,63,6,23,16,66,109,24,3,0,27,34,26,53,27,26,62,38,69,5,52,3,0,31,34,3,0,68,19,42,5,80,50,41,21,34,25,16,32,18,22,14,24,32,43,16,16,9,7,15,22,43,14,65,71,7,86,50,18,11,7,0,27,47,7,0,33,5,16,74,34,20,29,26,32,5,39,3,37,66,79,3,0,34,129,3,0,48,24,25,41,57,33,11,7,0,30,47,7,5,34,24,27,17,25,47,32,5,28,35,22,5,24,30,37,5,35,47,47,66,78,31,65,23,52,35,37,7,51,26,52,28,29,29,50,41,25,13,22,9,37,7,5,112,3,45,41,3,0,40,25,3,0,35,16,70,61,39,89,18,9,5,125,49,18,9,5,3,0,72,21,49,56,49,26,5,51,39,27,25,88,5,3,0,71,27,23,127,53,5,59,77,22,81,34,55,42,64,72,11,16,58,34,13,9,81,14,47,7,28,53,5,3,103,167,33,16,3,0,48,22,27,48,21,12,13,13,13,21,14,45,41,14,23,19,50,18,19,49,18,19,49,18,19,50,18,19,13,56,48,65,68,17,22,59,35,19,15,44,20,13,18,36,9,7,21,25,30,7,5,20,3,0,31,19,27,25,3,0,104,37,33,41,132,65,51,75,26,22,24,3,0,69,18,42,5,80,50,34,16,76,10,74,82,3,0,65,51,46,49,24,5,32,37,72,17,47,70,5,46,39,26,22,66,60,3,62,59,25,3,60,50,39,3,0,62,59,53,23,42,60,12,42,42,29,0,73,46,33,63,50,59,15,70,24,35,13,9,66,0,134,0,43,73,9,9,28,36,5,32,3,27,38,3,29,56,59,5,16,3,36,46,55,30,30,6,38,29,29,26,21,25,9,5,3,0,71,20,21,30,18,22,14,24,32,29,59,11,22,16,9,7,73,5,16,3,72,12,25,24,44,39,25,11,7,17,32,53,91,32,46,30,58,33,11,7,36,18,57,12,83,5,15,3,0,28,34,51,45,3,32,21,35,47,3,32,13,11,15,10,19,43,30,12,30,5,67,18,27,31,7,12,68,5,16,16,3,63,27,13,5,35,13,5,27,36,51,22,11,15,7,34,36,51,22,11,15,7,37,64,22,11,15,7,60,20,9,38,55,45,22,11,15,7,5,43,44,21,21,9,13,5,123,44,49,21,26,9,5,3,20,45,75,18,5,17,3,0,24,44,97,14,7,23,44,16,9,5,76,36,48,14,38,7,5,32,55,5,52,3,22,50,11,10,19,12,117,36,50,6,3,0,16,34,83,14,7,16,27,24,40,32,32,16,17,15,16,15,15,16,16,33,16,45,7,5,31,29,52,3,0,52,45,23,10,47,59,26,11,7,5,3,54,44,50,34,63,12,50,56,38,66,5,3,33,30,30,81,24,20,14,21,5,3,0,48,25,52,31,9,5,0,56,46,20,9,5,3,0,37,59,31,34,25,6,9,24,15,55,5,3,0,48,45,23,10,61,33,36,27,8,11,26,17,57,7,12,24,5,3,44,60,32,9,24,15,56,5,3,24,48,45,25,45,11,26,17,30,7,5,22,3,27,48,46,27,46,11,26,17,30,7,5,22,3,0,28,46,3,45,65,3,43,103,3,33,41,51,80,49,82,74,15,3,0,27,38,34,16,25,31,5,56,16,0,53,30,9,58,15,21,5,53,3,0,34,10,1,0,19,16,4,17,18,4,25,16,17,24,16,10,2,26,19,23,22,30,25,2,41,53,0,44,43,28,11,10,14,35,7,27,17,16,18,18,15,20,39,74,41,39,23,25,28,32,30,25,40,25,30,21,33,27,14,14,19,9,36,17,16,18,18,15,20,41,79,25,47,36,41,25,27,32,34,37,15,18,36,40,25,27,32,34,37,15,11,81,28,41,80,71,34,41,25,40,23,46,29,15,18,41,80,71,34,41,26,40,23,46,29,15,11,53,39,33,32,36,38,41,24,17,19,9,7,42,5,3,16,1,48,0,32,46,40,30,64,5,41,3,74,36,59,50,104,78,50,13,19,11,7,5,24,22,60,12,119,5,27,3,0,25,27,33,43,32,45,51,79,58,0,48,53,72,47,21,3,31,26,18,5,34,34,16,57,3,11,33,19,5,42,3,38,32,48,55,79,55,23,9,7,18,27,18,12,19,5,3,30,35,3,0,29,39,45,95,3,0,35,39,45,56,3,22,39,59,19,12,54,18,5,3,0,21,199,3,0,28,160,3,64,154,3,0,20,69,3,0,29,26,25,46,5,57,3,44,38,34,77,93,66,0,24,14,60,14,61,14,49,14,48,14,44,14,51,32,34,47,37,15,49,47,37,15,11,9,103,14,49,81,14,43,14,47,14,47,14,46,14,44,15,110,16,9,56,60,57,35,13,39,59,35,13,9,53,14,9,39,18,11,45,51,30,73,82,20,13,11,9,14,9,34,61,37,15,11,9,14,9,40,52,9,14,46,14,45,13,33,14,46,14,9,61,41,37,18,11,9,14,9,71,55,37,15,11,22,0,21,33,44,111,44,13,18,56,261,44,13,11,47,24,9,14,9,39,36,72,39,17,13,24,106,11,9,5,0,39,40,85,56,19,12,67,5,3,33,70,46,16,9,5,3,35,57,106,3,0,63,26,45,69,77,5,21,3,29,26,3,32,26,8,45,29,25,25,26,7,50,49,33,11,7,49,59,31,9,5,22,3,20,62,34,16,39,43,15,27,45,20,38,24,52,51,66,113,67,30,13,9,14,43,30,50,29,32,82,52,18,55,11,32,59,9,66,7,12,51,5,46,3,38,23,46,25,68,44,53,5,16,3,46,16,34,24,12,42,23,5,44,83,3,38,10,52,39,63,72,41,7,5,41,68,47,17,12,9,5,3,32,16,21,54,3,27,20,39,20,15,3,0,31,16,38,0,15,49,27,28,20,45,17,53,3,0,27,16,38,23,58,43,5,34,20,25,29,33,7,39,5,48,84,159,59,40,36,18,42,68,37,39,39,18,11,7,82,52,7,29,33,7,39,5,0,50,55,65,43,18,26,37,18,11,7,10,74,39,18,11,7,5,36,58,36,65,28,13,14,9,9,34,21,12,60,5,27,31,5,37,3,0,63,16,177,3,0,26,16,45,63,10,90,48,3,30,80,40,31,9,5,16,0,34,27,12,45,23,5,52,3,0,30,16,53,34,19,40,34,0,12,43,45,38,52,43,28,20,21,44,16,27,57,44,15,11,28,26,9,24,14,18,61,16,28,9,7,5,22,48,16,28,52,3,29,16,39,44,36,9,5,43,21,51,3,27,42,47,54,27,11,27,8,28,36,7,17,3,27,16,35,24,25,38,18,27,24,52,24,14,28,38,7,0,19,51,37,24,60,5,61,43,43,16,9,5,49,3,0,66,16,62,21,56,3,0,29,16,45,38,0,15,49,27,28,51,3,28,28,37,31,9,5,16,47,0,15,49,27,50,3,29,16,51,3,0,55,44,37,47,19,30,11,7,5,90,61,41,48,48,26,14,14,7,5,28,22,17,38,7,138,28,22,53,3,38,15,27,21,56,3,0,86,34,26,38,5,19,32,36,5,74,32,24,5,51,3,26,131,3,73,32,44,117,3,0,81,40,39,35,30,85,46,42,55,37,82,42,33,11,19,9,34,40,7,22,5,26,57,5,21,28,5,16,3,0,24,21,26,63,26,65,20,0,15,49,27,22,28,49,3,0,35,35,16,18,53,12,36,5,190,49,17,59,9,5,44,37,17,19,30,9,9,5,21,83,20,0,15,49,27,22,28,80,3,0,64,48,21,14,36,34,116,59,102,60,41,33,13,85,60,41,25,13,9,7,69,31,5,16,3,26,39,24,11,34,8,55,7,17,3,0,38,61,3,0,61,76,68,79,56,37,25,31,62,33,11,7,18,28,5,24,48,5,72,46,37,65,25,39,5,42,0,51,106,7,26,22,47,45,5,66,16,3,30,91,3,45,20,63,71,32,3,37,25,0,186,3,0,45,16,0,40,29,53,31,66,87,3,21,61,3,19,26,3,34,86,40,3,0,44,28,19,28,19,6,24,39,24,19,0,51,30,27,38,57,42,15,11,19,9,29,49,19,9,40,0,32,41,65,26,9,56,12,40,28,39,51,22,13,9,7,7,34,16,0,28,50,31,9,5,27,51,3,0,51,43,0,31,28,0,29,30,23,28,74,18,40,26,0,28,21,26,57,18,5,48,17,3,46,44,19,65,15,7,24,54,15,7,5,74,3,68,32,33,30,31,32,32,38,29,49,23,29,44,41,26,75,15,7,54,51,30,11,7,79,13,5,87,38,51,59,52,31,29,22,76,15,7,0,70,36,26,42,0,68,51,19,13,9,79,52,19,13,9,36,48,7,100,40,22,62,14,54,7,82,50,39,34,52,7,29,40,41,54,22,81,14,56,49,32,13,9,87,7,124,50,29,40,47,22,76,14,56,52,32,13,9,82,7,49,85,50,50,0,40,45,73,41,22,62,14,54,7,12,24,5,3,0,33,11,11,11,19,83,42,31,9,5,23,36,57,33,11,7,42,23,17,5,42,3,44,27,69,40,27,32,34,64,26,22,34,64,88,47,18,9,5,3,38,98,48,20,9,5,55,3,45,54,30,113,3,57,39,27,70,50,17,11,7,5,55,30,20,115,5,3,94,127,3,67,106,30,233,54,3,48,98,3,0,31,18,0,35,32,21,57,3,0,28,32,21,50,3,36,32,21,58,3,0,26,48,53,32,70,32,26,22,3,73,45,39,24,61,7,12,39,23,14,51,33,11,7,5,3,0,25,71,3,0,33,61,10,58,60,10,76,10,85,49,35,40,23,61,18,11,7,39,59,5,63,10,129,37,5,23,42,29,23,61,18,11,7,49,12,62,5,60,29,25,59,121,71,30,61,18,11,7,62,5,23,25,55,31,45,58,30,61,18,11,7,42,64,5,35,3,0,23,24,3,42,42,45,41,54,79,18,5,17,3,44,32,49,69,18,56,83,18,5,17,3,41,24,49,54,72,25,30,47,29,7,18,5,17,3,37,46,27,25,47,29,7,59,18,5,17,3,21,45,39,114,3,34,34,25,18,100,40,18,18,126,5,25,47,5,25,105,50,33,11,7,114,5,59,57,31,9,5,47,21,15,3,0,25,9,25,66,18,5,41,3,30,11,10,19,34,66,21,7,70,15,24,29,79,55,23,9,7,33,19,5,39,60,94,18,5,36,86,58,5,17,3,33,33,45,29,59,23,37,41,7,24,24,5,21,3,34,11,10,19,22,64,41,75,58,35,13,9,20,7,5,110,3,52,21,22,52,50,33,47,126,100,62,29,15,11,9,61,50,17,20,24,93,60,43,19,19,26,46,56,30,39,26,17,20,79,49,13,11,9,36,110,41,56,52,69,68,50,11,9,7,5,3,26,37,50,47,43,36,7,46,41,19,38,9,7,48,40,45,43,51,39,5,3,43,51,37,51,18,11,14,44,19,20,11,7,5,45,3,0,41,21,21,0,19,26,18,22,14,24,31,7,53,39,36,48,93,5,17,3,38,33,5,33,51,26,53,32,50,5,52,3,0,27,26,63,58,22,61,21,55,11,7,20,5,38,3,28,34,36,12,13,13,114,9,5,17,3,31,22,27,97,55,42,11,7,98,57,42,11,7,5,3,31,80,13,18,15,31,71,23,53,39,60,42,11,39,111,11,11,53,58,50,13,9,7,5,3,36,35,33,41,38,40,30,36,16,104,47,38,11,9,35,34,7,5,29,44,18,25,52,26,5,3,0,21,25,27,44,69,52,76,71,32,5,43,57,21,35,12,59,23,37,7,5,37,37,21,54,3,23,44,32,3,0,34,46,3,52,45,70,3,70,37,20,26,7,44,3,0,24,21,32,8,26,14,7,36,0,39,35,62,34,22,11,7,29,28,52,14,46,7,22,29,62,33,11,7,61,59,27,17,3,0,32,58,44,18,12,56,18,5,21,33,8,36,44,37,61,22,11,7,42,62,23,28,11,7,36,22,29,62,33,11,7,61,47,23,27,17,3,32,65,44,18,12,56,18,5,16,44,16,17,3,42,46,87,18,5,17,3,39,25,41,18,32,82,18,5,17,3,36,21,19,26,18,22,14,27,59,35,13,9,24,31,7,41,47,53,56,173,44,5,3,0,51,50,5,33,47,12,13,16,20,29,56,24,36,11,7,77,29,52,7,5,81,3,0,22,64,3,1,0,38,0,31,34,26,27,28,52,43,3,0,21,24,3,11,30,34,37,21,23,38,36,16,3,1,30,30,33,74,65,3,19,1,0,32,15,88,41,9,36,47,33,37,19,7,47,13,40,51,28,14,42,7,17,27,11,38,49,27,24,5,10,45,3,1,42,43,34,31,3,32,1,57,24,59,74,3,20,1,48,36,19,43,37,42,3,33,1,28,0,45,90,35,34,13,17,38,38,5,32,3,13,1,0,22,42,28,33,0],"data":{"version":3,"file":"index.js","sources":["file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/location.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/credentials.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/module-errors.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/to-node-description.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/standard-errors.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/estree.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/context.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/types.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/identifier.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/scopeflags.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/scope.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/flow/scope.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/base.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/comments.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/whitespace.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/state.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/babel-helper-string-parser/src/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/class-scope.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/expression-scope.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/util/production-parameter.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/util.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/node.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/flow/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/jsx/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/typescript/scope.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/typescript/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/placeholders.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/v8intrinsic.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/plugin-utils.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/options.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/lval.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/expression.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/statement.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/index.ts","file:///D:/BitBounceFE-UI/node_modules/.pnpm/registry.npmmirror.com+@babel+parser@7.20.7/node_modules/@babel/parser/src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrFunctionDeclaration(false);\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.allowingSloppyLetBinding\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  parseStatementOrFunctionDeclaration(\n    this: Parser,\n    disallowLabeledFunction: boolean,\n  ) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowFunctionDeclaration |\n        (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrFunctionDeclaration(\n      // https://tc39.es/ecma262/#sec-if-statement-static-semantics-early-errors\n      true,\n    );\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrFunctionDeclaration(true)\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrFunctionDeclaration(false)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","ParseFunctionFlag","ParseStatementFlag","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","AllowImportExport","AllowDeclaration","AllowFunctionDeclaration","AllowLabeledFunction","parseStatementListItem","disallowLabeledFunction","parseStatement","StatementOnly","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","Declaration","HangingDeclaration","Async","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","Expression","hangingDeclaration","isDeclaration","NullableId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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AC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC,CAAA;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EA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","sourceRoot":""},"url":null}}}